<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2015-02-21T16:36:17+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Don't let private and public key sit in the same folder when vagrant up]]></title>
    <link href="http://www.ahwkong.com/post/2015/02/19/cannot-let-private-and-public-key-sit-in-the-same-folder-when-vagrant-up/"/>
    <updated>2015-02-19T16:39:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/02/19/cannot-let-private-and-public-key-sit-in-the-same-folder-when-vagrant-up</id>
    <content type="html"><![CDATA[<p>The problem is this:</p>

<p><strong><code>vagrant</code> failed to provision a box after it is successfully created in aws ec2.</strong></p>

<p>It reported:</p>

<pre><code>     INFO ssh: SSH not up: #&lt;Vagrant::Errors::SSHAuthenticationFailed: SSH authentication failed! This is typically caused by the public/private
     keypair for the SSH user not being properly set on the guest VM. Please
     verify that the guest VM is setup with the proper public key, and that
     the private key path for Vagrant is setup properly as well.&gt;
</code></pre>

<p>But if I do <code>vagrant ssh</code> I can login to the box with no problem.</p>

<p>I have tried everything to get it to work. I have removed <code>rvm</code>, I have reinstalled <code>chefdk</code>, I have downgraded <code>vagrant</code>&hellip; None of them work.</p>

<p>I studied the log message a bit closer and I found these lines:</p>

<pre><code>     769 D, [2015-02-19T15:05:43.563478 #14537] DEBUG -- net.ssh.authentication.session[851208b0]: allowed methods: publickey
     770 D, [2015-02-19T15:05:43.563564 #14537] DEBUG -- net.ssh.authentication.methods.none[85125400]: none failed
     771 D, [2015-02-19T15:05:43.563650 #14537] DEBUG -- net.ssh.authentication.session[851208b0]: trying publickey
     772 E, [2015-02-19T15:05:43.564057 #14537] ERROR -- net.ssh.authentication.key_manager[851256d0]: could not load public key file `/Users/antkong/dev/project/aws/aws-ami.pem': Net::SSH::Exception (public key at /Users/antkong/dev/project/aws/aws-ami.pem.pub is not valid)
</code></pre>

<p>Apparently for some reason the key manager picked the public key file to connect to the server: I have specified a private key file in the <code>Vagrantfile</code>. The key manager added &lsquo;.pub&rsquo; to the file name and pick the file up.</p>

<p>Removing the public key file solved the issue.</p>

<p><strong>Lesson</strong>: Don&rsquo;t put the public key along with the private key.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh forwarding in vagrant and private github repository]]></title>
    <link href="http://www.ahwkong.com/post/2015/02/13/ssh-forwarding/"/>
    <updated>2015-02-13T16:23:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/02/13/ssh-forwarding</id>
    <content type="html"><![CDATA[<p>It is how to checkout git private repository from within a VM without leaving a key in the VM</p>

<p>First in host OS (Mac OSX in my case), run</p>

<pre><code>ssd-add /path/to/githubkey
</code></pre>

<p>In the <code>.ssh/config</code>, add these lines:</p>

<pre><code>    Host           github
    HostName       github.com
    IdentityFile   /path/to/githubkey
</code></pre>

<p>Then enable port forwarding in vagrant VM</p>

<pre><code>Vagrant.configure("2") do |config|
  config.ssh.forward_agent = true
</code></pre>

<p>After you have run <code>vagrant up</code>, you can test the connection in the VM by running</p>

<pre><code>ssh -T git@github.com
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef, brekshelf and data bag]]></title>
    <link href="http://www.ahwkong.com/post/2015/01/20/chef/"/>
    <updated>2015-01-20T14:41:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/01/20/chef</id>
    <content type="html"><![CDATA[<p>After some trial and errors, the best way (as of this writing) to manage cookbooks for <strong>vagrant</strong> + <strong>chef</strong> is to use brekshef. You can forget about <code>knife</code> or <code>librarian-chef</code>.</p>

<p>If you use berkshelf with vagrant, you will need to install the vagrant-berkshelf plugin. The plugin is quite clever and you do not need to specify the cookbook path for your chef-solo or chef-zero provisioner.</p>

<p>However it does not apply to <code>data_bags</code>. You will still need to specify the path to <code>data_bags</code> if you need to use data bag.</p>
]]></content>
  </entry>
  
</feed>
