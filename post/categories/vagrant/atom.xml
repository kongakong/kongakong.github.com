<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2015-03-02T19:01:26+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lesson from learning to use vagrant, chef and sensu]]></title>
    <link href="http://www.ahwkong.com/post/2015/03/02/lesson-from-vagrant/"/>
    <updated>2015-03-02T09:16:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/03/02/lesson-from-vagrant</id>
    <content type="html"><![CDATA[<p>Couple of weeks ago I set out to learn to use vagrant + <strong>chef</strong> + sensu to achieve the goal of automated data server deployment and server monitoring.</p>

<p>I would like to share my experience so new comers can get up to speed faster and avoid some time-wasters.</p>

<p>The structure of this post can be confusing because it is more like my cliff note.</p>

<h2>Background of my final chioces</h2>

<p>A small startup that uses aws ec2 for key functionality. The tools should cost as little as possible. Open source solution is prefered.</p>

<h2>What are the advantages of vagrant, chef and sensu?</h2>

<p><strong>Vagrant</strong> and <strong>chef</strong> are great tools. They are indispensable to automation of VM creation and provision.</p>

<p><strong>Sensu</strong> is an open source monitoring platform. It is very flexible because it uses ruby to develop plugins to extend the framework&rsquo;s capability.</p>

<p>All of them have strong momentum from their communities</p>

<h2>Learning Vagrant</h2>

<h3>Vagrantfile</h3>

<p><strong>Vagrant</strong> is actually rather easy to master. The key file <strong>Vagrantfile</strong> is by itself a ruby script. It allows a lot of flexibility of customisation. The key hurdle is to write up a <strong>Vagrantfile</strong> that suits your need. The default <strong>Vagrantfile</strong> is pretty useless.</p>

<h3>Know your override</h3>

<p>You will need to know how to use the <code>override</code> object to customise your vagrant settings</p>

<h3>Provider</h3>

<p>A limitation of vagrant as of 1.6.x is that you can only use one active provider at a time. It means that if you have <code>vagrant up</code> to Virtualbox, you cannot fire up another instance in aws in the same folder. You can remove the &lsquo;.vagrant&rsquo; folder if you must.</p>

<h3>Provisioner</h3>

<p>My choice of provisioner is <strong>chef</strong>. I choose it over <strong>puppet</strong> mainly because of <strong>chef</strong> uses ruby as the scripting lanagage. <code>Nagios</code> is bascailly out of the question due to its legacy and complexity. Unfortunately there was a lot of changes at <strong>chef</strong> in last couple of months and it makes the learning experience less than pleasant. More on <strong>chef</strong> later.</p>

<h3>Plugins</h3>

<p>If your primary platform is aws, you will need to install <code>vagrant-aws</code>. There are a lot of useful plugins and it is something one shoudl explore to discover all sort of possibility.</p>

<p>You will also need <code>vagrant-chef-zero</code>, <code>vagrant-omnibus</code> and <code>vagrant-berkshelf</code> in order to work with chef.</p>

<h2>Learning Chef</h2>

<h3>Implementation</h3>

<p>My goal is to make my <strong>chef</strong> cookbook and deployment as self-contained as possible.</p>

<h3>Lack of good documentation and Conflicting opinions abound</h3>

<p>I were unable to find a single starting point and clear documentation to learn <strong>chef</strong> on the official website. The documentation are either very fragmented or not up to date. The biggest distraction is the use of <strong>knife</strong>. It is tightly coupled with <strong>chef</strong> server. However in my opinion the power of <strong>chef</strong> actually lies with the concept of <code>cookbook</code>.</p>

<p>Apparently <strong>chef</strong> has released a number of tools before to help with devops' jobs.</p>

<p>The main tool, <strong>knife</strong>, is pretty useless to me because</p>

<p><em>. I want to run <strong>chef</strong> in a standalone mode and knife assumes you are using chef enterprise service
</em>. Some function like data bag creation is not useful</p>

<p><strong>Librarian</strong> is superceded by <strong>berkshelf</strong>. Especially if you are going to use vagrant with chef, the brekshelf will take care of all the cookbook dependency automagically.</p>

<p>Don&rsquo;t bother with <strong>libraian</strong>.</p>

<p>I think the book &ldquo;Learning Chef&rdquo; by Mischa Taylor is by far the most systemic and easy to read book in the subject area. If I have discovered this book at the begining I am sure I will save at least a week time in research.</p>

<h3>How to approach cookbook?</h3>

<p>I think cookbook is the best feature of chef, but it is not very adequately explained.</p>

<p>That&rsquo;s why you need to get your hand dirty and learn how to write your cookbook by using <strong>kitchen</strong></p>

<p>At the beginning I thought I can get away from writing custom cookbook. I now see it as an impossibility.</p>

<h3>Keep converge until you get it</h3>

<p>Use <strong>kitchen</strong> to create a cookbook skeleton. Start write up your recipes.</p>

<p><strong>Tip</strong>: Break down your provisioning requirement into logical units and make them as self-contained and small and possible. In this way, you can test each individual recipe quickly with <code>kitchen converge</code>.</p>

<p>When you are happy with all the recipes, do the final integration test by running up the chef provision with <strong>vagrant</strong>.</p>

<h3>Sensu</h3>

<p>More on sensu later&hellip; To be continued</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't let private and public key sit in the same folder when vagrant up]]></title>
    <link href="http://www.ahwkong.com/post/2015/02/19/cannot-let-private-and-public-key-sit-in-the-same-folder-when-vagrant-up/"/>
    <updated>2015-02-19T16:39:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/02/19/cannot-let-private-and-public-key-sit-in-the-same-folder-when-vagrant-up</id>
    <content type="html"><![CDATA[<p>The problem is this:</p>

<p><strong><code>vagrant</code> failed to provision a box after it is successfully created in aws ec2.</strong></p>

<p>It reported:</p>

<pre><code>     INFO ssh: SSH not up: #&lt;Vagrant::Errors::SSHAuthenticationFailed: SSH authentication failed! This is typically caused by the public/private
     keypair for the SSH user not being properly set on the guest VM. Please
     verify that the guest VM is setup with the proper public key, and that
     the private key path for Vagrant is setup properly as well.&gt;
</code></pre>

<p>But if I do <code>vagrant ssh</code> I can login to the box with no problem.</p>

<p>I have tried everything to get it to work. I have removed <code>rvm</code>, I have reinstalled <code>chefdk</code>, I have downgraded <code>vagrant</code>&hellip; None of them work.</p>

<p>I studied the log message a bit closer and I found these lines:</p>

<pre><code>     769 D, [2015-02-19T15:05:43.563478 #14537] DEBUG -- net.ssh.authentication.session[851208b0]: allowed methods: publickey
     770 D, [2015-02-19T15:05:43.563564 #14537] DEBUG -- net.ssh.authentication.methods.none[85125400]: none failed
     771 D, [2015-02-19T15:05:43.563650 #14537] DEBUG -- net.ssh.authentication.session[851208b0]: trying publickey
     772 E, [2015-02-19T15:05:43.564057 #14537] ERROR -- net.ssh.authentication.key_manager[851256d0]: could not load public key file `/Users/antkong/dev/project/aws/aws-ami.pem': Net::SSH::Exception (public key at /Users/antkong/dev/project/aws/aws-ami.pem.pub is not valid)
</code></pre>

<p>Apparently for some reason the key manager picked the public key file to connect to the server: I have specified a private key file in the <code>Vagrantfile</code>. The key manager added &lsquo;.pub&rsquo; to the file name and pick the file up.</p>

<p>Removing the public key file solved the issue.</p>

<p><strong>Lesson</strong>: Don&rsquo;t put the public key along with the private key.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh forwarding in vagrant and private github repository]]></title>
    <link href="http://www.ahwkong.com/post/2015/02/13/ssh-forwarding/"/>
    <updated>2015-02-13T16:23:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/02/13/ssh-forwarding</id>
    <content type="html"><![CDATA[<p>It is how to checkout git private repository from within a VM without leaving a key in the VM</p>

<p>First in host OS (Mac OSX in my case), run</p>

<pre><code>ssd-add /path/to/githubkey
</code></pre>

<p>In the <code>.ssh/config</code>, add these lines:</p>

<pre><code>    Host           github
    HostName       github.com
    IdentityFile   /path/to/githubkey
</code></pre>

<p>Then enable port forwarding in vagrant VM</p>

<pre><code>Vagrant.configure("2") do |config|
  config.ssh.forward_agent = true
</code></pre>

<p>After you have run <code>vagrant up</code>, you can test the connection in the VM by running</p>

<pre><code>ssh -T git@github.com
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef, brekshelf and data bag]]></title>
    <link href="http://www.ahwkong.com/post/2015/01/20/chef/"/>
    <updated>2015-01-20T14:41:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/01/20/chef</id>
    <content type="html"><![CDATA[<p>After some trial and errors, the best way (as of this writing) to manage cookbooks for <strong>vagrant</strong> + <strong>chef</strong> is to use brekshef. You can forget about <code>knife</code> or <code>librarian-chef</code>.</p>

<p>If you use berkshelf with vagrant, you will need to install the vagrant-berkshelf plugin. The plugin is quite clever and you do not need to specify the cookbook path for your chef-solo or chef-zero provisioner.</p>

<p>However it does not apply to <code>data_bags</code>. You will still need to specify the path to <code>data_bags</code> if you need to use data bag.</p>
]]></content>
  </entry>
  
</feed>
