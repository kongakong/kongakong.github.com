<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/swift/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2015-02-22T13:19:21+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dictionary in swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/11/06/dictionary-in-swift/"/>
    <updated>2014-11-06T11:03:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/11/06/dictionary-in-swift</id>
    <content type="html"><![CDATA[<p>Dictionary look returns an Optional type by default</p>

<pre><code>    var dict = ["name":"hello"]

    println(dict["name"])         # "Optional("hello")

    println(dict["name"]!)        # "hello"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[init chain rule in swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/init-chain-rule-in-swift/"/>
    <updated>2014-09-18T16:30:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/init-chain-rule-in-swift</id>
    <content type="html"><![CDATA[<blockquote><p>Swift has a narrow rule whereby a class with a designated initializer with no arguments is implicitly called by dereived class initializers if no other super.init call is specified and it is otherwise unambiguous.  This is why you don&rsquo;t need to explicitly call super.init() when subclassing NSObject, for example.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@IBDesignable and @IBInspectable ]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/at-ibdesignable-and-at-ibinspectable/"/>
    <updated>2014-09-18T16:26:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/at-ibdesignable-and-at-ibinspectable</id>
    <content type="html"><![CDATA[<blockquote><p>You can use two different attributes—@IBDesignable and @IBInspectable—to enable live, interactive custom view design in Interface Builder.</p></blockquote>

<p>from <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/WritingSwiftClassesWithObjective-CBehavior.html">Apple doc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift ternanry operator ?]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/swift-ternanry-operators/"/>
    <updated>2014-09-18T01:25:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/swift-ternanry-operators</id>
    <content type="html"><![CDATA[<p>This will cause a compiler error:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let a=3
</span><span class='line'>let b=4&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>let max = (a>b)? a:b // Compiler Error: Consecutive statements on a line must be separated by &lsquo;;&rsquo;&ldquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Putting spaces around operators will resolve the compiler error i.e.</p>

<pre><code>let max = a &gt; b ? a : b
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[autorelease in swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/autorelease-in-swift/"/>
    <updated>2014-09-18T01:01:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/autorelease-in-swift</id>
    <content type="html"><![CDATA[<p>In Swift it may be necessary to use <code>autorelease</code> if we are using objective-c objects. e.g.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>autoreleasepool {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    // do something expensive without using Obj-C code
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is a clang doc regarding <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#retained-return-values">ARC and retain count</a>. A lot of info to digest&hellip;</p>
]]></content>
  </entry>
  
</feed>
