<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objective-c | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2014-02-11T08:28:25+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[missing the viewDidLoad event]]></title>
    <link href="http://www.ahwkong.com/post/2014/02/11/missing-the-viewdidload-event/"/>
    <updated>2014-02-11T08:12:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/02/11/missing-the-viewdidload-event</id>
    <content type="html"><![CDATA[<p>This is my original code. It does the job and put a specialised view into a cell of a UICollectionView</p>

<p>{% codeblock lang:objective-c %}</p>

<pre><code>TT2TimeViewController* controller = [[TT2TimeViewController alloc] init];
controller.city = city;
UIView* view = [[[NSBundle mainBundle] loadNibNamed:@"TT2TimeViewController"
                                              owner:controller
                                            options:nil] objectAtIndex:0];
</code></pre>

<p>{% endcodeblock %}</p>

<p>However, for some reason, the view controller <code>controller</code> will miss the ViewDidLoad event.  The selector is not called at all.</p>

<p>This problem is resolved if I switch to use <code>initWithNibName</code> instead:</p>

<p>{% codeblock lang:objective-c %}</p>

<pre><code>TT2TimeViewController* controller = [[TT2TimeViewController alloc] initWithNibName:@"TT2TimeViewController"
                                        bundle:[NSBundle mainBundle]];
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dispatch_once]]></title>
    <link href="http://www.ahwkong.com/post/2014/02/09/dispatch-once/"/>
    <updated>2014-02-09T21:22:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/02/09/dispatch-once</id>
    <content type="html"><![CDATA[<p>Wanted to declare and initialise a static variable in a .m file.</p>

<p>Objective-c compiler does not like it, and raise this error message:</p>

<pre><code>Initializer element is not a compile-time constant
</code></pre>

<p>I like the explanation <a href="http://stackoverflow.com/a/11934961/58129">here</a> on Stackoverflow:</p>

<blockquote><p>Objective-C is a strict superset of C. It&rsquo;s illegal in C to have any executable code outside of a function (or method in Objective-C).</p></blockquote>

<p>Leading from this answer I discovered that I should use <code>dispatch_once</code> for initialisation</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixing C++ and Objective-c in XCode]]></title>
    <link href="http://www.ahwkong.com/post/2014/02/02/mixing-c-plus-plus-and-objective-c-in-xcode/"/>
    <updated>2014-02-02T21:04:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/02/02/mixing-c-plus-plus-and-objective-c-in-xcode</id>
    <content type="html"><![CDATA[<p>The c++ header keeps getting a compiler error:</p>

<pre><code>'iostream' file not found 
</code></pre>

<p>Here is the solution: wrap the <code>#include</code> inside <code>#ifdef __cplus</code></p>

<p>{% codeblock lang:objective-c %}</p>

<h1>ifdef __cplus</h1>

<h1>include <iostream></h1>

<h1>endif</h1>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[weak reference in block]]></title>
    <link href="http://www.ahwkong.com/post/2014/01/23/weak-reference/"/>
    <updated>2014-01-23T21:55:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/01/23/weak-reference</id>
    <content type="html"><![CDATA[<p>To avoid cyclic reference when referring to an object outside a block, we can do the following:</p>

<p>{% codeblock lang:objective-c %}</p>

<pre><code>__weak typeof(self) weakSelf = self;
gravity.action = ^{
    typeof(self) strongSelf = weakSelf;
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[class cluster]]></title>
    <link href="http://www.ahwkong.com/post/2014/01/17/class-cluster/"/>
    <updated>2014-01-17T22:42:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/01/17/class-cluster</id>
    <content type="html"><![CDATA[<p>We can use the <a href="https://developer.apple.com/library/ios/documentation/general/conceptual/devpedia-cocoacore/ClassCluster.html">class cluster</a> technique to manage compatibility on different iOS platforms.</p>
]]></content>
  </entry>
  
</feed>
