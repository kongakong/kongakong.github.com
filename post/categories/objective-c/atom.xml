<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objective-c | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2014-02-02T21:08:59+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mixing C++ and Objective-c in XCode]]></title>
    <link href="http://www.ahwkong.com/post/2014/02/02/mixing-c-plus-plus-and-objective-c-in-xcode/"/>
    <updated>2014-02-02T21:04:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/02/02/mixing-c-plus-plus-and-objective-c-in-xcode</id>
    <content type="html"><![CDATA[<p>The c++ header keeps getting a compiler error:</p>

<pre><code>'iostream' file not found 
</code></pre>

<p>Here is the solution: wrap the <code>#include</code> inside <code>#ifdef __cplus</code></p>

<p>{% codeblock lang:objective-c %}</p>

<h1>ifdef __cplus</h1>

<h1>include <iostream></h1>

<h1>endif</h1>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[weak reference in block]]></title>
    <link href="http://www.ahwkong.com/post/2014/01/23/weak-reference/"/>
    <updated>2014-01-23T21:55:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/01/23/weak-reference</id>
    <content type="html"><![CDATA[<p>To avoid cyclic reference when referring to an object outside a block, we can do the following:</p>

<p>{% codeblock lang:objective-c %}</p>

<pre><code>__weak typeof(self) weakSelf = self;
gravity.action = ^{
    typeof(self) strongSelf = weakSelf;
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[class cluster]]></title>
    <link href="http://www.ahwkong.com/post/2014/01/17/class-cluster/"/>
    <updated>2014-01-17T22:42:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/01/17/class-cluster</id>
    <content type="html"><![CDATA[<p>We can use the <a href="https://developer.apple.com/library/ios/documentation/general/conceptual/devpedia-cocoacore/ClassCluster.html">class cluster</a> technique to manage compatibility on different iOS platforms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make picker 2 data dependent on the selected row of picker 1]]></title>
    <link href="http://www.ahwkong.com/post/2014/01/05/make-picker-2-data-dependent-on-the-selected-row-of-picker-1/"/>
    <updated>2014-01-05T06:28:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/01/05/make-picker-2-data-dependent-on-the-selected-row-of-picker-1</id>
    <content type="html"><![CDATA[<p>It is what I want to achieve: whenever a selection is changed in the top UIPicker, the choices in the second UIPicker will change accordingly.</p>

<p>{% img /images/twopickers.png 341 497  %}
{% img /images/twopickers_b.png 341 497  %}</p>

<p>Useful lessons from this exercise:</p>

<ul>
<li>The use of API <code>reloadAllComponents</code></li>
<li>The use of class extension and category</li>
<li>Identification of the UI object &ndash; apparently a <code>==</code> is sufficient to find out which picker instance a picker API is handling</li>
</ul>


<p>{% codeblock lang:objective-c %}</p>

<h1>import &ldquo;SOViewController.h&rdquo;</h1>

<p>@interface SOViewController ()</p>

<p>@property (weak, nonatomic) IBOutlet UIPickerView <em>Picker1;
@property (weak, nonatomic) IBOutlet UIPickerView </em>Picker2;</p>

<p>@end</p>

<p>@interface SOViewController (SOPickerDelegate) &lt;UIPickerViewDelegate, UIPickerViewDataSource></p>

<p>@end</p>

<p>@implementation SOViewController
{</p>

<pre><code>NSArray* list_media;
NSArray* list_media_channel;
</code></pre>

<p>}</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];
  list_media = @[@&ldquo;TV&rdquo;, @&ldquo;Radio&rdquo;];
  list_media_channel = @[ @[@&ldquo;ABC&rdquo;, @&ldquo;SBS&rdquo;], @[@&ldquo;TripleJ&rdquo;, @&ldquo;107.1&rdquo;, @&ldquo;CBS&rdquo;]];
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}</p></li>
</ul>


<p>@end</p>

<p>@implementation SOViewController(SOPickerDelegate)</p>

<ul>
<li><p>(void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component{
  if (pickerView == <em>Picker1) {
      // set Picker 2 accordingly
      [</em>Picker2 reloadAllComponents];
  }
}</p></li>
<li><p>(NSArray<em>) getDataByPicker:(UIPickerView </em>)pickerView
{
  if (pickerView == <em>Picker1) {
      return list_media;
  } else {
      NSArray* content = [list_media_channel objectAtIndex:[</em>Picker1 selectedRowInComponent:0]];
      return content;
  }
}</p></li>
<li><p>(NSString <em>)pickerView:(UIPickerView </em>)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component
{
  NSArray* data = [self getDataByPicker:pickerView];
  return [data objectAtIndex:row];
}</p></li>
<li><p>(NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component{</p>

<p>  NSArray* data = [self getDataByPicker:pickerView];
  return [data count];
}</p></li>
<li><p>(NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
  return 1;
}</p></li>
</ul>


<p>@end</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[category vs class extension]]></title>
    <link href="http://www.ahwkong.com/post/2014/01/01/category-vs-class-extension/"/>
    <updated>2014-01-01T07:25:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/01/01/category-vs-class-extension</id>
    <content type="html"><![CDATA[<p>Category does not allow addition of ivar.</p>

<p>The restriction does not apply to class extension.</p>

<p>That&rsquo;s why I can do something like this:</p>

<p>{% codeblock lang:objective-c %}</p>

<p>@interface SOViewController ()
@property (weak, nonatomic) IBOutlet UIPickerView <em>Picker1;
@property (weak, nonatomic) IBOutlet UIPickerView </em>Picker2;</p>

<p>@end</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
