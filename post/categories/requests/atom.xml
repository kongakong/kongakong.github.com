<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: requests | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/requests/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2014-01-01T07:57:44+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Whenever you think you need urllib2, you actually need requests]]></title>
    <link href="http://www.ahwkong.com/post/2013/05/14/p-50367270258/"/>
    <updated>2013-05-14T07:21:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2013/05/14/p-50367270258</id>
    <content type="html"><![CDATA[<p>So, today, when I want to write up a simple test to post data to a web server, I imported lib urllib2 right away.</p>

<p>It usually works great… until you need something more than basic.</p>

<p>Apparently I need to set some cookie and set to the server. Let’s import cookiejar and cookie…</p>

<p>Why it throws an exception <em>AttributeError: ‘SimpleCookie’ object has no attribute +’rfc2965’</em>?</p>

<p>OK, let&rsquo;s import DefaultCookiePolicy. Then I got hit by a <em>missing domain attribute</em> exception. &ldquo;Do I need to use a lower level Cookie class to set the domain?&rdquo;, I wonder. Try switching to Cookie and it throw this exception</p>

<p>{% codeblock lang:python %}</p>

<p>Traceback (most recent call last):</p>

<pre><code>...
c = Cookie()
</code></pre>

<p>TypeError: <strong>init</strong>() takes at least 17 arguments (1 given)
{% endcodeblock %}</p>

<p>At this point I said to myself: No, I am not going to figure out the 17 arguments. My test code is at this point in this dismal state:.</p>

<p>{% codeblock lang:python %}</p>

<pre><code>import urllib2
from cookielib import Cookie, CookieJar, DefaultCookiePolicy  
from Cookie import SimpleCookie        

policy = DefaultCookiePolicy(rfc2965=True)        

c = SimpleCookie()
c['secretkey'] = auth_token
cj = CookieJar(policy)
cj.set_cookie(c)

req = urllib2.Request("%s/postdata" % self.server_url)
proxyHandler = urllib2.ProxyHandler( {} )
defaultErrorHandler = urllib2.HTTPDefaultErrorHandler()
cookieHandler = urllib2.HTTPCookieProcessor(cj)
opener = urllib2.build_opener( proxyHandler, defaultErrorHandler, cookieHandler )
opener.open(req, data, 10000)
</code></pre>

<p>{% endcodeblock %}</p>

<p>Instead of continuing banging my head against a wall, I recall reading about ‘requests’ module. Let give it a go.</p>

<p>Like magic, it is all I need. 2 lines.</p>

<p>{% codeblock lang:python %}</p>

<pre><code> import requests
 requests.post(url, data, cookie=cookie, headers=headers)
</code></pre>

<p>{% endcodeblock %}</p>

<p>It just works. Well done, requests!</p>
]]></content>
  </entry>
  
</feed>
