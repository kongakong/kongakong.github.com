<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: euler | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/euler/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2014-03-04T18:51:46+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Little Erlang Exercise 3]]></title>
    <link href="http://www.ahwkong.com/post/2008/01/29/5132302946249986477/"/>
    <updated>2008-01-29T22:09:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2008/01/29/5132302946249986477</id>
    <content type="html"><![CDATA[<p>Problem Definition: <a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=3">Euler Problem 3</a></p>

<p>Obviously, these scripts did not actually implement the solution. The problem statement required to pick the largest factor, but I just realized I had not done it.</p>

<p><strong>Python Solution</strong></p>

<p>{% codeblock lang:python %}</p>

<p>#</p>

<h1>The prime factors of 13195 are 5, 7, 13 and 29.</h1>

<p>#</p>

<h1>What is the largest prime factor of the number 317584931803?</h1>

<p>#</p>

<p>import sys</p>

<p>primes = []</p>

<p>def isprime(N):
  #  Original version use xrange, but caused
  #
  #  &ldquo;OverflowException: long int too large to convert to int”
  #
  #  when taking in a large number
  #
  #  So, I have to use while loop to replace “for i in xrange(2, N):”
  #
  #  And in order to speed up the process, the prime calculation result
  #  is cached
  global primes</p>

<p>  # we have already tested it
  if N in primes:</p>

<pre><code>return True
</code></pre>

<p>  # use the prime results first
  for i in primes:</p>

<pre><code>if (N % i) == 0:
  return False
</code></pre>

<p>  # now computation is required
  maxprime = 2
  if len(primes) > 0:</p>

<pre><code>maxprime = primes[-1]
</code></pre>

<p>  i = maxprime + 1
  while i &lt; N:</p>

<pre><code>if (N % i) == 0:
  return False
i = i + 1
</code></pre>

<p>  primes.append(N)
  return True</p>

<p>def factorise(N):
  #
  #  To factorise a integer
  #</p>

<p>  # short cut
  global primes
  res = []</p>

<p>  if N in primes:</p>

<pre><code>res.append(N)
return res
</code></pre>

<p>  # original algorithm
  idx = 2
  while idx &lt;= N:</p>

<pre><code>if isprime(idx):
  div, mod = divmod(N, idx)
  if mod == 0:
    res.append(idx) 
    res.extend(factorise(div))
    break
idx = idx + 1
</code></pre>

<p>  return res</p>

<p>if <strong>name</strong> == ”<strong>main</strong>“:<br/>
  print factorise(int(sys.argv[1]))</p>

<p>{% endcodeblock %}</p>

<p><strong>Erlang Solution</strong></p>

<p>Here comes the erlang version. There is some performance issue with this version. hopefully I would have some free time soon to improve the algorithm.</p>

<p>{% codeblock lang:erlang %}</p>

<p>-module(p3).
-export([isprime/1, factorise/1]).</p>

<p>%%
%% prime means it is not divisible by any numbers other than 1 and itself.
%%
isprime(1) –>
 false;</p>

<p>isprime(2) –>
 true;</p>

<p>isprime(N) when N > 2 –>
 Pid = self(),
 C = lists:seq(2, N – 1),
 process_flag(trap_exit, true),
 lists:map(fun(Div) –></p>

<pre><code>           spawn_link(fun() –&gt;
               test_if_divisible(Pid, N, Div)
               end)
           end, C),
</code></pre>

<p> isprime_poll(length&copy;).</p>

<p>%%
%% Message loop: to listen and receive message from voters
%%
isprime_poll(0) –>
 true;
isprime_poll(NumVote) –>
 receive
   {nondivisible, } –></p>

<pre><code>   isprime_poll(NumVote – 1);
</code></pre>

<p>   {divisible, } –></p>

<pre><code>   clean_mailbox(),
   false
</code></pre>

<p> end.</p>

<p>%%
%% To clear away any messages in mailbox
%%
clean_mailbox() –>
 receive
   _ –></p>

<pre><code> clean_mailbox()
</code></pre>

<p>   after 0 –> ok
 end.</p>

<p>%%
%%
%%
test_if_divisible(Pid, N, Div) –>
 case N rem Div of
   0 –> Pid ! {divisible, Div};
   _ –> Pid ! {nondivisible, Div}
 end.</p>

<p>%%%
%%% To factorise an integer – wrappers
%%%
factorise(N) when is_list(N) –>
   N1 = string:to_integer(N),
   factorise(N1, 2, []);</p>

<p>factorise(N) –>
   factorise(N, 2, []).</p>

<p>%%%
%%% To factorise an integer
%%%
factorise(N, Factor, Result) when Factor &lt; N+1  –>
 case isprime(Factor) of
   true –></p>

<pre><code> if
   (N rem Factor) == 0 –&gt;
     %% io:format("Residual is 0 by Factor ~p~n”, [Factor]),
     factorise(N div Factor, 2, [Factor|Result]);
   true –&gt;
     factorise(N, Factor + 1, Result)
 end;
</code></pre>

<p>   false –></p>

<pre><code>   factorise(N, Factor + 1, Result)
</code></pre>

<p> end;</p>

<p>factorise(<em>, </em>, Result) –>
 R = lists:reverse(Result),
 %% io:format(“~p~n”, [R]),
 R.</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
