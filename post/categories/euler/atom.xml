<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: euler | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/euler/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2015-03-02T19:01:26+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Euler Identity is voted the most beautiful mathematic formula in 1988]]></title>
    <link href="http://www.ahwkong.com/post/2012/04/05/p-20566458585/"/>
    <updated>2012-04-05T18:30:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2012/04/05/p-20566458585</id>
    <content type="html"><![CDATA[<p>Euler Identity is voted the most beautiful mathematic formula in 1988</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Erlang Exercise 6]]></title>
    <link href="http://www.ahwkong.com/post/2008/02/02/3625411911597323714/"/>
    <updated>2008-02-02T17:56:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2008/02/02/3625411911597323714</id>
    <content type="html"><![CDATA[<p>Problem Definition: <a href="http://projecteuler.net/index.php?section=problems&amp;id=6">Euler Problem 6</a><br /><br />This problem is very straight-forward.<br /><br /><pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"><code><br />&ldquo;&rdquo;&ldquo;<br />The sum of the squares of the first ten natural numbers is,<br />1+ 2<sup>2</sup> + &hellip; + 10<sup>2</sup> = 385<br /><br />The square of the sum of the first ten natural numbers is,<br />(1 + 2 + &hellip; + 10)<sup>2</sup> = 55 = 3025<br /><br />Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 &ndash; 385 = 2640.<br /><br />Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.<br />&rdquo;&ldquo;&rdquo;<br /><br />if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:<br />  Max = 100<br />  SumOfSquare = sum([pow(X, 2) for X in xrange(1, Max + 1)])<br />  SquareOfSum = pow(sum([X for X in xrange(1, Max + 1)]), 2)<br />  print &ldquo;%d&rdquo; % (SquareOfSum &ndash; SumOfSquare)<br /><br /><br /></code></pre><br /><br />Here is the corresponding erlang version.<br /><br /><pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"><code><br />-module(p6).<br />-export([find_diff/1]).<br /><br />find_diff(Max)&ndash;><br />  SumOfSq = lists:foldl(fun (X, Y) &ndash;> X + Y end, 0, [X*X || X &lt;&ndash; lists:seq(1, Max)]),<br />  SqOfSum = math:pow(<br />              lists:foldl(fun (X, Y) &ndash;> X + Y end, 0, [X || X &lt;&ndash; lists:seq(1, Max)]),<br />              2),<br />  SqOfSum &ndash; SumOfSq.<br /><br /></code></pre><br /><br />Basically, both python and erlang offer very powerful list comprehension syntax.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Erlang Exercise 5]]></title>
    <link href="http://www.ahwkong.com/post/2008/02/01/2545374392026607944/"/>
    <updated>2008-02-01T23:17:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2008/02/01/2545374392026607944</id>
    <content type="html"><![CDATA[<p>Problem Definition: <a href="http://projecteuler.net/index.php?section=problems&amp;id=5">Euler Problem 5</a><br /><br />I am rather happy with this python version because I can basically get it done in about 15 min in total. Some useful primitives have been developed in module p3 (See my previous post, <a href="http://www.blogger.com/2008/01/little-erlange-exercise-3_29.html">little erlang exercise 3</a>)<br /><br /><pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"><code><br />&ldquo;&rdquo;&ldquo;<br />2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.<br /><br />What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?<br />&rdquo;&ldquo;&rdquo;<br /><br /><br />from p3 import isprime, factorise<br /><br />def product(x, y):<br /> return x * y<br /><br />if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:<br /> factors = dict()<br /> for l in [factorise(i) for i in xrange(2, 21)]:<br />     tmp = dict()<br />     # count them<br />     for n in l:<br />         tmp[n] = 1 + tmp.get(n, 0)<br />     # reguster the max frequency of factor<br />     for k, v in tmp.items():<br />         factors[k] = max(factors.get(k, 0), v)<br /><br /> print reduce(product, [pow(k, v) for k,v in factors.items()])<br /><br /></code></pre><br /><br />However, the erlang version took me a considerable time to complete. The problem is mainly to switch from a procedural mindset to a functional mindset.<br /><br /><br /><pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"><code><br /><br />-module(p5).<br />-import(p3).<br />-export([main/0, get_factor_freq_lst/1]).<br /><br />%% run this to print the result<br />main() &ndash;><br />  L = [ p3:factorise(X) || X &lt;&ndash; lists:seq(1, 20)],   <br />  io:format(&ldquo;~f~n&rdquo;, [product(get_factor_freq(L))]).   <br /><br />get_factor_freq(L) &ndash;><br />  Dict = dict:new(),<br />  get_factor_freq(L, Dict).<br /><br />%% spec: H, T are list of list of number<br />%% e.g. [ [N1, N1, N2&hellip;], [N1, N2&hellip;], &hellip;]<br />get_factor_freq([H|T], Dict) &ndash;><br />  Dist = get_factor_freq_lst(H),<br />  D1 = dict:from_list(Dist),<br />  D2 = dict:merge(fun(K, X, Y) &ndash;> update_if_bigger(K, X, Y) end, D1, Dict),<br />  get_factor_freq(T, D2);<br />get_factor_freq([], Dict) &ndash;><br />  dict:to_list(Dict).  %% has to convert to list<br /><br />%% Aux function<br />update_if_bigger(<em>, Initial, NewValue) when Initial &lt; NewValue &ndash;><br />  NewValue;<br />update_if_bigger(</em>, Initial, _) &ndash;><br />  Initial.<br /><br />%% This function assumes the list is sorted<br />%% This function is to delinate a list of number<br />%% into a list of {Key, Frequency}<br />get_factor_freq_lst([A|T]) when is_integer(A) &ndash;><br />  get_factor_freq_lst([{A, 1}|T]);<br />get_factor_freq_lst([{A, N}, A|T]) when is_integer(A) &ndash;><br />  get_factor_freq_lst([{A, N + 1}|T]);<br />get_factor_freq_lst([{A, N}, B|T]) when is_integer(A), is_integer(B), A /= B &ndash;><br />  get_factor_freq_lst([{B, 1}|T] ++ [{A, N}] );<br />get_factor_freq_lst(L) &ndash;><br />  L.<br /><br />%% find the product of a list of tuple {Base, Power)<br />product(L) &ndash;><br />  product(L, 1).<br />product([], Sum) &ndash;><br />  Sum;<br />product([{Base, Power}|T], Sum) &ndash;><br />  product(T, Sum * math:pow(Base, Power)).<br /><br /><br /></code></pre></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Erlang Exercise 4]]></title>
    <link href="http://www.ahwkong.com/post/2008/01/31/8422387224070078892/"/>
    <updated>2008-01-31T21:37:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2008/01/31/8422387224070078892</id>
    <content type="html"><![CDATA[<p>Problem Definition: <a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=4">Euler Problem 4</a></p>

<p>Through this exercise, I realised that I can reverse a string using a [::-1] operator. Really cryptic, but yet handy.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">A</span> <span class="n">palindromic</span> <span class="n">number</span> <span class="n">reads</span> <span class="n">the</span> <span class="n">same</span> <span class="n">both</span> <span class="n">ways</span><span class="o">.</span> <span class="n">The</span> <span class="n">largest</span> <span class="n">palindrome</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">made</span> <span class="kn">from</span> <span class="nn">the</span> <span class="nn">product</span> <span class="nn">of</span> <span class="nn">two</span> <span class="mi">2</span><span class="o">-</span><span class="n">digit</span> <span class="n">numbers</span> <span class="ow">is</span> <span class="mi">9009</span> <span class="o">=</span> <span class="mi">91</span> <span class="n">x</span> <span class="mf">99.</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Find</span> <span class="n">the</span> <span class="n">largest</span> <span class="n">palindrome</span> <span class="n">made</span> <span class="kn">from</span> <span class="nn">the</span> <span class="nn">product</span> <span class="nn">of</span> <span class="nn">two</span> <span class="mi">3</span><span class="o">-</span><span class="n">digit</span> <span class="n">numbers</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">isPalindromic</span><span class="p">(</span><span class="n">Num</span><span class="p">):</span>
</span><span class='line'>  <span class="c">#  For string reversal, pls check this url:</span>
</span><span class='line'>  <span class="c">#</span>
</span><span class='line'>  <span class="c">#    &lt;a href=&quot;http://www.python.org/doc/2.3.5/whatsnew/section-slices.html&quot;&gt;http://www.python.org/doc/2.3.5/whatsnew/section-slices.html&lt;/a&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">N</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">Num</span><span class="p">)</span>
</span><span class='line'>  <span class="n">l</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
</span><span class='line'>  <span class="n">div</span><span class="p">,</span> <span class="n">mod</span> <span class="o">=</span> <span class="nb">divmod</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">mod</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="c"># odd&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fh</span> <span class="o">=</span> <span class="n">N</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">l</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">sh</span> <span class="o">=</span> <span class="n">N</span><span class="p">[</span><span class="mi">1</span><span class="o">+</span><span class="n">l</span><span class="o">/</span><span class="mi">2</span><span class="p">:]</span>
</span><span class='line'><span class="c"># print “%s %s” % (fh, sh)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">else</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fh</span> <span class="o">=</span> <span class="n">N</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">l</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">sh</span> <span class="o">=</span> <span class="n">N</span><span class="p">[</span><span class="n">l</span><span class="o">/</span><span class="mi">2</span><span class="p">:]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">fh</span> <span class="o">==</span> <span class="n">sh</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;:</span>
</span><span class='line'>  <span class="n">g</span> <span class="o">=</span> <span class="p">[</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">999</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">999</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'>  <span class="k">print</span> <span class="nb">max</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">isPalindromic</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">g</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here comes an erlang version. In this rare occasion, erlang runs faster than python. It is probably because, first of all, the list comprehension I used in erlang produces a smaller list. Secondly the test of palindromic is more straightforward in the erlang version.</p>

<p>I will revisit the python version, later, when I get a bit more time.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">p4</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">findLargestProduct</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">isPalindromic</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">N</span> <span class="o">==</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">N</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">findLargestProduct</span><span class="p">()</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">List</span> <span class="o">=</span> <span class="p">[</span><span class="nv">X</span> <span class="o">*</span> <span class="nv">Y</span> <span class="p">||</span> <span class="nv">X</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">–</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">999</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>               <span class="nv">Y</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">–</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">999</span><span class="p">),</span>
</span><span class='line'>               <span class="n">isPalindromic</span><span class="p">(</span><span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">X</span> <span class="o">*</span> <span class="nv">Y</span><span class="p">))],</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nn">lists</span><span class="p">:</span><span class="nf">max</span><span class="p">(</span><span class="nv">List</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Erlang Exercise 3]]></title>
    <link href="http://www.ahwkong.com/post/2008/01/29/5132302946249986477/"/>
    <updated>2008-01-29T22:09:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2008/01/29/5132302946249986477</id>
    <content type="html"><![CDATA[<p>Problem Definition: <a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=3">Euler Problem 3</a></p>

<p>Obviously, these scripts did not actually implement the solution. The problem statement required to pick the largest factor, but I just realized I had not done it.</p>

<p><strong>Python Solution</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">prime</span> <span class="n">factors</span> <span class="n">of</span> <span class="mi">13195</span> <span class="n">are</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">13</span> <span class="ow">and</span> <span class="mf">29.</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">What</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">largest</span> <span class="n">prime</span> <span class="n">factor</span> <span class="n">of</span> <span class="n">the</span> <span class="n">number</span> <span class="mi">317584931803</span><span class="err">?</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">sys</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">primes</span> <span class="o">=</span> <span class="p">[]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">isprime</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>  <span class="c">#  Original version use xrange, but caused</span>
</span><span class='line'>  <span class="c">#</span>
</span><span class='line'>  <span class="c">#  &amp;ldquo;OverflowException: long int too large to convert to int”</span>
</span><span class='line'>  <span class="c">#</span>
</span><span class='line'>  <span class="c">#  when taking in a large number</span>
</span><span class='line'>  <span class="c">#</span>
</span><span class='line'>  <span class="c">#  So, I have to use while loop to replace “for i in xrange(2, N):”</span>
</span><span class='line'>  <span class="c">#</span>
</span><span class='line'>  <span class="c">#  And in order to speed up the process, the prime calculation result</span>
</span><span class='line'>  <span class="c">#  is cached</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">primes</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c"># we have already tested it</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">N</span> <span class="ow">in</span> <span class="n">primes</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="bp">True</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c"># use the prime results first</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">primes</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">N</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c"># now computation is required</span>
</span><span class='line'>  <span class="n">maxprime</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">primes</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">maxprime</span> <span class="o">=</span> <span class="n">primes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">i</span> <span class="o">=</span> <span class="n">maxprime</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">N</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">N</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">primes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">True</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">factorise</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>  <span class="c">#</span>
</span><span class='line'>  <span class="c">#  To factorise a integer</span>
</span><span class='line'>  <span class="c">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c"># short cut</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">primes</span>
</span><span class='line'>  <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="n">N</span> <span class="ow">in</span> <span class="n">primes</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c"># original algorithm</span>
</span><span class='line'>  <span class="n">idx</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">idx</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">N</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">isprime</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
</span><span class='line'>  <span class="n">div</span><span class="p">,</span> <span class="n">mod</span> <span class="o">=</span> <span class="nb">divmod</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">idx</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">mod</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
</span><span class='line'>    <span class="n">res</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">factorise</span><span class="p">(</span><span class="n">div</span><span class="p">))</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'><span class="n">idx</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">res</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="err">”</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">“</span><span class="p">:</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">factorise</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Erlang Solution</strong></p>

<p>Here comes the erlang version. There is some performance issue with this version. hopefully I would have some free time soon to improve the algorithm.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">p3</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">isprime</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">factorise</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%</span>
</span><span class='line'><span class="c">%% prime means it is not divisible by any numbers other than 1 and itself.</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="nf">isprime</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'> <span class="n">false</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">isprime</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'> <span class="n">true</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">isprime</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nv">N</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'> <span class="nv">Pid</span> <span class="o">=</span> <span class="n">self</span><span class="p">(),</span>
</span><span class='line'> <span class="nv">C</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nv">N</span> <span class="err">–</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'> <span class="nb">process_flag</span><span class="p">(</span><span class="n">trap_exit</span><span class="p">,</span> <span class="n">true</span><span class="p">),</span>
</span><span class='line'> <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">Div</span><span class="p">)</span> <span class="err">–</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>           <span class="nb">spawn_link</span><span class="p">(</span><span class="k">fun</span><span class="p">()</span> <span class="err">–&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>               <span class="n">test_if_divisible</span><span class="p">(</span><span class="nv">Pid</span><span class="p">,</span> <span class="nv">N</span><span class="p">,</span> <span class="nv">Div</span><span class="p">)</span>
</span><span class='line'>               <span class="k">end</span><span class="p">)</span>
</span><span class='line'>           <span class="k">end</span><span class="p">,</span> <span class="nv">C</span><span class="p">),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="n">isprime_poll</span><span class="p">(</span><span class="nb">length</span><span class="err">&amp;</span><span class="n">copy</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%</span>
</span><span class='line'><span class="c">%% Message loop: to listen and receive message from voters</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="nf">isprime_poll</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">isprime_poll</span><span class="p">(</span><span class="nv">NumVote</span><span class="p">)</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'> <span class="k">receive</span>
</span><span class='line'>   <span class="p">{</span><span class="n">nondivisible</span><span class="p">,</span> <span class="p">}</span> <span class="err">–</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="n">isprime_poll</span><span class="p">(</span><span class="nv">NumVote</span> <span class="err">–</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">divisible</span><span class="p">,</span> <span class="p">}</span> <span class="err">–</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="n">clean_mailbox</span><span class="p">(),</span>
</span><span class='line'>   <span class="n">false</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%</span>
</span><span class='line'><span class="c">%% To clear away any messages in mailbox</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="nf">clean_mailbox</span><span class="p">()</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'> <span class="k">receive</span>
</span><span class='line'>   <span class="p">_</span> <span class="err">–</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">clean_mailbox</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">after</span> <span class="mi">0</span> <span class="err">–</span><span class="o">&gt;</span> <span class="n">ok</span>
</span><span class='line'> <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="nf">test_if_divisible</span><span class="p">(</span><span class="nv">Pid</span><span class="p">,</span> <span class="nv">N</span><span class="p">,</span> <span class="nv">Div</span><span class="p">)</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'> <span class="k">case</span> <span class="nv">N</span> <span class="ow">rem</span> <span class="nv">Div</span> <span class="k">of</span>
</span><span class='line'>   <span class="mi">0</span> <span class="err">–</span><span class="o">&gt;</span> <span class="nv">Pid</span> <span class="o">!</span> <span class="p">{</span><span class="n">divisible</span><span class="p">,</span> <span class="nv">Div</span><span class="p">};</span>
</span><span class='line'>   <span class="p">_</span> <span class="err">–</span><span class="o">&gt;</span> <span class="nv">Pid</span> <span class="o">!</span> <span class="p">{</span><span class="n">nondivisible</span><span class="p">,</span> <span class="nv">Div</span><span class="p">}</span>
</span><span class='line'> <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%%</span>
</span><span class='line'><span class="c">%%% To factorise an integer – wrappers</span>
</span><span class='line'><span class="c">%%%</span>
</span><span class='line'><span class="nf">factorise</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="nv">N1</span> <span class="o">=</span> <span class="nn">string</span><span class="p">:</span><span class="nf">to_integer</span><span class="p">(</span><span class="nv">N</span><span class="p">),</span>
</span><span class='line'>   <span class="n">factorise</span><span class="p">(</span><span class="nv">N1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[]);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">factorise</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">factorise</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%%</span>
</span><span class='line'><span class="c">%%% To factorise an integer</span>
</span><span class='line'><span class="c">%%%</span>
</span><span class='line'><span class="nf">factorise</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">Factor</span><span class="p">,</span> <span class="nv">Result</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Factor</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nv">N</span><span class="o">+</span><span class="mi">1</span>  <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'> <span class="k">case</span> <span class="n">isprime</span><span class="p">(</span><span class="nv">Factor</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>   <span class="n">true</span> <span class="err">–</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">if</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">N</span> <span class="ow">rem</span> <span class="nv">Factor</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="err">–&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>     <span class="c">%% io:format(&quot;Residual is 0 by Factor ~p~n”, [Factor]),</span>
</span><span class='line'>     <span class="n">factorise</span><span class="p">(</span><span class="nv">N</span> <span class="ow">div</span> <span class="nv">Factor</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="nv">Factor</span><span class="p">|</span><span class="nv">Result</span><span class="p">]);</span>
</span><span class='line'>   <span class="n">true</span> <span class="err">–&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>     <span class="n">factorise</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">Factor</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Result</span><span class="p">)</span>
</span><span class='line'> <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">false</span> <span class="err">–</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="n">factorise</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">Factor</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Result</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="k">end</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">factorise</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="nv">Result</span><span class="p">)</span> <span class="err">–</span><span class="o">&gt;</span>
</span><span class='line'> <span class="nv">R</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">Result</span><span class="p">),</span>
</span><span class='line'> <span class="c">%% io:format(“~p~n”, [R]),</span>
</span><span class='line'> <span class="nv">R</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
