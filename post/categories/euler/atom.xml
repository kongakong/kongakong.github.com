<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: euler | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/euler/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2015-02-01T13:16:54+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Euler Identity is voted the most beautiful mathematic formula in 1988]]></title>
    <link href="http://www.ahwkong.com/post/2012/04/05/p-20566458585/"/>
    <updated>2012-04-05T18:30:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2012/04/05/p-20566458585</id>
    <content type="html"><![CDATA[<p>Euler Identity is voted the most beautiful mathematic formula in 1988</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Erlang Exercise 6]]></title>
    <link href="http://www.ahwkong.com/post/2008/02/02/3625411911597323714/"/>
    <updated>2008-02-02T17:56:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2008/02/02/3625411911597323714</id>
    <content type="html"><![CDATA[<p>Problem Definition: <a href="http://projecteuler.net/index.php?section=problems&amp;id=6">Euler Problem 6</a><br /><br />This problem is very straight-forward.<br /><br /><pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"><code><br />&ldquo;&rdquo;&ldquo;<br />The sum of the squares of the first ten natural numbers is,<br />1+ 2<sup>2</sup> + &hellip; + 10<sup>2</sup> = 385<br /><br />The square of the sum of the first ten natural numbers is,<br />(1 + 2 + &hellip; + 10)<sup>2</sup> = 55 = 3025<br /><br />Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 &ndash; 385 = 2640.<br /><br />Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.<br />&rdquo;&ldquo;&rdquo;<br /><br />if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:<br />  Max = 100<br />  SumOfSquare = sum([pow(X, 2) for X in xrange(1, Max + 1)])<br />  SquareOfSum = pow(sum([X for X in xrange(1, Max + 1)]), 2)<br />  print &ldquo;%d&rdquo; % (SquareOfSum &ndash; SumOfSquare)<br /><br /><br /></code></pre><br /><br />Here is the corresponding erlang version.<br /><br /><pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"><code><br />-module(p6).<br />-export([find_diff/1]).<br /><br />find_diff(Max)&ndash;><br />  SumOfSq = lists:foldl(fun (X, Y) &ndash;> X + Y end, 0, [X*X || X &lt;&ndash; lists:seq(1, Max)]),<br />  SqOfSum = math:pow(<br />              lists:foldl(fun (X, Y) &ndash;> X + Y end, 0, [X || X &lt;&ndash; lists:seq(1, Max)]),<br />              2),<br />  SqOfSum &ndash; SumOfSq.<br /><br /></code></pre><br /><br />Basically, both python and erlang offer very powerful list comprehension syntax.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Erlang Exercise 5]]></title>
    <link href="http://www.ahwkong.com/post/2008/02/01/2545374392026607944/"/>
    <updated>2008-02-01T23:17:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2008/02/01/2545374392026607944</id>
    <content type="html"><![CDATA[<p>Problem Definition: <a href="http://projecteuler.net/index.php?section=problems&amp;id=5">Euler Problem 5</a><br /><br />I am rather happy with this python version because I can basically get it done in about 15 min in total. Some useful primitives have been developed in module p3 (See my previous post, <a href="http://www.blogger.com/2008/01/little-erlange-exercise-3_29.html">little erlang exercise 3</a>)<br /><br /><pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"><code><br />&ldquo;&rdquo;&ldquo;<br />2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.<br /><br />What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?<br />&rdquo;&ldquo;&rdquo;<br /><br /><br />from p3 import isprime, factorise<br /><br />def product(x, y):<br /> return x * y<br /><br />if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:<br /> factors = dict()<br /> for l in [factorise(i) for i in xrange(2, 21)]:<br />     tmp = dict()<br />     # count them<br />     for n in l:<br />         tmp[n] = 1 + tmp.get(n, 0)<br />     # reguster the max frequency of factor<br />     for k, v in tmp.items():<br />         factors[k] = max(factors.get(k, 0), v)<br /><br /> print reduce(product, [pow(k, v) for k,v in factors.items()])<br /><br /></code></pre><br /><br />However, the erlang version took me a considerable time to complete. The problem is mainly to switch from a procedural mindset to a functional mindset.<br /><br /><br /><pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"><code><br /><br />-module(p5).<br />-import(p3).<br />-export([main/0, get_factor_freq_lst/1]).<br /><br />%% run this to print the result<br />main() &ndash;><br />  L = [ p3:factorise(X) || X &lt;&ndash; lists:seq(1, 20)],   <br />  io:format(&ldquo;~f~n&rdquo;, [product(get_factor_freq(L))]).   <br /><br />get_factor_freq(L) &ndash;><br />  Dict = dict:new(),<br />  get_factor_freq(L, Dict).<br /><br />%% spec: H, T are list of list of number<br />%% e.g. [ [N1, N1, N2&hellip;], [N1, N2&hellip;], &hellip;]<br />get_factor_freq([H|T], Dict) &ndash;><br />  Dist = get_factor_freq_lst(H),<br />  D1 = dict:from_list(Dist),<br />  D2 = dict:merge(fun(K, X, Y) &ndash;> update_if_bigger(K, X, Y) end, D1, Dict),<br />  get_factor_freq(T, D2);<br />get_factor_freq([], Dict) &ndash;><br />  dict:to_list(Dict).  %% has to convert to list<br /><br />%% Aux function<br />update_if_bigger(<em>, Initial, NewValue) when Initial &lt; NewValue &ndash;><br />  NewValue;<br />update_if_bigger(</em>, Initial, _) &ndash;><br />  Initial.<br /><br />%% This function assumes the list is sorted<br />%% This function is to delinate a list of number<br />%% into a list of {Key, Frequency}<br />get_factor_freq_lst([A|T]) when is_integer(A) &ndash;><br />  get_factor_freq_lst([{A, 1}|T]);<br />get_factor_freq_lst([{A, N}, A|T]) when is_integer(A) &ndash;><br />  get_factor_freq_lst([{A, N + 1}|T]);<br />get_factor_freq_lst([{A, N}, B|T]) when is_integer(A), is_integer(B), A /= B &ndash;><br />  get_factor_freq_lst([{B, 1}|T] ++ [{A, N}] );<br />get_factor_freq_lst(L) &ndash;><br />  L.<br /><br />%% find the product of a list of tuple {Base, Power)<br />product(L) &ndash;><br />  product(L, 1).<br />product([], Sum) &ndash;><br />  Sum;<br />product([{Base, Power}|T], Sum) &ndash;><br />  product(T, Sum * math:pow(Base, Power)).<br /><br /><br /></code></pre></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Erlang Exercise 4]]></title>
    <link href="http://www.ahwkong.com/post/2008/01/31/8422387224070078892/"/>
    <updated>2008-01-31T21:37:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2008/01/31/8422387224070078892</id>
    <content type="html"><![CDATA[<p>Problem Definition: <a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=4">Euler Problem 4</a></p>

<p>Through this exercise, I realised that I can reverse a string using a [::-1] operator. Really cryptic, but yet handy.</p>

<p>{% codeblock lang:python  %}</p>

<h1>A palindromic number reads the same both ways. The largest palindrome</h1>

<h1>made from the product of two 2-digit numbers is 9009 = 91 x 99.</h1>

<h1></h1>

<h1>Find the largest palindrome made from the product of two 3-digit numbers.</h1>

<p>def isPalindromic(Num):
  #  For string reversal, pls check this url:
  #
  #    <a href="http://www.python.org/doc/2.3.5/whatsnew/section-slices.html">http://www.python.org/doc/2.3.5/whatsnew/section-slices.html</a></p>

<p>  N = str(Num)
  l = len(N)
  div, mod = divmod(l, 2)
  if mod == 1: # odd</p>

<pre><code>fh = N[0:l/2]
sh = N[1+l/2:]
# print “%s %s” % (fh, sh)
</code></pre>

<p>  else:</p>

<pre><code>fh = N[0:l/2]
sh = N[l/2:]
</code></pre>

<p>  return fh == sh[::-1]</p>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:
  g = [ x * y for x in xrange(100, 999) for y in xrange(100, 999) ]
  print max(filter(lambda x: isPalindromic(x), g))</p>

<p>{% endcodeblock %}</p>

<p>Here comes an erlang version. In this rare occasion, erlang runs faster than python. It is probably because, first of all, the list comprehension I used in erlang produces a smaller list. Secondly the test of palindromic is more straightforward in the erlang version.</p>

<p>I will revisit the python version, later, when I get a bit more time.</p>

<p>{% codeblock lang:erlang %}</p>

<p>-module(p4).
-export([findLargestProduct/0]).</p>

<p>isPalindromic(N) when is_list(N) –>
  N == lists:reverse(N).</p>

<p>findLargestProduct() –>
  List = [X * Y || X &lt;– lists:seq(100, 999),</p>

<pre><code>               Y &lt;– lists:seq(100, 999),
               isPalindromic(integer_to_list(X * Y))],
</code></pre>

<p>  lists:max(List).</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Erlang Exercise 3]]></title>
    <link href="http://www.ahwkong.com/post/2008/01/29/5132302946249986477/"/>
    <updated>2008-01-29T22:09:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2008/01/29/5132302946249986477</id>
    <content type="html"><![CDATA[<p>Problem Definition: <a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=3">Euler Problem 3</a></p>

<p>Obviously, these scripts did not actually implement the solution. The problem statement required to pick the largest factor, but I just realized I had not done it.</p>

<p><strong>Python Solution</strong></p>

<p>{% codeblock lang:python %}</p>

<p>#</p>

<h1>The prime factors of 13195 are 5, 7, 13 and 29.</h1>

<p>#</p>

<h1>What is the largest prime factor of the number 317584931803?</h1>

<p>#</p>

<p>import sys</p>

<p>primes = []</p>

<p>def isprime(N):
  #  Original version use xrange, but caused
  #
  #  &ldquo;OverflowException: long int too large to convert to int”
  #
  #  when taking in a large number
  #
  #  So, I have to use while loop to replace “for i in xrange(2, N):”
  #
  #  And in order to speed up the process, the prime calculation result
  #  is cached
  global primes</p>

<p>  # we have already tested it
  if N in primes:</p>

<pre><code>return True
</code></pre>

<p>  # use the prime results first
  for i in primes:</p>

<pre><code>if (N % i) == 0:
  return False
</code></pre>

<p>  # now computation is required
  maxprime = 2
  if len(primes) > 0:</p>

<pre><code>maxprime = primes[-1]
</code></pre>

<p>  i = maxprime + 1
  while i &lt; N:</p>

<pre><code>if (N % i) == 0:
  return False
i = i + 1
</code></pre>

<p>  primes.append(N)
  return True</p>

<p>def factorise(N):
  #
  #  To factorise a integer
  #</p>

<p>  # short cut
  global primes
  res = []</p>

<p>  if N in primes:</p>

<pre><code>res.append(N)
return res
</code></pre>

<p>  # original algorithm
  idx = 2
  while idx &lt;= N:</p>

<pre><code>if isprime(idx):
  div, mod = divmod(N, idx)
  if mod == 0:
    res.append(idx) 
    res.extend(factorise(div))
    break
idx = idx + 1
</code></pre>

<p>  return res</p>

<p>if <strong>name</strong> == ”<strong>main</strong>“:<br/>
  print factorise(int(sys.argv[1]))</p>

<p>{% endcodeblock %}</p>

<p><strong>Erlang Solution</strong></p>

<p>Here comes the erlang version. There is some performance issue with this version. hopefully I would have some free time soon to improve the algorithm.</p>

<p>{% codeblock lang:erlang %}</p>

<p>-module(p3).
-export([isprime/1, factorise/1]).</p>

<p>%%
%% prime means it is not divisible by any numbers other than 1 and itself.
%%
isprime(1) –>
 false;</p>

<p>isprime(2) –>
 true;</p>

<p>isprime(N) when N > 2 –>
 Pid = self(),
 C = lists:seq(2, N – 1),
 process_flag(trap_exit, true),
 lists:map(fun(Div) –></p>

<pre><code>           spawn_link(fun() –&gt;
               test_if_divisible(Pid, N, Div)
               end)
           end, C),
</code></pre>

<p> isprime_poll(length&copy;).</p>

<p>%%
%% Message loop: to listen and receive message from voters
%%
isprime_poll(0) –>
 true;
isprime_poll(NumVote) –>
 receive
   {nondivisible, } –></p>

<pre><code>   isprime_poll(NumVote – 1);
</code></pre>

<p>   {divisible, } –></p>

<pre><code>   clean_mailbox(),
   false
</code></pre>

<p> end.</p>

<p>%%
%% To clear away any messages in mailbox
%%
clean_mailbox() –>
 receive
   _ –></p>

<pre><code> clean_mailbox()
</code></pre>

<p>   after 0 –> ok
 end.</p>

<p>%%
%%
%%
test_if_divisible(Pid, N, Div) –>
 case N rem Div of
   0 –> Pid ! {divisible, Div};
   _ –> Pid ! {nondivisible, Div}
 end.</p>

<p>%%%
%%% To factorise an integer – wrappers
%%%
factorise(N) when is_list(N) –>
   N1 = string:to_integer(N),
   factorise(N1, 2, []);</p>

<p>factorise(N) –>
   factorise(N, 2, []).</p>

<p>%%%
%%% To factorise an integer
%%%
factorise(N, Factor, Result) when Factor &lt; N+1  –>
 case isprime(Factor) of
   true –></p>

<pre><code> if
   (N rem Factor) == 0 –&gt;
     %% io:format("Residual is 0 by Factor ~p~n”, [Factor]),
     factorise(N div Factor, 2, [Factor|Result]);
   true –&gt;
     factorise(N, Factor + 1, Result)
 end;
</code></pre>

<p>   false –></p>

<pre><code>   factorise(N, Factor + 1, Result)
</code></pre>

<p> end;</p>

<p>factorise(<em>, </em>, Result) –>
 R = lists:reverse(Result),
 %% io:format(“~p~n”, [R]),
 R.</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
