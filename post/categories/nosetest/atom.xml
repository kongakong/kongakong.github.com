<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nosetest | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/nosetest/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2014-08-29T10:58:06+10:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Importance of Being Nosy (Nosetests, Really)]]></title>
    <link href="http://www.ahwkong.com/post/2008/05/10/4108877290533417868/"/>
    <updated>2008-05-10T04:04:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2008/05/10/4108877290533417868</id>
    <content type="html"><![CDATA[<p><span style="font-weight: bold;">Unit testing </span><br /><br />One of a few important lessons I learn from Java development is the importance of unit test. It is of course not a silver bullet to the software reliability/quality problem, but the consequence not adopting it can only be more dire.<br /><br />I used only <a href="http://www.junit.org/">JUnit </a>to implement unit tests in Java (Since JUnit is &ldquo;good enough&rdquo;, I never explore the alternative framework <a href="http://testng.org/doc/index.html">TestNG</a>.). Actually, problems in writing unit tests usually have very little to do with the frameworks themselves, but more with:<br /><br /><span style="font-weight: bold;">A</span>. The legacy code base you want to test against. For example, if the existing code base design is not modular enough, you have to go through some refactoring process to make unit testing possible. It is not the kind of luxury we can afford very often.<br /><br /><span style="font-weight: bold;">B.</span> Mock objects. <a href="http://www.easymock.org/">EasyMock</a> has made mocking a dependency easier, but maintaining the mock object codes still requires considerable effort.<br /><br /><span style="font-weight: bold;">Unit testing and Python</span><br /><br />I think unit testing is even more important for Python programmers.<br /><br />Since everything happens in runtime for Python, errors in your scripts, no matter syntactical or logical, will not be caught until you actually execute the line of code where the bug lives.</p>

<br/><br/>


<p>On top of it, a majority of commercial/in-house software contains so many features. The sheer number of possible combination of the execution pathways means thorough manual testing is simply unattainable, if not unrealistic.<br /><br />If at the end of the day, a production issue in your python software arises and it turns out to be &ldquo;incorrect indentation&rdquo;, the managers and users will look down on you pretty hard (&ldquo;Did you really test it?&rdquo;). Unit test + coverage tools can help us to avoid these kind of situation.<br /><br />Besides, unit tests can be used to safeguard corner cases and exceptional conditions. For financial applications, one of those commonly-seen mistakes is that a program fails to perform properly when a certain event (e.g. rollover) happens on a public holiday. With unit testing, we can subject the relevant codes to different combination of date and instruments, so we can make sure it will, for instance, calculate accrual correctly no matter what.<br /><br />Comparing Java, I find it easier to do unit testing in Python because, with Python&rsquo;s &ldquo;Duck Typing&rdquo; capability, we do not have to worry about maintaining mock objects at all. Whenever you need to mimic a dependency&rsquo;s behavior, just write a dummy class with just enough attributes/methods the testee expects. End of story.<br /><br />No more record and play APIs, as in EasyMock.<br /><br /><span style="font-weight: bold;">Nosetests makes it easy </span><br /><br />
So, you can understand why I am so glad to find <a href="http://www.somethingaboutorange.com/mrl/projects/nose/">nose</a>. Nosetests is, in a nutshell, a unit test discovery tool. It can traverse down a python source code directory and pick up classes that extends <a href="http://docs.python.org/lib/testcase-objects.html">unittest.Testcase</a>, <a href="http://docs.python.org/lib/module-doctest.html">doc test</a>, and any classes/methods that follow the <a href="http://www.somethingaboutorange.com/mrl/projects/nose/#writing-tests">default naming convention</a>. I can now mix any testing styles depending on the task at hand.<br /><br />I usually use the following parameters with nosetests:<br /><br /><pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"><code><br />&mdash;verbosity=3 &mdash;with-doctest -s &mdash;exe<br /><br /></code></pre><br />&ldquo;&mdash;exe&rdquo; is necessary because in <a href="http://www.cygwin.com/">cygwin</a>, my primary development environment, py files are usually set to be &ldquo;executable&rdquo;.<br /><br /><span style="font-weight: bold;">Feedback</span><br /><br />Do you have any tips and idea on unit testing/software quality assurance to share? Feel free.<br /><br /></p>
]]></content>
  </entry>
  
</feed>
