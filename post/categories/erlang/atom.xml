<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: erlang | Timeline]]></title>
  <link href="http://kongakong.github.io/post/categories/erlang/atom.xml" rel="self"/>
  <link href="http://kongakong.github.io/"/>
  <updated>2013-11-23T23:00:12+11:00</updated>
  <id>http://kongakong.github.io/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[riak allow-multi]]></title>
    <link href="http://kongakong.github.io/post/2013/08/15/riak-allow-multi/"/>
    <updated>2013-08-15T01:04:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/15/riak-allow-multi</id>
    <content type="html"><![CDATA[<p>I could not create a write conflict situation.</p>

<p>It turns out it is because I did not set the <strong>allow_multi</strong> property</p>

<p>Here is the command line:</p>

<pre><code>curl -i -XPUT http://riak001:8098/riak/cart -H "Content-Type:application/json" -d '{"props":{"allow_mult":1} }'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress's Liquid Exception]]></title>
    <link href="http://kongakong.github.io/post/2013/08/13/octopresss-liquid-exception/"/>
    <updated>2013-08-13T18:47:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/13/octopresss-liquid-exception</id>
    <content type="html"><![CDATA[<p>When I tried to publish a blog post which contains some erlang code, I got this error message</p>

<pre><code>Liquid Exception: undefined method `[]' for nil:NilClass in 2013-08-04-mypost.markdown
</code></pre>

<p>It is because in erlang &lsquo;%&rsquo; is the comment character. I used &lsquo;%%&rsquo; to start a comment and it confuses Jekyll. Switching back to a single &lsquo;%&rsquo; fixes the problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make riak listen to IP other than localhost]]></title>
    <link href="http://kongakong.github.io/post/2013/08/09/how-to-make-riak-listen-to-addresses-other-than-localhost/"/>
    <updated>2013-08-09T18:53:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/09/how-to-make-riak-listen-to-addresses-other-than-localhost</id>
    <content type="html"><![CDATA[<p>By default a riak node will only listen to 127.0.0.1.</p>

<p>Replace 127.0.0.1 with the host IP in app.config will solve this issue</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Swap Calculation]]></title>
    <link href="http://kongakong.github.io/post/2013/08/04/simple-swap-calculation/"/>
    <updated>2013-08-04T17:34:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/04/simple-swap-calculation</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Today is 1st of January. The residual maturity of a swap is 9 months. The notional
 principal is $1,000. You receive 3% fixed semiannual payments and pay semiannual
 cash flows based on the 6-month Libor rate on March 31st and September 30th.
 Next payment is based on Libor at 5%. The current term structure is
 R(0, 0.25) = 4% and R(0, 0.75) = 5%.</p>

<p>Find the value of the fixed leg, floating leg and the swap.</p>

<p>{% codeblock lang:erlang %}</p>

<p>-module(swap).</p>

<p>-export([example1/0]).</p>

<p>example1() &ndash;></p>

<pre><code>Fixed = example1_fixedleg(),
Floating = example1_floatingleg(),
{Fixed, Floating, Fixed-Floating}.
</code></pre>

<p>example1_fixedleg() &ndash;></p>

<pre><code>30 / math:pow(1+0.04, 1/4) + 1030/math:pow(1+0.05, 3/4).
</code></pre>

<p>example1_floatingleg() &ndash;></p>

<pre><code>% 25 - next floating cash-flow payment 
% 1000 - the notional as if it is a zero-coupon bond
25 / math:pow(1+0.05, 1/4) + 1000/math:pow(1+0.05, 1/4).
</code></pre>

<p>{% endcodeblock %}</p>

<p><strong>Answer</strong>: {1022.6981406074298,1012.5734611086509,10.124679498778846}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Type of Database Models]]></title>
    <link href="http://kongakong.github.io/post/2013/07/29/different-type-of-database/"/>
    <updated>2013-07-29T08:08:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/29/different-type-of-database</id>
    <content type="html"><![CDATA[<p>I find this summary in <a href="http://littleriakbook.com/">Eric Redmond&rsquo;s &lsquo;A Little Riak&rsquo;</a> book  very concise and useful.</p>

<ol>
<li><p><strong>Relational</strong> Traditional databases usually use SQL to model and query data. They are useful for data which can be stored in a highly structured schema, yet require lexible querying. Scaling a relational database (RDBMS) traditionally occurs by more powerful hardware (vertical growth).</p>

<p>Examples: PostgreSQL, MySQL, Oracle</p></li>
<li><p><strong>Graph</strong> These exist for dataighly interconnected data. They excel in modeling complex relationships between nodes, and many implementations can handle multiple billions of nodes and relationships (or edges and vertices). I tend to include triplestores and object DBs as specialized variants.</p>

<p> Examples: Neo4j, Graphbase, IniniteGraph</p></li>
<li><p><strong>Document</strong> Document datastores model hierarchical values called documents, represented in formats such as JSON or XML, and do not enforce a document schema. They generally support distributing across multiple servers (horizontal growth).</p>

<p> Examples: CouchDB, MongoDB, Couchbase</p></li>
<li><p><strong>Columnar</strong> Popularized by Google’s BigTable, this form of database exists to scale across mul- tiple servers, and groups similar data into column families. Column values can be individually versioned and managed, though families are deined in advance, not unlike RDBMS schemas.</p>

<p> Examples: HBase, Cassandra, BigTable 4</p></li>
<li><p><strong>Key/Value</strong> Key/Value, or KV stores, are conceptually like hashtables, where values are stored and accessed by an immutable key. They range from single-server varieties like Memcached used for high-speed caching, to multi-datacenter distributed systems like Riak Enterprise.</p>

<p> Examples: Riak, Redis, Voldemort</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
