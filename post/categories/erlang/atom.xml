<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: erlang | Timeline]]></title>
  <link href="http://kongakong.github.io/post/categories/erlang/atom.xml" rel="self"/>
  <link href="http://kongakong.github.io/"/>
  <updated>2013-08-04T13:29:52+10:00</updated>
  <id>http://kongakong.github.io/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Different Type of Database Models]]></title>
    <link href="http://kongakong.github.io/post/2013/07/29/different-type-of-database/"/>
    <updated>2013-07-29T08:08:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/29/different-type-of-database</id>
    <content type="html"><![CDATA[<p>I find this summary in <a href="http://littleriakbook.com/">Eric Redmond&rsquo;s &lsquo;A Little Riak&rsquo;</a> book  very concise and useful.</p>

<ol>
<li><p><strong>Relational</strong> Traditional databases usually use SQL to model and query data. They are useful for data which can be stored in a highly structured schema, yet require lexible querying. Scaling a relational database (RDBMS) traditionally occurs by more powerful hardware (vertical growth).</p>

<p>Examples: PostgreSQL, MySQL, Oracle</p></li>
<li><p><strong>Graph</strong> These exist for dataighly interconnected data. They excel in modeling complex relationships between nodes, and many implementations can handle multiple billions of nodes and relationships (or edges and vertices). I tend to include triplestores and object DBs as specialized variants.</p>

<p> Examples: Neo4j, Graphbase, IniniteGraph</p></li>
<li><p><strong>Document</strong> Document datastores model hierarchical values called documents, represented in formats such as JSON or XML, and do not enforce a document schema. They generally support distributing across multiple servers (horizontal growth).</p>

<p> Examples: CouchDB, MongoDB, Couchbase</p></li>
<li><p><strong>Columnar</strong> Popularized by Google’s BigTable, this form of database exists to scale across mul- tiple servers, and groups similar data into column families. Column values can be individually versioned and managed, though families are deined in advance, not unlike RDBMS schemas.</p>

<p> Examples: HBase, Cassandra, BigTable 4</p></li>
<li><p><strong>Key/Value</strong> Key/Value, or KV stores, are conceptually like hashtables, where values are stored and accessed by an immutable key. They range from single-server varieties like Memcached used for high-speed caching, to multi-datacenter distributed systems like Riak Enterprise.</p>

<p> Examples: Riak, Redis, Voldemort</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrency and Parallelism]]></title>
    <link href="http://kongakong.github.io/post/2013/07/26/concurrency-and-parallelism/"/>
    <updated>2013-07-26T21:41:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/26/concurrency-and-parallelism</id>
    <content type="html"><![CDATA[<blockquote><p>One of the misconceptions about concurrency is people often confuse concurrency and parallelism. Concurrency is a programming model that lets you express things that are independent, as independent executions and parallelism is about running two things at the same time. They are not the same idea and a lot of people confuse them, they think they are the same thing, but concurrency and parallelism are best thought of as a different idea. You can write beautiful concurrent programs with no parallelism whatsoever and you can also write extremely parallel programs that are not remotely concurrent. Concurrency is a model, parallelism is a result &ndash; maybe that&rsquo;s the best way to say it.</p></blockquote>

<p>- Rob Pike</p>

<p>Source: <a href="http://www.infoq.com/interviews/pike-concurrency">Infoq</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MFA]]></title>
    <link href="http://kongakong.github.io/post/2013/07/17/mfa/"/>
    <updated>2013-07-17T08:31:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/17/mfa</id>
    <content type="html"><![CDATA[<p>You can simply refer a Module/Function/Argument tuple as <strong>MFA</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[global:send_message]]></title>
    <link href="http://kongakong.github.io/post/2013/07/17/global-send-message/"/>
    <updated>2013-07-17T08:31:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/17/global-send-message</id>
    <content type="html"><![CDATA[<p><code>!</code> (&lsquo;bang&rsquo;) should not be used to call a globally registered name. Instead, you should use <code>global:send</code></p>

<p>A bit disappointed when I first learn about this: didn&rsquo;t I come to erlang for the bang operator? Now you take it away from me, <code>global</code> module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pong and pang in erlang]]></title>
    <link href="http://kongakong.github.io/post/2013/07/16/erlang-and-pang/"/>
    <updated>2013-07-16T08:00:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/16/erlang-and-pang</id>
    <content type="html"><![CDATA[<p>I know it is quite clever to use &lsquo;pang&rsquo; to indciate the process does not exist. However both responses (&lsquo;pong&rsquo; and &lsquo;pang&rsquo;) just look too similar to each other if the terminal app uses a certain kind of font. Don&rsquo;t think i would enjoy it under stress in an operation/support situation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nn">net_adm</span><span class="p">:</span><span class="nf">ping</span><span class="p">(</span><span class="n">exist</span><span class="p">@</span><span class="n">server</span><span class="p">).</span>
</span><span class='line'><span class="n">pong</span>
</span><span class='line'><span class="nn">net_adm</span><span class="p">:</span><span class="nf">ping</span><span class="p">(</span><span class="n">notexist</span><span class="p">@</span><span class="n">server</span><span class="p">).</span>
</span><span class='line'><span class="n">pang</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>
]]></content>
  </entry>
  
</feed>
