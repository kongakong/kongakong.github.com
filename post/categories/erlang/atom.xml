<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: erlang | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/erlang/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2014-08-26T17:53:09+10:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[9x9 suduko solver]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/24/9x9-suduko-solver/"/>
    <updated>2014-03-24T07:15:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/24/9x9-suduko-solver</id>
    <content type="html"><![CDATA[<p>Based on the <a href="post/2014/03/16/2x2-suduko-solver">previous version</a></p>

<p>It takes advantage of the parameter pattern matching of erlang, but not much else. There is a lot of room for improvement.</p>

<p>{% include_code sudoku9x9 lang:erlang linenos:true erlang/sudoku9x9.erl  %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4x4 suduko solver in erlang]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/16/2x2-suduko-solver/"/>
    <updated>2014-03-16T17:05:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/16/2x2-suduko-solver</id>
    <content type="html"><![CDATA[<p>Very crappy code written in a couple of hours.</p>

<p>It implements backtracking in a procedural way.</p>

<p>{% include_code sudoku2x2 lang:erlang linenos:true erlang/sudoku4x4.erl  %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sometimes it is not obvious at the beginning]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/15/sometimes-it-is-not-obvious-at-the-beginning/"/>
    <updated>2014-03-15T15:49:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/15/sometimes-it-is-not-obvious-at-the-beginning</id>
    <content type="html"><![CDATA[<p>I want to create a function for use as a predicate in the function <code>lists:any</code>. I try it first in erlang shell,</p>

<pre><code>137&gt; F = fun(X) -&gt; X == 1 end.
#Fun&lt;erl_eval.6.80484245&gt;
</code></pre>

<p>It works as expected:</p>

<pre><code>138&gt; lists:any(F, [2, 3]).
false
139&gt; lists:any(F, [2, 1, 3]).
true
</code></pre>

<p>Then I want to change the condition to something else, and I got an error message:</p>

<pre><code>140&gt; F = fun(X) -&gt; X /= 1 end.
** exception error: no match of right hand side value #Fun&lt;erl_eval.6.80484245&gt;
</code></pre>

<p>My first thought: It is interesting&hellip; Did I mix up the &lsquo;not equal&rsquo; operator in erlang? Maybe it is not &lsquo;/=&rsquo;?</p>

<p>It turns out it is because the code at 140 is effectively an attempt to rebound the <code>F</code> variable. The error message is actually about this rather than the operator. I do not usually test code in the erlang shell, so it took me a while to figure it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpaceX and redundancy]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/06/spacex-and-redundancy/"/>
    <updated>2014-03-06T07:51:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/06/spacex-and-redundancy</id>
    <content type="html"><![CDATA[<p><strong>Q:</strong> So, these flight computers on Dragon – there are three on board, and that&rsquo;s for redundancy?</p>

<p><strong>A:</strong> There are actually six computers. They operate in pairs, so there are three computer units, each of which have two computers checking on each other. The reason we have three is when operating in proximity of ISS, we have to always have two computer strings voting on something on critical actions. We have three so we can tolerate a failure and still have two voting on each other. And that has nothing to do with radiation, that has to do with ensuring that we&rsquo;re safe when we&rsquo;re flying our vehicle in the proximity of the space station.</p>

<p>I went into the lab earlier today, and we have 18 different processing units with computers in them. We have three main computers, but 18 units that have a computer of some kind, and all of them are triple computers – everything is three processors. So we have like 54 processors on the spacecraft. It&rsquo;s a highly distributed design and very fault-tolerant and very robust.</p>

<p><a href="http://www.aviationweek.com/Blogs.aspx?plckBlogId=Blog:04ce340e-4b63-4d23-9695-d49ab661f385&amp;plckPostId=Blog:04ce340e-4b63-4d23-9695-d49ab661f385Post:a8b87703-93f9-4cdf-885f-9429605e14df">Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[compile debug_info]]></title>
    <link href="http://www.ahwkong.com/post/2014/01/18/compile-debug-info/"/>
    <updated>2014-01-18T13:04:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/01/18/compile-debug-info</id>
    <content type="html"><![CDATA[<p>After coming this SO question about (debug_info)[<a href="http://stackoverflow.com/questions/6830271/requesting-debug-info-in-an-erlang-module-using-compile">http://stackoverflow.com/questions/6830271/requesting-debug-info-in-an-erlang-module-using-compile</a>], I am curious if it is indeed a problem.</p>

<p>Based on the (documentation)[<a href="http://www.erlang.org/doc/man/compile.html#debug_info">http://www.erlang.org/doc/man/compile.html#debug_info</a>], this should enable the addition of debug info to the .beam files.</p>

<p>{% codeblock lang:erlang %}
-module(testdebuginfo).
-compile(debug_info).
{% endcodeblock %}</p>

<p>However neither using <code>c</code> in erlang shell or using <code>erlc</code> directly will put the debug info into beam file.</p>

<p>I can only implant debug info through erlang shell like this:</p>

<p>{% codeblock %}
4> debugger:start().</p>

<p>=ERROR REPORT==== 23-Jan-2014::12:23:39 ===
ERROR: Could not find &lsquo;wxe_driver.so&rsquo; in: /usr/local/Cellar/erlang/R16B03/lib/erlang/lib/wx-1.1.1/priv
{ok,&lt;0.49.0>}
5> c(testdebuginfo, [debug_info]).
{ok,testdebuginfo}</p>

<p>{% endcodeblock  %}</p>
]]></content>
  </entry>
  
</feed>
