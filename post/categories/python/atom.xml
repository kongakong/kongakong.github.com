<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Timeline]]></title>
  <link href="http://kongakong.github.io/post/categories/python/atom.xml" rel="self"/>
  <link href="http://kongakong.github.io/"/>
  <updated>2013-11-23T23:00:12+11:00</updated>
  <id>http://kongakong.github.io/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Whenever you think you need urllib2, you actually need requests]]></title>
    <link href="http://kongakong.github.io/post/2013/05/14/p-50367270258/"/>
    <updated>2013-05-14T07:21:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/05/14/p-50367270258</id>
    <content type="html"><![CDATA[<p>So, today, when I want to write up a simple test to post data to a web server, I imported lib urllib2 right away.</p>

<p>It usually works great… until you need something more than basic.</p>

<p>Apparently I need to set some cookie and set to the server. Let’s import cookiejar and cookie…</p>

<p>Why it throws an exception <em>AttributeError: ‘SimpleCookie’ object has no attribute +’rfc2965’</em>?</p>

<p>OK, let&rsquo;s import DefaultCookiePolicy. Then I got hit by a <em>missing domain attribute</em> exception. &ldquo;Do I need to use a lower level Cookie class to set the domain?&rdquo;, I wonder. Try switching to Cookie and it throw this exception</p>

<p>{% codeblock lang:python %}</p>

<p>Traceback (most recent call last):</p>

<pre><code>...
c = Cookie()
</code></pre>

<p>TypeError: <strong>init</strong>() takes at least 17 arguments (1 given)
{% endcodeblock %}</p>

<p>At this point I said to myself: No, I am not going to figure out the 17 arguments. My test code is at this point in this dismal state:.</p>

<p>{% codeblock lang:python %}</p>

<pre><code>import urllib2
from cookielib import Cookie, CookieJar, DefaultCookiePolicy  
from Cookie import SimpleCookie        

policy = DefaultCookiePolicy(rfc2965=True)        

c = SimpleCookie()
c['secretkey'] = auth_token
cj = CookieJar(policy)
cj.set_cookie(c)

req = urllib2.Request("%s/postdata" % self.server_url)
proxyHandler = urllib2.ProxyHandler( {} )
defaultErrorHandler = urllib2.HTTPDefaultErrorHandler()
cookieHandler = urllib2.HTTPCookieProcessor(cj)
opener = urllib2.build_opener( proxyHandler, defaultErrorHandler, cookieHandler )
opener.open(req, data, 10000)
</code></pre>

<p>{% endcodeblock %}</p>

<p>Instead of continuing banging my head against a wall, I recall reading about ‘requests’ module. Let give it a go.</p>

<p>Like magic, it is all I need. 2 lines.</p>

<p>{% codeblock lang:python %}</p>

<pre><code> import requests
 requests.post(url, data, cookie=cookie, headers=headers)
</code></pre>

<p>{% endcodeblock %}</p>

<p>It just works. Well done, requests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XPath, Python and Erlang]]></title>
    <link href="http://kongakong.github.io/post/2013/05/08/p-49924605254/"/>
    <updated>2013-05-08T20:00:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/05/08/p-49924605254</id>
    <content type="html"><![CDATA[<p>Just feel that python is easier for XML manipulation.</p>

<p>e.g.</p>

<p>{% codeblock lang:python %}
from lxml import etree
f = open(&ldquo;digg-science-rss1.xml&rdquo;)
tree  = etree.parse(f)
tree.xpath(expr)
{% endcodeblock %}</p>

<p>Very concise.</p>

<p>whereas in erlang, since the function xmerl:string may return a list that’s composed of various record type (such as  xmlRecord or xmlText etc), it makes the handling more complex (one clause per record type). The printout from REPL is also a lot more verbose. e.g.</p>

<p>```
&hellip;</p>

<pre><code>  #xmlText{
      parents = [{item,16},{channel,2},{rss,1}],
      pos = 3,language = [],value = "\n   ",type = text},
  #xmlElement{
      name = link,expanded_name = link,nsinfo = [],
      namespace = 
          #xmlNamespace{
              default = [],
              nodes =
</code></pre>

<p>&hellip;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single quote is for something else in erlang]]></title>
    <link href="http://kongakong.github.io/post/2013/05/06/p-49716537787/"/>
    <updated>2013-05-06T06:56:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/05/06/p-49716537787</id>
    <content type="html"><![CDATA[<p>In python, single quote and double quote are pretty much interchangable. Not so in erlang.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Python Epiphanies” by Stuart Williams]]></title>
    <link href="http://kongakong.github.io/post/2012/09/26/p-32322486387/"/>
    <updated>2012-09-26T21:04:00+10:00</updated>
    <id>http://kongakong.github.io/post/2012/09/26/p-32322486387</id>
    <content type="html"><![CDATA[<p><em>Python Epiphanies</em> by Stuart Williams</p>

<p>{% youtube Pi9NpxAvYSs %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side effect programming is bad]]></title>
    <link href="http://kongakong.github.io/post/2012/09/20/p-31877647026/"/>
    <updated>2012-09-20T06:52:00+10:00</updated>
    <id>http://kongakong.github.io/post/2012/09/20/p-31877647026</id>
    <content type="html"><![CDATA[<p>This bit of code is trying to calculate a list of mid prices based on bid and ask prices</p>

<p>{% codeblock %}
def mids(self, bids, asks):</p>

<pre><code>f = lambda X, Y: (X is not None) and (Y  is not None) and (X+Y)/2 or None
return [f(bid, ask) for bid, ask in zip(bids, asks)
</code></pre>

<p>{% endcodeblock %}</p>

<p>It works fine unTIL one day there is a None in mids.</p>

<p>The bid and ask of the corresponding item are both zero. We expect to see zero in the result.</p>

<p>So what happened?</p>

<p>The original lambda, f, rely on the side effect of short-circuit behaviour of  and/or operator to return the mid price (if there is data) or None (if both are <code>None</code>)</p>

<p>But it will not work if both X and Y are zero, because zero is evaluated to false. While zero is the answer we want, the execution falls to the ‘or’ part of the expression.</p>

<p>A better to write the lambda:</p>

<p>{% codeblock %}
f = lambda X, Y:  (X+Y)/2.0 if (X is not None) and (Y  is not None)  else None
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
