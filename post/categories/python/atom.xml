<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/python/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2015-02-23T00:21:21+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authenticate Mandrill Webhook Call in Python]]></title>
    <link href="http://www.ahwkong.com/post/2015/02/04/authenticate-mandrill-webhook-call/"/>
    <updated>2015-02-04T19:58:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/02/04/authenticate-mandrill-webhook-call</id>
    <content type="html"><![CDATA[<p>There are plenty of examples in php out there, but I cannot find any in python. I reckon I can share my implementation here.</p>

<p>It is assuming you are using Google App Engine</p>

<pre><code>    import webapp2
    import hashlib
    import hmac

    class MandrillWebhookHandler(webapp2.RequestHandler):

        def _calc_signature(self, raw, key):
            hashed = hmac.new(key, raw, hashlib.sha1)
            return hashed.digest().encode("base64").rstrip('\n')

        def verify_mandrill_signature(self):
            '''
            Mandrill includes an additional HTTP header with webhook POST requests,
                X-Mandrill-Signature, which will contain the signature for the request.
                To verify a webhook request, generate a signature using the same key
                that Mandrill uses and compare that to the value of the
                X-Mandrill-Signature header.
            :return: True if verified valid
            '''
            mandrill_signature = self.request.headers['X-Mandrill-Signature']
            mandrill_key = 'Your mandrill webhook key goes here'
            signed_data = self.request.path_url
            sorted_key = sorted(self.request.arguments())
            for k in sorted_key:
                signed_data += k
                signed_data += self.request.get(k)
            expected_signature = self._calc_signature(signed_data, mandrill_key)
            return expected_signature == mandrill_signature

        def head(self):
            '''
            Must return 200 so Mandrill knows it is a valid webhook

            http://help.mandrill.com/entries/22024856-Why-can-t-my-webhook-or-inbound-route-URL-be-verified-
            '''
            self.response.set_status(OK)

        def post(self):
            '''
            Mandrill sends data to our webhook by post
            '''
            if not self.verify_mandrill_signature():
                # check failed
                self.abort()

            # The rest of processing
            # ...
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference between handling 'self' in Python and Swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/10/swift-can-be-very-pythonic/"/>
    <updated>2014-09-10T12:35:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/10/swift-can-be-very-pythonic</id>
    <content type="html"><![CDATA[<p>Take a look at this <code>swift</code> code (XCode6 Beta7)</p>

<pre><code>    class C {
            func name () -&gt; String {
                return "C"
            }
    }

    class D:C {
            override func name () -&gt; String {
                return "D"
            }
    }

    let c = C()
    println(c.name()) // print 'C'

    let d = D()
    println(d.name()) // print 'D' as expected

    println(C.name(d)()) // print 'D'! 
</code></pre>

<p>In python, the last case is different:</p>

<pre><code>    class C:
        def name(self):
            return 'C' 

    class D(C):
        def name(self):
            return 'D' 

    c = C() 
    print(c.name())  // print 'C' 

    d = D() 
    print(d.name())  // print 'D' 

    print(C.name(d)) // print 'C' 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Current time in objective-c and python]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/06/now-in-objective-c-and-python/"/>
    <updated>2014-03-06T18:49:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/06/now-in-objective-c-and-python</id>
    <content type="html"><![CDATA[<p>To get the current time in python</p>

<p>{% codeblock lang:python %}</p>

<blockquote><blockquote><blockquote><p>import datetime
datetime.datetime.now()
datetime.datetime(2014, 3, 6, 18, 51, 13, 321003)</p></blockquote></blockquote></blockquote>

<p>{% endcodeblock %}</p>

<p>and in objective-c</p>

<p>{% codeblock lang:objective-c %}</p>

<p>NSDate* date = [NSDate date];
NSLog(@&ldquo;%@&rdquo;, date);</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[x in y in c++]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/04/x-in-y-in-c-plus-plus/"/>
    <updated>2014-03-04T08:23:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/04/x-in-y-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>Equivalent to</p>

<p>{% codeblock lang:python %}
   for x in y:</p>

<pre><code>  # do something
</code></pre>

<p>{% endcodeblock %}</p>

<p>in C++ is</p>

<p>{% codeblock lang:c++ %}
void print_loop() {</p>

<pre><code>auto y = {0, 1, 2, 3, 4, 5, 6};

for (auto i : y)
{
    cout &lt;&lt; '.' &lt;&lt; i;
}
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bottle and parameters]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/03/bottle-and-parameters/"/>
    <updated>2014-03-03T22:58:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/03/bottle-and-parameters</id>
    <content type="html"><![CDATA[<p>Use   <code>request.query</code> to retrieve the url parameters</p>

<p>{% codeblock lang:python %}</p>

<h1>coding: utf-8</h1>

<p>from bottle import *</p>

<p>@route(&lsquo;/&rsquo;)
@route(&lsquo;/index.html&rsquo;)
def index():</p>

<pre><code>return '&lt;a href="http://www.ahwkong.com/hello"&gt;Go to Hello page&lt;/a&gt;'
</code></pre>

<p>@route(&lsquo;/hello&rsquo;)
def hello():</p>

<pre><code>name = None
names = request.query.getall('name')
if names:
    name = names[0]
return '&lt;h1&gt;Hello %s&lt;/h1&gt;' % name
</code></pre>

<p>run(host=&lsquo;localhost&rsquo;, port=8000, reloader=True)</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
