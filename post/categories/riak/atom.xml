<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: riak | Timeline]]></title>
  <link href="http://www.ahwkong.com/post/categories/riak/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2015-02-26T21:39:22+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Riak Content Type]]></title>
    <link href="http://www.ahwkong.com/post/2013/09/12/riak-content-type/"/>
    <updated>2013-09-12T22:28:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2013/09/12/riak-content-type</id>
    <content type="html"><![CDATA[<p>The content-type is important for Riak KV: Various clients will use it to identify the difference between a response where the whole body is the key, or a response that contains siblings</p>

<p>It will also allow you to version your objects better. Here are a few suggestions (of course replace the text between the &lt; >):</p>

<ul>
<li><code>application/octet-stream</code> &ndash; this is usually used for binary data, and is the easiest thing to set the content-type to.</li>
<li><code>application/vnd.&lt;company name&gt;.&lt;useful type name here&gt;</code> &ndash; a vendor-specific type, which you can create yourself</li>
<li><code>application/vnd.&lt;company name&gt;.&lt;useful type name here&gt;.v&lt;version number&gt;</code> &ndash; another vendor-specific type, which supports versioning.</li>
</ul>


<p>Source: by Sam Elliott in the mailing list</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[riak allow-multi]]></title>
    <link href="http://www.ahwkong.com/post/2013/08/15/riak-allow-multi/"/>
    <updated>2013-08-15T01:04:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2013/08/15/riak-allow-multi</id>
    <content type="html"><![CDATA[<p>I could not create a write conflict situation.</p>

<p>It turns out it is because I did not set the <strong>allow_multi</strong> property</p>

<p>Here is the command line:</p>

<pre><code>curl -i -XPUT http://riak001:8098/riak/cart -H "Content-Type:application/json" -d '{"props":{"allow_mult":1} }'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make riak listen to IP other than localhost]]></title>
    <link href="http://www.ahwkong.com/post/2013/08/09/how-to-make-riak-listen-to-addresses-other-than-localhost/"/>
    <updated>2013-08-09T18:53:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2013/08/09/how-to-make-riak-listen-to-addresses-other-than-localhost</id>
    <content type="html"><![CDATA[<p>By default a riak node will only listen to 127.0.0.1.</p>

<p>Replace 127.0.0.1 with the host IP in app.config will solve this issue</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Type of Database Models]]></title>
    <link href="http://www.ahwkong.com/post/2013/07/29/different-type-of-database/"/>
    <updated>2013-07-29T08:08:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2013/07/29/different-type-of-database</id>
    <content type="html"><![CDATA[<p>I find this summary in <a href="http://littleriakbook.com/">Eric Redmond&rsquo;s &lsquo;A Little Riak&rsquo;</a> book  very concise and useful.</p>

<ol>
<li><p><strong>Relational</strong> Traditional databases usually use SQL to model and query data. They are useful for data which can be stored in a highly structured schema, yet require lexible querying. Scaling a relational database (RDBMS) traditionally occurs by more powerful hardware (vertical growth).</p>

<p>Examples: PostgreSQL, MySQL, Oracle</p></li>
<li><p><strong>Graph</strong> These exist for dataighly interconnected data. They excel in modeling complex relationships between nodes, and many implementations can handle multiple billions of nodes and relationships (or edges and vertices). I tend to include triplestores and object DBs as specialized variants.</p>

<p> Examples: Neo4j, Graphbase, IniniteGraph</p></li>
<li><p><strong>Document</strong> Document datastores model hierarchical values called documents, represented in formats such as JSON or XML, and do not enforce a document schema. They generally support distributing across multiple servers (horizontal growth).</p>

<p> Examples: CouchDB, MongoDB, Couchbase</p></li>
<li><p><strong>Columnar</strong> Popularized by Google’s BigTable, this form of database exists to scale across mul- tiple servers, and groups similar data into column families. Column values can be individually versioned and managed, though families are deined in advance, not unlike RDBMS schemas.</p>

<p> Examples: HBase, Cassandra, BigTable 4</p></li>
<li><p><strong>Key/Value</strong> Key/Value, or KV stores, are conceptually like hashtables, where values are stored and accessed by an immutable key. They range from single-server varieties like Memcached used for high-speed caching, to multi-datacenter distributed systems like Riak Enterprise.</p>

<p> Examples: Riak, Redis, Voldemort</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
