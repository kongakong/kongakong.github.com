---
layout: post
title: Erlang Mailing List - String as List 2
date:  2008-02-19 04:09
comments: true
categories: erlang
meta: 
---
<span class="HcCDpe"><span email="exta7@walla.com" class="EP8xU" style="color: rgb(0, 148, 134);">Zvi</span><span class="lDACoc"> responded to </span></span><span class="HcCDpe"><span email="chsu79@gmail.com" class="EP8xU" style="color: rgb(91, 16, 148);">Christian S</span></span><span class="HcCDpe"><span class="lDACoc">'s "recommended large text mass handling modules". He said, if for efficiency we  represent  a string as binary, the code will become too verbose. For example,</span></span><br /><blockquote style="font-style: italic;"><span class="HcCDpe"><span class="lDACoc"></span></span><ul><li> <<"ABC">>, instead of "ABC"</li><li> <<s1 s2="" bytes="">< </s1> S1 / bytes, S2 / bytes <s1 s2="" bytes="">>> instead of S1++S2</s1></li><li> using file:delete(binary_to_list(Filename)) instead of file:delete(Filename)</li><li> xmerl and erlsom parse into lists and not binaries</li></ul></blockquote><div id="1fhc" class="ArwC7c ckChnd"><span class="HcCDpe"><span email="dustin.whitney@gmail.com" class="EP8xU" style="color: rgb(185, 0, 56);">Dustin Whitney</span></span> concurred the verboseness, and recommend a new string type.<span class="HcCDpe"><span email="vychodil.hynek@gmail.com" class="EP8xU" style="color: rgb(132, 102, 0);"></span><span class="lDACoc"><br /><br /></span></span><span class="HcCDpe"><span email="bjorn@erix.ericsson.se" class="EP8xU" style="color: rgb(51, 0, 153);">Bjorn Gustavsson</span></span> responded to eariler <span class="HcCDpe"><span class="lDACoc"></span></span><span class="HcCDpe"><span email="kevin@scaldeferri.com" class="EP8xU" style="color: rgb(204, 0, 96);">Kevin Scaldeferri</span></span>'s opinion on list inefficiency. He suggested, in the case of appending:<br /><blockquote style="font-style: italic;"><br />"You can append by building a deep list and only flatten it at the end.<br /><br />  NewString = [AListOfChars|AnotherListOfChars]<br /><div id="1fi4" class="ArwC7c ckChnd"><br />or<br />  NewString = [AListOfChars,ACharacter]<br /><br />Or you can simply do a recursion (not tail-recursion) and use<br />the '++' operator. That will be efficient, because the recursion will<br />ensure that the '++' operators are executed in a right-to-left order."</div></blockquote><div id="1fi4" class="ArwC7c ckChnd"><br /><span class="HcCDpe"><span email="chsu79@gmail.com" class="EP8xU" style="color: rgb(91, 16, 148);">Christian S  </span></span>suggested an alternative to one of <span class="HcCDpe"><span email="exta7@walla.com" class="EP8xU" style="color: rgb(0, 148, 134);">Zvi</span><span class="lDACoc">'s string-as-binary example ("</span></span>  <<s1 s2="" bytes=""><  </s1> S1 / bytes, S2 / bytes >> <s1 s2="" bytes=""> instead of S1++S2")<span class="HcCDpe"><span class="lDACoc">:<br /></span></span><br /></s1><blockquote style="font-style: italic;">"[S1,S2] and then do iolist_to_binary/1 if you need it flat."</blockquote><br />Then focus of discussion shifted to a tool called Leex for a while.<br /><br /><span class="HcCDpe"><span email="ok@cs.otago.ac.nz" class="EP8xU" style="color: rgb(121, 6, 25);">Richard A. O'Keefe </span></span>weighted in and expressed his opinion on a number of issues.<br /><br />First of all, the String as list should not be dismissed as "historical reason" only:<br /><blockquote><br /><span style="font-style: italic;">"it is simplicity (the preferred</span><br /><span style="font-style: italic;">sequence type in Erlang is lists, and strings are just sequences of</span><br /><span style="font-style: italic;">characters), power (because any time someone defines a function on</span><br /><span style="font-style: italic;">lists you get to use it on strings, and there are *lots* of useful</span><br /><span style="font-style: italic;">list functions), and processing efficiency (because working down</span><br /><span style="font-style: italic;">one character at a time doesn't require allocating *any* new storage,</span><br /><span style="font-style: italic;">not even for slices)."</span></blockquote>He suggested the following rule of thumb for text handling<br /><blockquote style="font-style: italic;"><br />"The guiding rule is<br />- if you just want to hold onto a string for a while, use a binary<br />- if you want to build or process a string, use a list (possibly in<br />Erlang a deep list).<br />- if you want to represent something that has structure, and you want<br />your program to be aware of that structure, turn it into a<br />structured<br />data value and work with it in that form."</blockquote>and some myth-busting on appending string performance issue:<br /><blockquote style="font-style: italic;"><br />"Right, this is not efficient.  But it is spectacularly<br />inefficient in programming languages with more conventional<br />representations.<br />It is O(n**2).  For example,<br />  x = ""<br />  for (i = 1; i <= 100000; i++) x = x "a"  just took 30.5 seconds in awk on my machine, 62.2 seconds in Perl, and a massive 631 seconds in Java.  That was using gcj; I lost patience with the Sun SDK and killed it.  (AWK faster than Java?  Yes, it often is.) Building the same string in Erlang using        loop(100000, "") where        loop(0, S) -> lists:reverse(S);<br />  loop(N, S) -> loop(N-1, "a"++S).<br />takes 0.15 second on the same machine."</blockquote><br /><span class="HcCDpe"><span email="masklinn@masklinn.net" class="EP8xU" style="color: rgb(121, 6, 25);">Masklinn</span>  <span class="lDACoc">pointed out later that Java benchmark is off because the example is not using StringBuffer.<br /></span></span><br />End of Part 2<br /><br /></div></div><span class="HcCDpe"><span email="chsu79@gmail.com" class="EP8xU" style="color: rgb(91, 16, 148);"><br /></span></span>