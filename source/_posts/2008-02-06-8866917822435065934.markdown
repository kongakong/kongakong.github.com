---
layout: post
title: Why I choose to learn Erlang?
date:  2008-02-06 06:02
comments: true
categories: erlang
meta: 
---
Just think it may be worthwhile to commit it in writing for sharing.<br /><br />In summary, my decision is only partially based on the technical merit or language features.<br /><br />First take a look back at year 2001. Motivated by the desire to find a better, more reliable way to develop software, I learned and switched to Linux platform in this year. For anyone serious in learning unix family OS,  <span style="font-style: italic;">bash</span>, <span style="font-style: italic;">awk</span>, <span style="font-style: italic;">sed </span>and <span style="font-style: italic;">perl </span>scripting are literally the "basic dance steps".<br /><br />Then I moved on to Python (see my first blog if you have plenty of time to waste :-) ).<br /><br />Now fast forward a few years. From Python, I soon learn about these big names such as <a href="http://www.python.org/%7Eguido/">Guido van Rossum</a> and <a href="http://norvig.com/">Peter Norvig</a> etc, and for some reasons, stumbled upon  <a href="http://www.paulgraham.com/">Paul Graham</a> and his famous essays.<br /><br />One of his famous idea on computer language is: there are reasons why some languages are superior than other languages, and Lisp <span style="font-style: italic;">is </span>the most powerful among them. (Alright, I made the assertion for him, he probably never really put it exactly this way. Did he?)<br /><br />So, convinced by the argument that a language is key to a programmer's productivity, I decided to give Lisp a try. The syntax, or the lack of it, is indeed a challenge, but the concept of "code is data, data is code" is very powerful. <a href="http://www.gigamonkeys.com/book/macros-standard-control-constructs.html">Macros</a> and <a href="http://www.gigamonkeys.com/book/object-reorientation-generic-functions.html">CLOS </a>are effective techniques in Lisp programming.<br /><br />Fortunately there are a lot of resource.<br /><br />Actually I should put it this way: "too much resource".<br /><br />Indeed, if you look at variety in the implementations of mainstream Lisp, and its derivative, Scheme, you will find these choices: Common lisp (clisp), CMUCL (CMU lisp), Kawa (Scheme on JVM), PLT Scheme, Scheme 48 etc... The list goes on and on.<br /><br />It is the common phenomena of *nix world: the Fragmentation.<br /><br />As a result, for any partitioner in commercial software world, it becomes a hard problem: given limited free time for self-study, we are confronted with these choices:<br /><ul><li>which language (Lisp or Scheme)?</li><li>which version (R5RS or R6RS or some subset, in the case of Scheme)?</li><li>which implementation of the language (the usual portability vs power/library issue)?</li></ul>It makes my research long and tedious. If I bet on a wrong horse, I will lose a lot of valuable time, right? What if I am in a middle of a project and encounter a bug in the lisp/scheme interpreter I am using, will there be adequate community support? What if...<br /><br />Does the risks justify the potential gain from the use of Lisp/Scheme?<br /><br />Then I discovered Erlang.<br /><br />The following reasons make me think, form my particular situation and career need, Erlang is probably the safest  bet (or most cost-effective investment):<br /><br /><ul><li>It has all the beauty and expressiveness of a functional language</li><li>You gain concurrency for free (built-in support in syntax and kernel)<br /></li><li>You gain fault tolerance for free</li><li>You gain distributed processing for free</li><li>The language and library are robust and battle-tested in demanding Telecom industry.</li><li>It does not suffer from the implementation fragmentation of Lisp/Scheme.</li><li>The language evolution is well controlled (by Ericsson)<br /></li></ul>It is a pragmatic choice from a software builder's point of view.