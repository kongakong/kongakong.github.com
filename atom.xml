<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Timeline]]></title>
  <link href="http://www.ahwkong.com/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2015-02-03T21:00:26+11:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[a little gotcha with @patch]]></title>
    <link href="http://www.ahwkong.com/post/2015/02/02/a-little-catch-with-at-patch/"/>
    <updated>2015-02-02T16:34:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/02/02/a-little-catch-with-at-patch</id>
    <content type="html"><![CDATA[<p>This is my code</p>

<pre><code>from mail_api import send_mail

def my_func():
    # do some work
    send_mail(to="test@example.com", content="data)
    # do some more work
    return result
</code></pre>

<p>Here is my unit test. I want to test for the return value but I do not want to send out any email at all from the unit test. That&rsquo;s why I patch the <code>send_mail</code> function.</p>

<pre><code>from mock import patch

  class MyTest(unittest.TestCase):

    @patch('mail_api.send_mail')
    def test_my_func(self, send_mail):
      self.assertEquals(my_func(), expected_result)
</code></pre>

<p>To my surprise an email is still sent out when the test is run!</p>

<p>It turns out <code>my_func</code> still retains a reference to the original <code>send_mail</code> function. If I want to successfully patch the mail api, I need to rewrite <code>my_func</code> like this:</p>

<pre><code>import mail_api

def my_func():
    # do some work
    mail_api.send_mail(to="test@example.com", content="data)
    # do some more work
    return result
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef, brekshelf and data bag]]></title>
    <link href="http://www.ahwkong.com/post/2015/01/20/chef/"/>
    <updated>2015-01-20T14:41:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/01/20/chef</id>
    <content type="html"><![CDATA[<p>After some trial and errors, the best way (as of this writing) to manage cookbooks for <strong>vagrant</strong> + <strong>chef</strong> is to use brekshef. You can forget about <code>knife</code> or <code>librarian-chef</code>.</p>

<p>If you use berkshelf with vagrant, you will need to install the vagrant-berkshelf plugin. The plugin is quite clever and you do not need to specify the cookbook path for your chef-solo or chef-zero provisioner.</p>

<p>However it does not apply to <code>data_bags</code>. You will still need to specify the path to <code>data_bags</code> if you need to use data bag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[best way to install chefdk on OSX]]></title>
    <link href="http://www.ahwkong.com/post/2015/01/19/best-way-to-install-chefdk/"/>
    <updated>2015-01-19T15:12:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/01/19/best-way-to-install-chefdk</id>
    <content type="html"><![CDATA[<p>The best way to install chefdk on OSX for me is to use <code>brew cask</code>:</p>

<pre><code>brew cask instal chefdk 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[basic rvm]]></title>
    <link href="http://www.ahwkong.com/post/2015/01/18/basic-rvm/"/>
    <updated>2015-01-18T15:53:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/01/18/basic-rvm</id>
    <content type="html"><![CDATA[<p>It is impossible not to learn <code>ruby</code> these days. It is used everywhere: ruby powers <code>octopress</code>, <code>chef</code> and many other popular software.</p>

<p>Here is some basic <code>rvm</code> command:</p>

<pre><code>$ rvm list

rvm rubies

   ruby-1.9.3-p484 [ x86_64 ]
   ruby-1.9.3-p551 [ x86_64 ]
=* ruby-2.2.0 [ x86_64 ]

# =&gt; - current
# =* - current &amp;&amp; default
#  * - default


$ rvm use 2.2.0
Using /Users/antkong/.rvm/gems/ruby-2.2.0

$ bundle install
bash: bundle: command not found

$ gem install bundle
Fetching: bundler-1.7.12.gem (100%)
Successfully installed bundler-1.7.12
Fetching: bundle-0.0.1.gem (100%)
Successfully installed bundle-0.0.1
Parsing documentation for bundler-1.7.12
Installing ri documentation for bundler-1.7.12
Parsing documentation for bundle-0.0.1
Installing ri documentation for bundle-0.0.1
Done installing documentation for bundler, bundle after 1 seconds
2 gems installed 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My attempt at toastmaster speech #2]]></title>
    <link href="http://www.ahwkong.com/post/2015/01/13/toastmaster-speech-2/"/>
    <updated>2015-01-13T04:33:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2015/01/13/toastmaster-speech-2</id>
    <content type="html"><![CDATA[<p>This is my second speech and I find that writing a speech is not a easy task. First of all it takes time to think of a right topic. Then it takes a lot of practices and effort to be able to give the speech without note. It definitely motivated me to look at memorisation techniques.</p>

<h1>The Speech</h1>

<p>You are alone, in the dark. It is coming. It is getting closer. You can almost smell it. You are tired, you are exhausted. You are making a last ditch effort in last 12 hours non-stop. You are anxious because you are not sure if everything gonna turn out as planned. Your enemy is invisible yet its feels so real. I am talking about one of the worst enemies in our work lives: meeting the Deadline!</p>

<p>Does this feeling sound familiar to you? Raise your hand if you had this experience before!</p>

<p>Deadline is called deadline for good reasons. The time is set in stone. The consequence of failure is real. If your project misses the deadline, it could mean a failure to meet your customer expectation. Your organisation can suffer from reputational damage and some heads gonna roll! It could well be yours.</p>

<p>Can we tame this monster?</p>

<p>There is a few things you can do to make it easier to meet the deadlines</p>

<p>First of all, understand the objective of your project! It sounds obvious but it is extremely important.</p>

<p>Imagine you are an explorer and is lost in jungle. You want to get out of it alive. It really does not matter if you know how to clear a path with your machete or how to swing from tree to tree like Tarzan. But if you are heading the wrong direction you will never get out!</p>

<p>Sometimes we are too obsessed with operational details, we forget to ask the big picture question: What do we want to achieve? What is the expected outcome? How will we measure success or failure? These are the questions that we have to ask. These are the questions that set the direction.</p>

<p>Next. Planning. To plan well means we need to identify constraints and limitations we will face in a project.</p>

<p>A typical project has a lot of internal and external dependencies. These dependencies can become constraints and, in some case, even a blocker.</p>

<p>Here is a typical example of a constraint: The new system is dependent on the implementation of a new feature by an external vendor. The vendor does not have the capability to deliver this new feature in your timeframe. So our capability to deliver is constrained by how well the vendor can meet our deadline.</p>

<p>Sometimes a constraint can become a blocker. Say your project requires a key piece of new software which can only be run on an latest version of an operating system. But your internal IT insists that you can only use an older version because of policy.  How are you going to resolve it?</p>

<p>It is important to map out all the potential blockers on the critical path. The failure to do so can bring u unpleasant surprise.</p>

<p>3 Use milestones</p>

<p>Milestone is a technique to break a project down into smaller module. They are good checkpoints for monitoring the health of a project. Once you hit a milestone, it is a good time to pause and check if the original estimate is good, reexamine all the assumption, dependencies and constraints you have identified.</p>

<p>4 Set buffer.</p>

<p>What is buffer? Buffer basically means extra time and resources to prepare for the unexpected. Life is full of unexpected event. Your software vendor may suddenly goes of business; your key employee may become ill and cannot report to work for a while; A sudden change in market condition forces you make some last minute revisionâ€¦ All of these will add pressure on your already tight schedule. If you have not budgeted for these risks in a project, you will be likely end up in a position that you have to scramble to find extra resource and, more often than not, put extra pressure on an already stressed out team.</p>

<p>Burning midnight oil to meet deasline is not a fun experience. Keeping a good and even pace at work is key to avoid burnout. Therefore let me rehash the main points:</p>

<p>Understand the objective; know where you are going
Have a clear idea of the constraints and the limits &ndash; it can only done well if you understand your task or product well
Break a project into modules and assign milestones. Each milestone is a checkpoint to review the past performance and adjust the plan and direction.</p>

<p>With these technique you will be able to defeat this monster known as Deadline. After all we work to live, not live to work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[init chain rule in swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/init-chain-rule-in-swift/"/>
    <updated>2014-09-18T16:30:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/init-chain-rule-in-swift</id>
    <content type="html"><![CDATA[<blockquote><p>Swift has a narrow rule whereby a class with a designated initializer with no arguments is implicitly called by dereived class initializers if no other super.init call is specified and it is otherwise unambiguous.  This is why you don&rsquo;t need to explicitly call super.init() when subclassing NSObject, for example.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@IBDesignable and @IBInspectable ]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/at-ibdesignable-and-at-ibinspectable/"/>
    <updated>2014-09-18T16:26:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/at-ibdesignable-and-at-ibinspectable</id>
    <content type="html"><![CDATA[<blockquote><p>You can use two different attributesâ€”@IBDesignable and @IBInspectableâ€”to enable live, interactive custom view design in Interface Builder.</p></blockquote>

<p>from <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/WritingSwiftClassesWithObjective-CBehavior.html">Apple doc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift ternanry operator ?]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/swift-ternanry-operators/"/>
    <updated>2014-09-18T01:25:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/swift-ternanry-operators</id>
    <content type="html"><![CDATA[<p>This will cause a compiler error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let a=3
</span><span class='line'>let b=4
</span><span class='line'> 
</span><span class='line'>let max = (a>b)? a:b // Compiler Error: Consecutive statements on a line must be separated by ';'"</span></code></pre></td></tr></table></div></figure>


<p>Putting spaces around operators will resolve the compiler error i.e.</p>

<pre><code>let max = a &gt; b ? a : b
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[autorelease in swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/autorelease-in-swift/"/>
    <updated>2014-09-18T01:01:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/autorelease-in-swift</id>
    <content type="html"><![CDATA[<p>In Swift it may be necessary to use <code>autorelease</code> if we are using objective-c objects. e.g.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>autoreleasepool {
</span><span class='line'>
</span><span class='line'>        // do something expensive without using Obj-C code
</span><span class='line'>
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>This is a clang doc regarding <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#retained-return-values">ARC and retain count</a>. A lot of info to digest&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift closure error: Boolean is not Convertible to Void]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/17/swift-closure-error-is-not-convertible-to-void/"/>
    <updated>2014-09-17T10:50:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/17/swift-closure-error-is-not-convertible-to-void</id>
    <content type="html"><![CDATA[<p>This piece code here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dismissViewControllerAnimated(true, completion: { () -> Void in
</span><span class='line'>    let account = Account()
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>throws exception:</p>

<pre><code>Cannot convert the expression's type 'Boolean' to type 'Void'
</code></pre>

<p>It is because if the block does not have a return statement, the compiler uses the result of the last statement as the return value</p>

<p>Adding a <code>return ()</code> as the last expression to the block fixes the problem</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Values of type NSInteger should not be used as format arguments]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/14/values-of-type-nsinteger-should-not-be-used-as-format-arguments/"/>
    <updated>2014-09-14T18:01:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/14/values-of-type-nsinteger-should-not-be-used-as-format-arguments</id>
    <content type="html"><![CDATA[<p>In this example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSInteger val = 15000;
</span><span class='line'>    NSLog(@"%i", val);</span></code></pre></td></tr></table></div></figure>


<p>XCode will flag this error</p>

<pre><code>Values of type "NSInteger" should not be used as format arguments: add an explicit cast to 'long' instead.
</code></pre>

<p>It is because NSInteger can be 32-bit or 64-bit, depending on the platform, the compiler recommends to add a cast to long generally.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unrecognized selector -replacementObjectForKeyedArchiver: ]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/12/unrecognized-selector-replacementobjectforkeyedarchiver/"/>
    <updated>2014-09-12T22:31:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/12/unrecognized-selector-replacementobjectforkeyedarchiver</id>
    <content type="html"><![CDATA[<p>Here is the code in question:</p>

<pre><code>class Something: NSCoding {
    ...

let smth = Something() 
let data = NSKeyedArchiver.archivedDataWithRootObject(smth);
</code></pre>

<p>It throws this exception:</p>

<pre><code>2014-09-12 16:30:00.463 MyApp[30078:60b] *** NSForwarding: warning: object 0x7a04ac70 of class '_TtC8MyApp7Something' does not implement methodSignatureForSelector: -- trouble ahead
Unrecognized selector -[MyApp.Something replacementObjectForKeyedArchiver:]
</code></pre>

<p>It is because <code>Something</code> does not inherit from <code>NSObject</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript and hoisting]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/12/javascript-and-hoisting/"/>
    <updated>2014-09-12T15:12:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/12/javascript-and-hoisting</id>
    <content type="html"><![CDATA[<p><code>Hoisting</code> is when JavaScript moves the definition of some code to the top of the closure.</p>

<p><a href="http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code/">Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css overflow]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/12/css-overflow/"/>
    <updated>2014-09-12T12:54:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/12/css-overflow</id>
    <content type="html"><![CDATA[<p>Valid values of attribute <code>overflow</code> are visible, hidden, scroll, auto, initial and inherit</p>

<p>It controls browser behavior if content overflows an element&rsquo;s box.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting an angularjs project with bower]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/12/angular-bower/"/>
    <updated>2014-09-12T10:53:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/12/angular-bower</id>
    <content type="html"><![CDATA[<p>First you need to install <code>npm</code> via <code>brew</code></p>

<p>Then run <code>npm install -g bower</code> as documented in <a href="http://bower.io/">bower websiter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[make iphone vibrate]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/10/make-iphone-vibrate/"/>
    <updated>2014-09-10T13:31:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/10/make-iphone-vibrate</id>
    <content type="html"><![CDATA[<p>Use these APIs to set the iphone to vibrate</p>

<pre><code>AudioServicesPlayAlertSound(kSystemSoundID_Vibrate);
AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
</code></pre>

<p>The first function plays a beep sound if the devices donâ€™t support vibration. The second function on the other hand does nothing on unsupported devices.</p>

<p>if <code>AVRecorder</code> is running, iphone will not vibrate too.</p>

<p>Source: <a href="http://stackoverflow.com/questions/4724980/making-the-iphone-vibrate">Stackoverflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference between handling 'self' in Python and Swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/10/swift-can-be-very-pythonic/"/>
    <updated>2014-09-10T12:35:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/10/swift-can-be-very-pythonic</id>
    <content type="html"><![CDATA[<p>Take a look at this <code>swift</code> code (XCode6 Beta7)</p>

<pre><code>    class C {
            func name () -&gt; String {
                return "C"
            }
    }

    class D:C {
            override func name () -&gt; String {
                return "D"
            }
    }

    let c = C()
    println(c.name()) // print 'C'

    let d = D()
    println(d.name()) // print 'D' as expected

    println(C.name(d)()) // print 'D'! 
</code></pre>

<p>In python, the last case is different:</p>

<pre><code>    class C:
        def name(self):
            return 'C' 

    class D(C):
        def name(self):
            return 'D' 

    c = C() 
    print(c.name())  // print 'C' 

    d = D() 
    print(d.name())  // print 'D' 

    print(C.name(d)) // print 'C' 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngTouch]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/04/ngtouch/"/>
    <updated>2014-09-04T16:11:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/04/ngtouch</id>
    <content type="html"><![CDATA[<p>To introduce touch behaviour in angularjs-enabled mobile app, try this:</p>

<pre><code>&lt;script src="bower_components/angular-touch/angular-touch.js"&gt;&lt;/script&gt;
angular.module('myApp', ['ngTouch']) 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[semi-colon in swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/04/semi-colon-in-swift/"/>
    <updated>2014-09-04T14:52:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/04/semi-colon-in-swift</id>
    <content type="html"><![CDATA[<p>The perfered style of semi-colon placement in swift is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct Foo: SomeProtocol {}
</span><span class='line'>class Foo: SomeProtocol {}
</span><span class='line'>
</span><span class='line'>var x: Int
</span><span class='line'>func foo(x: Int) {}
</span><span class='line'>func bar(x: (y: Int) -> Int) -> Double {}
</span><span class='line'>let dict = ["key": value]</span></code></pre></td></tr></table></div></figure>


<p>i.e. No space before the semi-colon. One space after the semi-colon</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is tag fieldset?]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/01/what-is-tag-fieldset/"/>
    <updated>2014-09-01T09:40:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/01/what-is-tag-fieldset</id>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/9741328/why-do-we-need-a-fieldset-tag">From StackOverflow</a></p>

<p>The most obvious, practical example is:</p>

<pre><code>&lt;fieldset&gt;
    &lt;legend&gt;Colour&lt;/legend&gt;
    &lt;label&gt;&lt;input type="radio" name="colour" value="blue"&gt; Blue &lt;/label&gt;
    &lt;label&gt;&lt;input type="radio" name="colour" value="red"&gt; Red &lt;/label&gt;
    &lt;label&gt;&lt;input type="radio" name="colour" value="green"&gt; Green &lt;/label&gt;
&lt;/fieldset&gt;
</code></pre>

<p>This allows each radio button to be labeled while also providing a label for the group as a whole. This is especially important where assistive technology (such as a screen reader) is being used where the association of the controls and their legend cannot be implied by visual presentation.</p>
]]></content>
  </entry>
  
</feed>
