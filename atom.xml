<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Timeline]]></title>
  <link href="http://www.ahwkong.com/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2014-09-18T16:45:50+10:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[init chain rule in swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/init-chain-rule-in-swift/"/>
    <updated>2014-09-18T16:30:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/init-chain-rule-in-swift</id>
    <content type="html"><![CDATA[<blockquote><p>Swift has a narrow rule whereby a class with a designated initializer with no arguments is implicitly called by dereived class initializers if no other super.init call is specified and it is otherwise unambiguous.  This is why you don&rsquo;t need to explicitly call super.init() when subclassing NSObject, for example.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@IBDesignable and @IBInspectable ]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/at-ibdesignable-and-at-ibinspectable/"/>
    <updated>2014-09-18T16:26:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/at-ibdesignable-and-at-ibinspectable</id>
    <content type="html"><![CDATA[<blockquote><p>You can use two different attributes—@IBDesignable and @IBInspectable—to enable live, interactive custom view design in Interface Builder.</p></blockquote>

<p>from <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/WritingSwiftClassesWithObjective-CBehavior.html">Apple doc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift ternanry operator ?]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/swift-ternanry-operators/"/>
    <updated>2014-09-18T01:25:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/swift-ternanry-operators</id>
    <content type="html"><![CDATA[<p>This will cause a compiler error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let a=3
</span><span class='line'>let b=4
</span><span class='line'> 
</span><span class='line'>let max = (a>b)? a:b // Compiler Error: Consecutive statements on a line must be separated by ';'"</span></code></pre></td></tr></table></div></figure>


<p>Putting spaces around operators will resolve the compiler error i.e.</p>

<pre><code>let max = a &gt; b ? a : b
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[autorelease in swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/18/autorelease-in-swift/"/>
    <updated>2014-09-18T01:01:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/18/autorelease-in-swift</id>
    <content type="html"><![CDATA[<p>In Swift it may be necessary to use <code>autorelease</code> if we are using objective-c objects. e.g.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>autoreleasepool {
</span><span class='line'>
</span><span class='line'>        // do something expensive without using Obj-C code
</span><span class='line'>
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>This is a clang doc regarding <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#retained-return-values">ARC and retain count</a>. A lot of info to digest&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift closure error: Boolean is not Convertible to Void]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/17/swift-closure-error-is-not-convertible-to-void/"/>
    <updated>2014-09-17T10:50:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/17/swift-closure-error-is-not-convertible-to-void</id>
    <content type="html"><![CDATA[<p>This piece code here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dismissViewControllerAnimated(true, completion: { () -> Void in
</span><span class='line'>    let account = Account()
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>throws exception:</p>

<pre><code>Cannot convert the expression's type 'Boolean' to type 'Void'
</code></pre>

<p>It is because if the block does not have a return statement, the compiler uses the result of the last statement as the return value</p>

<p>Adding a <code>return ()</code> as the last expression to the block fixes the problem</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Values of type NSInteger should not be used as format arguments]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/14/values-of-type-nsinteger-should-not-be-used-as-format-arguments/"/>
    <updated>2014-09-14T18:01:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/14/values-of-type-nsinteger-should-not-be-used-as-format-arguments</id>
    <content type="html"><![CDATA[<p>In this example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSInteger val = 15000;
</span><span class='line'>    NSLog(@"%i", val);</span></code></pre></td></tr></table></div></figure>


<p>XCode will flag this error</p>

<pre><code>Values of type "NSInteger" should not be used as format arguments: add an explicit cast to 'long' instead.
</code></pre>

<p>It is because NSInteger can be 32-bit or 64-bit, depending on the platform, the compiler recommends to add a cast to long generally.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unrecognized selector -replacementObjectForKeyedArchiver: ]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/12/unrecognized-selector-replacementobjectforkeyedarchiver/"/>
    <updated>2014-09-12T22:31:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/12/unrecognized-selector-replacementobjectforkeyedarchiver</id>
    <content type="html"><![CDATA[<p>Here is the code in question:</p>

<pre><code>class Something: NSCoding {
    ...

let smth = Something() 
let data = NSKeyedArchiver.archivedDataWithRootObject(smth);
</code></pre>

<p>It throws this exception:</p>

<pre><code>2014-09-12 16:30:00.463 MyApp[30078:60b] *** NSForwarding: warning: object 0x7a04ac70 of class '_TtC8MyApp7Something' does not implement methodSignatureForSelector: -- trouble ahead
Unrecognized selector -[MyApp.Something replacementObjectForKeyedArchiver:]
</code></pre>

<p>It is because <code>Something</code> does not inherit from <code>NSObject</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript and hoisting]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/12/javascript-and-hoisting/"/>
    <updated>2014-09-12T15:12:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/12/javascript-and-hoisting</id>
    <content type="html"><![CDATA[<p><code>Hoisting</code> is when JavaScript moves the definition of some code to the top of the closure.</p>

<p><a href="http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code/">Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css overflow]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/12/css-overflow/"/>
    <updated>2014-09-12T12:54:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/12/css-overflow</id>
    <content type="html"><![CDATA[<p>Valid values of attribute <code>overflow</code> are visible, hidden, scroll, auto, initial and inherit</p>

<p>It controls browser behavior if content overflows an element&rsquo;s box.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting an angularjs project with bower]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/12/angular-bower/"/>
    <updated>2014-09-12T10:53:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/12/angular-bower</id>
    <content type="html"><![CDATA[<p>First you need to install <code>npm</code> via <code>brew</code></p>

<p>Then run <code>npm install -g bower</code> as documented in <a href="http://bower.io/">bower websiter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[make iphone vibrate]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/10/make-iphone-vibrate/"/>
    <updated>2014-09-10T13:31:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/10/make-iphone-vibrate</id>
    <content type="html"><![CDATA[<p>Use these APIs to set the iphone to vibrate</p>

<pre><code>AudioServicesPlayAlertSound(kSystemSoundID_Vibrate);
AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
</code></pre>

<p>The first function plays a beep sound if the devices don’t support vibration. The second function on the other hand does nothing on unsupported devices.</p>

<p>if <code>AVRecorder</code> is running, iphone will not vibrate too.</p>

<p>Source: <a href="http://stackoverflow.com/questions/4724980/making-the-iphone-vibrate">Stackoverflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference between handling 'self' in Python and Swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/10/swift-can-be-very-pythonic/"/>
    <updated>2014-09-10T12:35:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/10/swift-can-be-very-pythonic</id>
    <content type="html"><![CDATA[<p>Take a look at this <code>swift</code> code (XCode6 Beta7)</p>

<pre><code>    class C {
            func name () -&gt; String {
                return "C"
            }
    }

    class D:C {
            override func name () -&gt; String {
                return "D"
            }
    }

    let c = C()
    println(c.name()) // print 'C'

    let d = D()
    println(d.name()) // print 'D' as expected

    println(C.name(d)()) // print 'D'! 
</code></pre>

<p>In python, the last case is different:</p>

<pre><code>    class C:
        def name(self):
            return 'C' 

    class D(C):
        def name(self):
            return 'D' 

    c = C() 
    print(c.name())  // print 'C' 

    d = D() 
    print(d.name())  // print 'D' 

    print(C.name(d)) // print 'C' 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngTouch]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/04/ngtouch/"/>
    <updated>2014-09-04T16:11:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/04/ngtouch</id>
    <content type="html"><![CDATA[<p>To introduce touch behaviour in angularjs-enabled mobile app, try this:</p>

<pre><code>&lt;script src="bower_components/angular-touch/angular-touch.js"&gt;&lt;/script&gt;
angular.module('myApp', ['ngTouch']) 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[semi-colon in swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/04/semi-colon-in-swift/"/>
    <updated>2014-09-04T14:52:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/04/semi-colon-in-swift</id>
    <content type="html"><![CDATA[<p>The perfered style of semi-colon placement in swift is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct Foo: SomeProtocol {}
</span><span class='line'>class Foo: SomeProtocol {}
</span><span class='line'>
</span><span class='line'>var x: Int
</span><span class='line'>func foo(x: Int) {}
</span><span class='line'>func bar(x: (y: Int) -> Int) -> Double {}
</span><span class='line'>let dict = ["key": value]</span></code></pre></td></tr></table></div></figure>


<p>i.e. No space before the semi-colon. One space after the semi-colon</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is tag fieldset?]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/01/what-is-tag-fieldset/"/>
    <updated>2014-09-01T09:40:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/01/what-is-tag-fieldset</id>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/9741328/why-do-we-need-a-fieldset-tag">From StackOverflow</a></p>

<p>The most obvious, practical example is:</p>

<pre><code>&lt;fieldset&gt;
    &lt;legend&gt;Colour&lt;/legend&gt;
    &lt;label&gt;&lt;input type="radio" name="colour" value="blue"&gt; Blue &lt;/label&gt;
    &lt;label&gt;&lt;input type="radio" name="colour" value="red"&gt; Red &lt;/label&gt;
    &lt;label&gt;&lt;input type="radio" name="colour" value="green"&gt; Green &lt;/label&gt;
&lt;/fieldset&gt;
</code></pre>

<p>This allows each radio button to be labeled while also providing a label for the group as a whole. This is especially important where assistive technology (such as a screen reader) is being used where the association of the controls and their legend cannot be implied by visual presentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 2.2]]></title>
    <link href="http://www.ahwkong.com/post/2014/08/29/ex-2-dot-2/"/>
    <updated>2014-08-29T14:59:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/08/29/ex-2-dot-2</id>
    <content type="html"><![CDATA[<p><strong>Exercise 2.2</strong> (Andersson [And91D]) In the worst case, member performs approximately 2d comparisons, where d is the depth of the tree. Rewrite member to take no more than d + 1 comparisons by keeping track of a candidate element that might be equal to the query element (say, the last element for which &lt; returned false or &lt; returned true) and checking for equality only when you hit the bottom of the tree.)</p>

<p><strong>Answer</strong></p>

<p>To test the example code, run these commands:</p>

<pre><code>erl -noshell -noinit -run ex2_2 test_insert -run init stop
erl -noshell -noinit -run ex2_2 test_member -run init stop
</code></pre>

<p>My erlang implementation actually does not have the same performance characteristic as stated in the question. The code in question is this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">fun</span> <span class="n">member</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">E</span><span class="o">)</span> <span class="o">=</span> <span class="bp">false</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">member</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">T</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">b</span><span class="o">))</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">If</span> <span class="nn">Element</span><span class="p">.</span><span class="n">lt</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="k">then</span> <span class="n">member</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">a</span><span class="o">)</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="nn">Element</span><span class="p">.</span><span class="n">lt</span> <span class="o">(</span><span class="n">y</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="k">then</span> <span class="n">member</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>        <span class="k">else</span> <span class="bp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>if</code> clause in the above function will cause the <code>Element.lt</code> to be executed twice per node visit in the worst case scenarios. Hence the 2 * d comparisons.</p>

<p>It does not really apply to my erlang version of code because pattern matching has shortcircuted the comparsion when there is a match. The comparsion is done by the <code>guard</code>. In a sense I cheated: I did not use a functor to compare the values. This enables me to use the pattern matching.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ex2_2</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">make_sample_tree</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">test_insert</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">test_traverse</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">test_member</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">treenode</span><span class="p">,</span> <span class="p">{</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">}).</span>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">tree</span><span class="p">,</span> <span class="p">{</span><span class="n">left</span><span class="p">,</span> <span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{},</span> <span class="n">right</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_node</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">TN</span> <span class="o">=</span> <span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">K</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="nv">V</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nv">TN</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_node</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">,</span> <span class="nv">LeftTree</span><span class="p">,</span> <span class="nv">RightTree</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">TN</span> <span class="o">=</span> <span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">K</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="nv">V</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nv">TN</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="nv">LeftTree</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="nv">RightTree</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">insert_tree_node</span><span class="p">(</span><span class="n">undefined</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">make_node</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">);</span>
</span><span class='line'><span class="nf">insert_tree_node</span><span class="p">(</span><span class="nl">#tree</span><span class="p">{</span><span class="n">left</span><span class="o">=</span><span class="nv">LT</span><span class="p">,</span> <span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">CurK</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="p">_</span><span class="nv">CurV</span><span class="p">},</span> <span class="n">right</span><span class="o">=</span><span class="p">_</span><span class="nv">RT</span><span class="p">}</span><span class="o">=</span><span class="nv">T</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">)</span> <span class="k">when</span> <span class="nv">K</span> <span class="o">&lt;</span> <span class="nv">CurK</span>  <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">LT1</span><span class="o">=</span><span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">LT</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T1</span><span class="o">=</span><span class="nv">T</span><span class="nl">#tree</span><span class="p">{</span><span class="n">left</span><span class="o">=</span><span class="nv">LT1</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T1</span><span class="p">;</span>
</span><span class='line'><span class="nf">insert_tree_node</span><span class="p">(</span><span class="nl">#tree</span><span class="p">{</span><span class="n">left</span><span class="o">=</span><span class="p">_</span><span class="nv">LT</span><span class="p">,</span> <span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">CurK</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="p">_</span><span class="nv">CurV</span><span class="p">},</span> <span class="n">right</span><span class="o">=</span><span class="nv">RT</span><span class="p">}</span><span class="o">=</span><span class="nv">T</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">)</span> <span class="k">when</span> <span class="nv">K</span> <span class="o">&gt;</span> <span class="nv">CurK</span>  <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">RT1</span><span class="o">=</span><span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">RT</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T1</span><span class="o">=</span><span class="nv">T</span><span class="nl">#tree</span><span class="p">{</span><span class="n">right</span><span class="o">=</span><span class="nv">RT1</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T1</span><span class="p">;</span>
</span><span class='line'><span class="c">% when K == CurK</span>
</span><span class='line'><span class="nf">insert_tree_node</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">_</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">)</span>  <span class="k">when</span> <span class="nb">is_record</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="n">tree</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">T</span><span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">value</span><span class="o">=</span><span class="nv">V</span><span class="p">}}.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Tree</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_record</span><span class="p">(</span><span class="nv">Tree</span><span class="p">,</span> <span class="n">tree</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">is_function</span><span class="p">(</span><span class="nv">F</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Tree</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span>
</span><span class='line'><span class="nf">traverse</span><span class="p">(_</span><span class="nv">F</span><span class="p">,</span> <span class="n">undefined</span><span class="p">,</span> <span class="p">_</span><span class="nv">D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="nf">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Tree</span><span class="p">,</span> <span class="nv">D</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_record</span><span class="p">(</span><span class="nv">Tree</span><span class="p">,</span> <span class="n">tree</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">is_function</span><span class="p">(</span><span class="nv">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="c">% F is a function that work on K and V</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Tree</span><span class="nl">#tree.left</span><span class="p">,</span> <span class="nv">D</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">F</span><span class="p">(</span><span class="nv">Tree</span><span class="nl">#tree.treenode#treenode.key</span><span class="p">,</span> <span class="nv">Tree</span><span class="nl">#tree.treenode#treenode.value</span><span class="p">,</span> <span class="nv">D</span><span class="p">),</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Tree</span><span class="nl">#tree.right</span><span class="p">,</span> <span class="nv">D</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">K</span><span class="p">}}</span><span class="o">=</span><span class="nv">Tree</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">found</span><span class="p">;</span>
</span><span class='line'><span class="nf">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">CurK</span><span class="p">}}</span><span class="o">=</span><span class="nv">Tree</span><span class="p">)</span> <span class="k">when</span> <span class="nv">K</span> <span class="o">&lt;</span> <span class="nv">CurK</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">% io:format(&quot;Compared for ~p~n&quot;, [K]),</span>
</span><span class='line'>    <span class="n">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">Tree</span><span class="nl">#tree.left</span><span class="p">);</span>
</span><span class='line'><span class="nf">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">CurK</span><span class="p">}}</span><span class="o">=</span><span class="nv">Tree</span><span class="p">)</span> <span class="k">when</span> <span class="nv">K</span> <span class="o">&gt;</span> <span class="nv">CurK</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">% io:format(&quot;Compared for ~p~n&quot;, [K]),</span>
</span><span class='line'>    <span class="n">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">Tree</span><span class="nl">#tree.right</span><span class="p">);</span>
</span><span class='line'><span class="nf">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="n">undefined</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">not_found</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">%% routines for testings</span>
</span><span class='line'><span class="c">%% </span>
</span><span class='line'><span class="nf">make_sample_tree</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Left</span> <span class="o">=</span> <span class="n">make_node</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">Right</span> <span class="o">=</span> <span class="n">make_node</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="n">make_node</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_sample_tree2</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="n">make_node</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T1</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T2</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T3</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T4</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T5</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T6</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T5</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T6</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">test_insert</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="n">make_sample_tree</span><span class="p">(),</span>
</span><span class='line'>    <span class="nv">T1</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;old </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">T</span><span class="p">]),</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;new </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">T1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">test_traverse</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">F</span> <span class="o">=</span> <span class="k">fun</span> <span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">,</span> <span class="p">_</span><span class="nv">D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;key:</span><span class="si">~p</span><span class="s"> val:</span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">])</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="n">make_sample_tree</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">T</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">test_member</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="n">make_sample_tree2</span><span class="p">(),</span>
</span><span class='line'>    <span class="nv">F</span> <span class="o">=</span> <span class="k">fun</span> <span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">,</span> <span class="nv">Depth</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">Indent</span> <span class="o">=</span> <span class="nn">string</span><span class="p">:</span><span class="nf">chars</span><span class="p">(</span><span class="sc">$\s</span><span class="p">,</span> <span class="nv">Depth</span><span class="o">*</span><span class="mi">4</span><span class="p">),</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~s</span><span class="s">key:</span><span class="si">~p</span><span class="s"> val:</span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Indent</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">])</span>
</span><span class='line'>        <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">T</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">R1</span> <span class="o">=</span> <span class="n">member</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="nv">T</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">R2</span> <span class="o">=</span> <span class="n">member</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">T</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;R1:</span><span class="si">~p</span><span class="s"> R2:</span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">R1</span><span class="p">,</span> <span class="nv">R2</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kUTTypeURL undefined]]></title>
    <link href="http://www.ahwkong.com/post/2014/08/29/kuttypeurl-undefined/"/>
    <updated>2014-08-29T11:08:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/08/29/kuttypeurl-undefined</id>
    <content type="html"><![CDATA[<p>Fixed by import <code>MobileCoreServices</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 2.1]]></title>
    <link href="http://www.ahwkong.com/post/2014/08/27/ex-1/"/>
    <updated>2014-08-27T10:02:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/08/27/ex-1</id>
    <content type="html"><![CDATA[<p><strong>Exercise 2.1</strong> Write a function suffixes of type a list &ndash;> a list of list that takes a list xs and returns a list of all the suffixes of xs in decreasing order of length. For example,</p>

<pre><code>suffixes [1,2,3,4] = [[1,2,3,4], [2,3,4], [3,4], [4], [ ] ]
</code></pre>

<p>Show that the resulting list of suffixes can be generated in O(n) time and represented in O(n) space.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">e2_1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">suffixes</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">suffixes</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">suffixes</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">suffixes</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">R</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">suffixes</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">[[</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">]|</span><span class="nv">R</span><span class="p">]);</span>
</span><span class='line'><span class="nf">suffixes</span><span class="p">([],</span> <span class="nv">R</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">([[]|</span><span class="nv">R</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html vs xhtml]]></title>
    <link href="http://www.ahwkong.com/post/2014/07/26/html-vs-xhtml/"/>
    <updated>2014-07-26T17:54:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/07/26/html-vs-xhtml</id>
    <content type="html"><![CDATA[<p>HTML is not case-sensitive but XHTML is</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[install mirage failed]]></title>
    <link href="http://www.ahwkong.com/post/2014/07/06/install-mirage-failed/"/>
    <updated>2014-07-06T21:26:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/07/06/install-mirage-failed</id>
    <content type="html"><![CDATA[

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ERROR] Due to some errors while processing optcomp.1.6, the following actions will NOT proceed:
</span><span class='line'> - install mirage.1.1.3
</span><span class='line'> - install ocplib-endian.0.7
</span><span class='line'> - install io-page.1.1.1
</span><span class='line'> - install mirage-types.1.1.3
</span><span class='line'> - install cstruct.1.3.0
</span><span class='line'>
</span><span class='line'>===== ERROR while installing optcomp.1.6 =====
</span><span class='line'>Could not get the source for optcomp.1.6:
</span><span class='line'># opam-version    1.1.1
</span><span class='line'># os              linux
</span><span class='line'>Cannot download https://opam.ocaml.org/archives/optcomp.1.6+opam.tar.gz, please check your connection settings.
</span><span class='line'>
</span><span class='line'>The former state can be restored with opam switch import -f "/home/antkong/.opam/system/backup/state-20140606112154.export"
</span><span class='line'>'opam install mirage' failed.</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
