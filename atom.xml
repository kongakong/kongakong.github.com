<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Timeline]]></title>
  <link href="http://www.ahwkong.com/atom.xml" rel="self"/>
  <link href="http://www.ahwkong.com/"/>
  <updated>2014-09-04T16:46:38+10:00</updated>
  <id>http://www.ahwkong.com/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ngTouch]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/04/ngtouch/"/>
    <updated>2014-09-04T16:11:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/04/ngtouch</id>
    <content type="html"><![CDATA[<p>To introduce touch behaviour in angularjs-enabled mobile app, try this:</p>

<pre><code>&lt;script src="bower_components/angular-touch/angular-touch.js"&gt;&lt;/script&gt;
angular.module('myApp', ['ngTouch']) 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[semi-colon in swift]]></title>
    <link href="http://www.ahwkong.com/post/2014/09/04/semi-colon-in-swift/"/>
    <updated>2014-09-04T14:52:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/09/04/semi-colon-in-swift</id>
    <content type="html"><![CDATA[<p>The perfered style of semi-colon placement in swift is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct Foo: SomeProtocol {}
</span><span class='line'>class Foo: SomeProtocol {}
</span><span class='line'>
</span><span class='line'>var x: Int
</span><span class='line'>func foo(x: Int) {}
</span><span class='line'>func bar(x: (y: Int) -> Int) -> Double {}
</span><span class='line'>let dict = ["key": value]</span></code></pre></td></tr></table></div></figure>


<p>i.e. No space before the semi-colon. One space after the semi-colon</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 2.2]]></title>
    <link href="http://www.ahwkong.com/post/2014/08/29/ex-2-dot-2/"/>
    <updated>2014-08-29T14:59:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/08/29/ex-2-dot-2</id>
    <content type="html"><![CDATA[<p><strong>Exercise 2.2</strong> (Andersson [And91D]) In the worst case, member performs approximately 2d comparisons, where d is the depth of the tree. Rewrite member to take no more than d + 1 comparisons by keeping track of a candidate element that might be equal to the query element (say, the last element for which &lt; returned false or &lt; returned true) and checking for equality only when you hit the bottom of the tree.)</p>

<p><strong>Answer</strong></p>

<p>To test the example code, run these commands:</p>

<pre><code>erl -noshell -noinit -run ex2_2 test_insert -run init stop
erl -noshell -noinit -run ex2_2 test_member -run init stop
</code></pre>

<p>My erlang implementation actually does not have the same performance characteristic as stated in the question. The code in question is this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">fun</span> <span class="n">member</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">E</span><span class="o">)</span> <span class="o">=</span> <span class="bp">false</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">member</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">T</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">b</span><span class="o">))</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">If</span> <span class="nn">Element</span><span class="p">.</span><span class="n">lt</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="k">then</span> <span class="n">member</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">a</span><span class="o">)</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="nn">Element</span><span class="p">.</span><span class="n">lt</span> <span class="o">(</span><span class="n">y</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="k">then</span> <span class="n">member</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>        <span class="k">else</span> <span class="bp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>if</code> clause in the above function will cause the <code>Element.lt</code> to be executed twice per node visit in the worst case scenarios. Hence the 2 * d comparisons.</p>

<p>It does not really apply to my erlang version of code because pattern matching has shortcircuted the comparsion when there is a match. The comparsion is done by the <code>guard</code>. In a sense I cheated: I did not use a functor to compare the values. This enables me to use the pattern matching.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ex2_2</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">make_sample_tree</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">test_insert</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">test_traverse</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">test_member</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">treenode</span><span class="p">,</span> <span class="p">{</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">}).</span>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">tree</span><span class="p">,</span> <span class="p">{</span><span class="n">left</span><span class="p">,</span> <span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{},</span> <span class="n">right</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_node</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">TN</span> <span class="o">=</span> <span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">K</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="nv">V</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nv">TN</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_node</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">,</span> <span class="nv">LeftTree</span><span class="p">,</span> <span class="nv">RightTree</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">TN</span> <span class="o">=</span> <span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">K</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="nv">V</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nv">TN</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="nv">LeftTree</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="nv">RightTree</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">insert_tree_node</span><span class="p">(</span><span class="n">undefined</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">make_node</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">);</span>
</span><span class='line'><span class="nf">insert_tree_node</span><span class="p">(</span><span class="nl">#tree</span><span class="p">{</span><span class="n">left</span><span class="o">=</span><span class="nv">LT</span><span class="p">,</span> <span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">CurK</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="p">_</span><span class="nv">CurV</span><span class="p">},</span> <span class="n">right</span><span class="o">=</span><span class="p">_</span><span class="nv">RT</span><span class="p">}</span><span class="o">=</span><span class="nv">T</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">)</span> <span class="k">when</span> <span class="nv">K</span> <span class="o">&lt;</span> <span class="nv">CurK</span>  <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">LT1</span><span class="o">=</span><span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">LT</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T1</span><span class="o">=</span><span class="nv">T</span><span class="nl">#tree</span><span class="p">{</span><span class="n">left</span><span class="o">=</span><span class="nv">LT1</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T1</span><span class="p">;</span>
</span><span class='line'><span class="nf">insert_tree_node</span><span class="p">(</span><span class="nl">#tree</span><span class="p">{</span><span class="n">left</span><span class="o">=</span><span class="p">_</span><span class="nv">LT</span><span class="p">,</span> <span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">CurK</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="p">_</span><span class="nv">CurV</span><span class="p">},</span> <span class="n">right</span><span class="o">=</span><span class="nv">RT</span><span class="p">}</span><span class="o">=</span><span class="nv">T</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">)</span> <span class="k">when</span> <span class="nv">K</span> <span class="o">&gt;</span> <span class="nv">CurK</span>  <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">RT1</span><span class="o">=</span><span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">RT</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T1</span><span class="o">=</span><span class="nv">T</span><span class="nl">#tree</span><span class="p">{</span><span class="n">right</span><span class="o">=</span><span class="nv">RT1</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">T1</span><span class="p">;</span>
</span><span class='line'><span class="c">% when K == CurK</span>
</span><span class='line'><span class="nf">insert_tree_node</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">_</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">)</span>  <span class="k">when</span> <span class="nb">is_record</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="n">tree</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">T</span><span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">value</span><span class="o">=</span><span class="nv">V</span><span class="p">}}.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Tree</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_record</span><span class="p">(</span><span class="nv">Tree</span><span class="p">,</span> <span class="n">tree</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">is_function</span><span class="p">(</span><span class="nv">F</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Tree</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span>
</span><span class='line'><span class="nf">traverse</span><span class="p">(_</span><span class="nv">F</span><span class="p">,</span> <span class="n">undefined</span><span class="p">,</span> <span class="p">_</span><span class="nv">D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="nf">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Tree</span><span class="p">,</span> <span class="nv">D</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_record</span><span class="p">(</span><span class="nv">Tree</span><span class="p">,</span> <span class="n">tree</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">is_function</span><span class="p">(</span><span class="nv">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="c">% F is a function that work on K and V</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Tree</span><span class="nl">#tree.left</span><span class="p">,</span> <span class="nv">D</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">F</span><span class="p">(</span><span class="nv">Tree</span><span class="nl">#tree.treenode#treenode.key</span><span class="p">,</span> <span class="nv">Tree</span><span class="nl">#tree.treenode#treenode.value</span><span class="p">,</span> <span class="nv">D</span><span class="p">),</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Tree</span><span class="nl">#tree.right</span><span class="p">,</span> <span class="nv">D</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">K</span><span class="p">}}</span><span class="o">=</span><span class="nv">Tree</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">found</span><span class="p">;</span>
</span><span class='line'><span class="nf">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">CurK</span><span class="p">}}</span><span class="o">=</span><span class="nv">Tree</span><span class="p">)</span> <span class="k">when</span> <span class="nv">K</span> <span class="o">&lt;</span> <span class="nv">CurK</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">% io:format(&quot;Compared for ~p~n&quot;, [K]),</span>
</span><span class='line'>    <span class="n">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">Tree</span><span class="nl">#tree.left</span><span class="p">);</span>
</span><span class='line'><span class="nf">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nl">#tree</span><span class="p">{</span><span class="n">treenode</span><span class="o">=</span><span class="nl">#treenode</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">CurK</span><span class="p">}}</span><span class="o">=</span><span class="nv">Tree</span><span class="p">)</span> <span class="k">when</span> <span class="nv">K</span> <span class="o">&gt;</span> <span class="nv">CurK</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">% io:format(&quot;Compared for ~p~n&quot;, [K]),</span>
</span><span class='line'>    <span class="n">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">Tree</span><span class="nl">#tree.right</span><span class="p">);</span>
</span><span class='line'><span class="nf">member</span><span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="n">undefined</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">not_found</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">%% routines for testings</span>
</span><span class='line'><span class="c">%% </span>
</span><span class='line'><span class="nf">make_sample_tree</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Left</span> <span class="o">=</span> <span class="n">make_node</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">Right</span> <span class="o">=</span> <span class="n">make_node</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="n">make_node</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_sample_tree2</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="n">make_node</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T1</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T2</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T3</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T4</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T5</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T6</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T5</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">T6</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">test_insert</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="n">make_sample_tree</span><span class="p">(),</span>
</span><span class='line'>    <span class="nv">T1</span> <span class="o">=</span> <span class="n">insert_tree_node</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;old </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">T</span><span class="p">]),</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;new </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">T1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">test_traverse</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">F</span> <span class="o">=</span> <span class="k">fun</span> <span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">,</span> <span class="p">_</span><span class="nv">D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;key:</span><span class="si">~p</span><span class="s"> val:</span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">])</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="n">make_sample_tree</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">T</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">test_member</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">T</span> <span class="o">=</span> <span class="n">make_sample_tree2</span><span class="p">(),</span>
</span><span class='line'>    <span class="nv">F</span> <span class="o">=</span> <span class="k">fun</span> <span class="p">(</span><span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">,</span> <span class="nv">Depth</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">Indent</span> <span class="o">=</span> <span class="nn">string</span><span class="p">:</span><span class="nf">chars</span><span class="p">(</span><span class="sc">$\s</span><span class="p">,</span> <span class="nv">Depth</span><span class="o">*</span><span class="mi">4</span><span class="p">),</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~s</span><span class="s">key:</span><span class="si">~p</span><span class="s"> val:</span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Indent</span><span class="p">,</span> <span class="nv">K</span><span class="p">,</span> <span class="nv">V</span><span class="p">])</span>
</span><span class='line'>        <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">T</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">R1</span> <span class="o">=</span> <span class="n">member</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="nv">T</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">R2</span> <span class="o">=</span> <span class="n">member</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">T</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;R1:</span><span class="si">~p</span><span class="s"> R2:</span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">R1</span><span class="p">,</span> <span class="nv">R2</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kUTTypeURL undefined]]></title>
    <link href="http://www.ahwkong.com/post/2014/08/29/kuttypeurl-undefined/"/>
    <updated>2014-08-29T11:08:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/08/29/kuttypeurl-undefined</id>
    <content type="html"><![CDATA[<p>Fixed by import <code>MobileCoreServices</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 2.1]]></title>
    <link href="http://www.ahwkong.com/post/2014/08/27/ex-1/"/>
    <updated>2014-08-27T10:02:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/08/27/ex-1</id>
    <content type="html"><![CDATA[<p><strong>Exercise 2.1</strong> Write a function suffixes of type a list &ndash;> a list of list that takes a list xs and returns a list of all the suffixes of xs in decreasing order of length. For example,</p>

<pre><code>suffixes [1,2,3,4] = [[1,2,3,4], [2,3,4], [3,4], [4], [ ] ]
</code></pre>

<p>Show that the resulting list of suffixes can be generated in O(n) time and represented in O(n) space.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">e2_1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">suffixes</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">suffixes</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">suffixes</span><span class="p">(</span><span class="nv">L</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">suffixes</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">R</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">suffixes</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">[[</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">]|</span><span class="nv">R</span><span class="p">]);</span>
</span><span class='line'><span class="nf">suffixes</span><span class="p">([],</span> <span class="nv">R</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">([[]|</span><span class="nv">R</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html vs xhtml]]></title>
    <link href="http://www.ahwkong.com/post/2014/07/26/html-vs-xhtml/"/>
    <updated>2014-07-26T17:54:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/07/26/html-vs-xhtml</id>
    <content type="html"><![CDATA[<p>HTML is not case-sensitive but XHTML is</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[install mirage failed]]></title>
    <link href="http://www.ahwkong.com/post/2014/07/06/install-mirage-failed/"/>
    <updated>2014-07-06T21:26:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/07/06/install-mirage-failed</id>
    <content type="html"><![CDATA[

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ERROR] Due to some errors while processing optcomp.1.6, the following actions will NOT proceed:
</span><span class='line'> - install mirage.1.1.3
</span><span class='line'> - install ocplib-endian.0.7
</span><span class='line'> - install io-page.1.1.1
</span><span class='line'> - install mirage-types.1.1.3
</span><span class='line'> - install cstruct.1.3.0
</span><span class='line'>
</span><span class='line'>===== ERROR while installing optcomp.1.6 =====
</span><span class='line'>Could not get the source for optcomp.1.6:
</span><span class='line'># opam-version    1.1.1
</span><span class='line'># os              linux
</span><span class='line'>Cannot download https://opam.ocaml.org/archives/optcomp.1.6+opam.tar.gz, please check your connection settings.
</span><span class='line'>
</span><span class='line'>The former state can be restored with opam switch import -f "/home/antkong/.opam/system/backup/state-20140606112154.export"
</span><span class='line'>'opam install mirage' failed.</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[opam install log]]></title>
    <link href="http://www.ahwkong.com/post/2014/07/06/opam/"/>
    <updated>2014-07-06T21:03:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/07/06/opam</id>
    <content type="html"><![CDATA[<p>Adding a repository for ocaml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>precise32:~$ sudo add-apt-repository ppa:avsm/ppa
</span><span class='line'>You are about to add the following PPA to your system:
</span><span class='line'> Latest stable versions of OCaml and OPAM.
</span><span class='line'> More info: https://launchpad.net/~avsm/+archive/ppa
</span><span class='line'>Press [ENTER] to continue or ctrl-c to cancel adding it
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>gpg: keyring `/tmp/tmpU270CK/secring.gpg' created
</span><span class='line'>gpg: keyring `/tmp/tmpU270CK/pubring.gpg' created
</span><span class='line'>gpg: requesting key 61707B09 from hkp server keyserver.ubuntu.com
</span><span class='line'>gpg: /tmp/tmpU270CK/trustdb.gpg: trustdb created
</span><span class='line'>gpg: key 61707B09: public key "Launchpad PPA for Anil Madhavapeddy" imported
</span><span class='line'>gpg: Total number processed: 1
</span><span class='line'>gpg:               imported: 1  (RSA: 1)
</span><span class='line'>OK</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew problem]]></title>
    <link href="http://www.ahwkong.com/post/2014/04/15/homebrew-problem/"/>
    <updated>2014-04-15T17:32:00+10:00</updated>
    <id>http://www.ahwkong.com/post/2014/04/15/homebrew-problem</id>
    <content type="html"><![CDATA[<p>Homebrew error message due to incomplete installation of XCode</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</span><span class='line'>==> This script will install:
</span><span class='line'>/usr/local/bin/brew
</span><span class='line'>/usr/local/Library/...
</span><span class='line'>/usr/local/share/man/man1/brew.1
</span><span class='line'>
</span><span class='line'>Press RETURN to continue or any other key to abort
</span><span class='line'>==> /usr/bin/sudo /bin/mkdir /usr/local
</span><span class='line'>
</span><span class='line'>WARNING: Improper use of the sudo command could lead to data loss
</span><span class='line'>or the deletion of important system files. Please double-check your
</span><span class='line'>typing when using sudo. Type "man sudo" for more information.
</span><span class='line'>
</span><span class='line'>To proceed, enter your password, or type Ctrl-C to abort.
</span><span class='line'>
</span><span class='line'>Password:
</span><span class='line'>==> /usr/bin/sudo /bin/chmod g+rwx /usr/local
</span><span class='line'>==> /usr/bin/sudo /usr/bin/chgrp admin /usr/local
</span><span class='line'>==> /usr/bin/sudo /bin/mkdir /Library/Caches/Homebrew
</span><span class='line'>==> /usr/bin/sudo /bin/chmod g+rwx /Library/Caches/Homebrew
</span><span class='line'>==> Installing the Command Line Tools (expect a GUI popup):
</span><span class='line'>==> /usr/bin/sudo /usr/bin/xcode-select --install
</span><span class='line'>xcode-select: note: install requested for command line developer tools
</span><span class='line'>Press any key when the installation has completed.
</span><span class='line'>==> Downloading and installing Homebrew...
</span><span class='line'>remote: Counting objects: 166311, done.
</span><span class='line'>remote: Compressing objects: 100% (46739/46739), done.
</span><span class='line'>Receiving objects:  76% (126773/166311), 23.62 MiB | 83.00 KiB/s    
</span><span class='line'>error: RPC failed; result=56, HTTP code = 200
</span><span class='line'>fatal: The remote end hung up unexpectedly
</span><span class='line'>fatal: early EOF
</span><span class='line'>fatal: index-pack failed
</span><span class='line'>Failed during: git fetch origin master:refs/remotes/origin/master -n
</span><span class='line'>$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</span><span class='line'>It appears Homebrew is already installed. If your intent is to reinstall you
</span><span class='line'>should do the following before running this installer again:
</span><span class='line'>    rm -rf /usr/local/Cellar /usr/local/.git && brew cleanup</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[design pattern]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/31/design-pattern/"/>
    <updated>2014-03-31T16:43:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/31/design-pattern</id>
    <content type="html"><![CDATA[<p>From p63 of <a href="http://norvig.com/design-patterns/design-patterns.pdf">the Design Pattern Slide</a> by Peter Norvig.</p>

<p>It sounds like a very good advise.</p>

<h3>Design Strategy: English Translation</h3>

<p>-  To insure that your program says what you mean:</p>

<p>(1) Start with English description</p>

<p>(2) Write code from description</p>

<p>(3) Translate code back to English; compare to (1)</p>

<p>Example: (1), (2) from a Lisp textbook
(1) “Given a list of monsters, determine the number
 that are swarms.”</p>

<p>(2) See next slide</p>

<p>(3) “Given a list of monsters, produce a 1 for a
 monster whose type is swarm, and a 0 for others.
 Then add up the numbers.”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[9x9 suduko solver]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/24/9x9-suduko-solver/"/>
    <updated>2014-03-24T07:15:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/24/9x9-suduko-solver</id>
    <content type="html"><![CDATA[<p>Based on the <a href="post/2014/03/16/2x2-suduko-solver">previous version</a></p>

<p>It takes advantage of the parameter pattern matching of erlang, but not much else. There is a lot of room for improvement.</p>

<figure class='code'><figcaption><span>sudoku9x9  linenos:true (sudoku9x9.erl)</span> <a href='http://www.ahwkong.com/downloads/code/erlang/sudoku9x9.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">sudoku9x9</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span><span class="n">include_lib</span><span class="p">(</span><span class="s">&quot;eunit/include/eunit.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">seed_matrix</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">matrix_ans</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">run</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">solve</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">take_row_and_column</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">pick_num</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="n">pos_to_xy</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">is_well_formed</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">SIDELEN</span><span class="p">,</span> <span class="mi">9</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">%% matrix representation</span>
</span><span class='line'><span class="nf">seed_matrix</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="nf">matrix_ans</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">pos_to_xy</span><span class="p">(</span><span class="nv">Pos</span><span class="p">,</span> <span class="nv">Len</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Pos</span> <span class="ow">rem</span> <span class="nv">Len</span> <span class="o">=:=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{(</span><span class="nv">Pos</span> <span class="ow">div</span> <span class="nv">Len</span><span class="p">),</span> <span class="nv">Len</span><span class="p">};</span>
</span><span class='line'><span class="nf">pos_to_xy</span><span class="p">(</span><span class="nv">Pos</span><span class="p">,</span> <span class="nv">Len</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{(</span><span class="nv">Pos</span> <span class="ow">div</span> <span class="nv">Len</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Pos</span> <span class="ow">rem</span> <span class="nv">Len</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">take_row_and_column</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">% io:format(&quot;take_row_and_column: ~p~n&quot;, [AnsMatrix]),</span>
</span><span class='line'>    <span class="nv">RowVector</span> <span class="o">=</span> <span class="p">[</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">((</span><span class="nv">R</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*?</span><span class="nv">SIDELEN</span><span class="o">+</span><span class="nv">X</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">)</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">?</span><span class="nv">SIDELEN</span><span class="p">)],</span>
</span><span class='line'>    <span class="nv">ColVector</span> <span class="o">=</span> <span class="p">[</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">((</span><span class="nv">X</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*?</span><span class="nv">SIDELEN</span><span class="o">+</span><span class="nv">C</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">)</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">?</span><span class="nv">SIDELEN</span><span class="p">)],</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">RowVector</span><span class="p">,</span> <span class="nv">ColVector</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% pick a number to test for coordinate x,y</span>
</span><span class='line'><span class="nf">pick_num</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">,</span> <span class="nv">StartFromThisNum</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">RV</span><span class="p">,</span> <span class="nv">CV</span><span class="p">}</span> <span class="o">=</span> <span class="n">take_row_and_column</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">),</span>
</span><span class='line'>    <span class="n">pick_num2</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">RV</span><span class="p">,</span> <span class="nv">CV</span><span class="p">,</span> <span class="nv">StartFromThisNum</span><span class="p">,</span> <span class="o">?</span><span class="nv">SIDELEN</span><span class="p">).</span>
</span><span class='line'><span class="nf">pick_num2</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">RV</span><span class="p">,</span> <span class="nv">CV</span><span class="p">,</span> <span class="nv">Num</span><span class="p">,</span> <span class="nv">Bound</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Num</span> <span class="o">=&lt;</span> <span class="nv">Bound</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">F</span> <span class="o">=</span> <span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">X</span> <span class="o">==</span> <span class="nv">Num</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">InRow</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">any</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">RV</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">InCol</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">any</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">CV</span><span class="p">),</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">{</span> <span class="nv">InRow</span><span class="p">,</span> <span class="nv">InCol</span> <span class="p">}</span> <span class="k">of</span>
</span><span class='line'>  <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="n">false</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Num</span><span class="p">};</span>
</span><span class='line'>  <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">pick_num2</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">RV</span><span class="p">,</span> <span class="nv">CV</span><span class="p">,</span> <span class="nv">Num</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Bound</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">pick_num2</span><span class="p">(_</span><span class="nv">R</span><span class="p">,</span> <span class="p">_</span><span class="nv">C</span><span class="p">,</span> <span class="p">_</span><span class="nv">RV</span><span class="p">,</span> <span class="p">_</span><span class="nv">CV</span><span class="p">,</span> <span class="p">_</span><span class="nv">Num</span><span class="p">,</span> <span class="p">_</span><span class="nv">Bound</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">err</span><span class="p">,</span> <span class="mi">0</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>     <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">24</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>     <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">24</span><span class="p">},</span> <span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">27</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">48</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>     <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">24</span><span class="p">},</span> <span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">27</span><span class="p">},</span> <span class="p">{</span><span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">51</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>     <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">24</span><span class="p">},</span> <span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">27</span><span class="p">},</span> <span class="p">{</span><span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">},</span> <span class="p">{</span><span class="mi">31</span><span class="p">,</span> <span class="mi">51</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">54</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">24</span><span class="p">},</span> <span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">27</span><span class="p">},</span> <span class="p">{</span><span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">},</span> <span class="p">{</span><span class="mi">31</span><span class="p">,</span> <span class="mi">51</span><span class="p">},</span> <span class="p">{</span><span class="mi">34</span><span class="p">,</span> <span class="mi">54</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">75</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">24</span><span class="p">},</span> <span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">27</span><span class="p">},</span> <span class="p">{</span><span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">},</span> <span class="p">{</span><span class="mi">31</span><span class="p">,</span> <span class="mi">51</span><span class="p">},</span> <span class="p">{</span><span class="mi">34</span><span class="p">,</span> <span class="mi">54</span><span class="p">},</span> <span class="p">{</span><span class="mi">55</span><span class="p">,</span> <span class="mi">75</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">78</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">24</span><span class="p">},</span> <span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">27</span><span class="p">},</span> <span class="p">{</span><span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">},</span> <span class="p">{</span><span class="mi">31</span><span class="p">,</span> <span class="mi">51</span><span class="p">},</span> <span class="p">{</span><span class="mi">34</span><span class="p">,</span> <span class="mi">54</span><span class="p">},</span> <span class="p">{</span><span class="mi">55</span><span class="p">,</span> <span class="mi">75</span><span class="p">},</span> <span class="p">{</span><span class="mi">58</span><span class="p">,</span> <span class="mi">78</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">81</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">24</span><span class="p">},</span> <span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">27</span><span class="p">},</span> <span class="p">{</span><span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">},</span> <span class="p">{</span><span class="mi">31</span><span class="p">,</span> <span class="mi">51</span><span class="p">},</span> <span class="p">{</span><span class="mi">34</span><span class="p">,</span> <span class="mi">54</span><span class="p">},</span> <span class="p">{</span><span class="mi">55</span><span class="p">,</span> <span class="mi">75</span><span class="p">},</span> <span class="p">{</span><span class="mi">58</span><span class="p">,</span> <span class="mi">78</span><span class="p">},</span> <span class="p">{</span><span class="mi">61</span> <span class="p">,</span><span class="mi">81</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(_,_)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">no</span><span class="p">,</span> <span class="p">[]}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_well_formed</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="nv">Pts</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">Pts</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">F</span> <span class="o">=</span> <span class="k">fun</span><span class="p">({</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="n">is_well_formed_checksum</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">)</span> <span class="ow">and</span> <span class="n">is_well_formed_uniq</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nn">lists</span><span class="p">:</span><span class="nf">all</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Pts</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_well_formed_checksum</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="mi">45</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed_checksum</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">28</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">37</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">38</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">39</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">46</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">47</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">48</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="mi">45</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed_checksum</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">75</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">55</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">56</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">57</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">65</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">66</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">73</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">74</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">75</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="mi">45</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed_checksum</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">22</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="mi">45</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed_checksum</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">51</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">33</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">41</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">49</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">51</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="mi">45</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed_checksum</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">78</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">58</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">59</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">67</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">68</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">69</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">76</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">77</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">78</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="mi">45</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed_checksum</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">27</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">26</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="mi">45</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed_checksum</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">54</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">34</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">35</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">36</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">43</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">44</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">52</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">53</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">54</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="mi">45</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed_checksum</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">81</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">61</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">62</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">63</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">70</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">71</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">72</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">79</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">81</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="mi">45</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed_checksum</span><span class="p">(_,</span> <span class="p">_,</span> <span class="p">_)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">false</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_well_formed_uniq</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="o">==</span><span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">([</span><span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span> <span class="nv">M</span><span class="p">)]);</span>
</span><span class='line'><span class="nf">is_well_formed_uniq</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="o">==</span><span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">([</span><span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">28</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">37</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">38</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">39</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">46</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">47</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">48</span><span class="p">,</span> <span class="nv">M</span><span class="p">)]);</span>
</span><span class='line'><span class="nf">is_well_formed_uniq</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">75</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="o">==</span><span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">([</span><span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">55</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">56</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">57</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">65</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">66</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">73</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">74</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">75</span><span class="p">,</span> <span class="nv">M</span><span class="p">)]);</span>
</span><span class='line'><span class="nf">is_well_formed_uniq</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="o">==</span><span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">([</span><span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">22</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="nv">M</span><span class="p">)]);</span>
</span><span class='line'><span class="nf">is_well_formed_uniq</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">51</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="o">==</span><span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">([</span><span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">33</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">41</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">49</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">51</span><span class="p">,</span> <span class="nv">M</span><span class="p">)]);</span>
</span><span class='line'><span class="nf">is_well_formed_uniq</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">78</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="o">==</span><span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">([</span><span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">58</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">59</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">67</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">68</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">69</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">76</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">77</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">78</span><span class="p">,</span> <span class="nv">M</span><span class="p">)]);</span>
</span><span class='line'><span class="nf">is_well_formed_uniq</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">27</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="o">==</span><span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">([</span><span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">26</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span> <span class="nv">M</span><span class="p">)]);</span>
</span><span class='line'><span class="nf">is_well_formed_uniq</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">54</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="o">==</span><span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">([</span><span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">34</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">35</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">36</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">43</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">44</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">52</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">53</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">54</span><span class="p">,</span> <span class="nv">M</span><span class="p">)]);</span>
</span><span class='line'><span class="nf">is_well_formed_uniq</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">81</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="o">==</span><span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">([</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">61</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">62</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">63</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">70</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">71</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">72</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">79</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">81</span><span class="p">,</span> <span class="nv">M</span><span class="p">)]);</span>
</span><span class='line'><span class="nf">is_well_formed_uniq</span><span class="p">(_,</span> <span class="p">_,</span> <span class="p">_)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">false</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">%% round() is needed to convert it to integer</span>
</span><span class='line'>    <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">Seed</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">?</span><span class="nv">SIDELEN</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">solve_backtrack</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="p">_</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="p">_</span><span class="nv">Begin</span><span class="p">,</span> <span class="p">_</span><span class="nv">Rest</span><span class="p">,</span> <span class="p">_</span><span class="nv">LastNum</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">[])</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">Seed</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">[]);</span> <span class="c">% initial step</span>
</span><span class='line'><span class="nf">solve_backtrack</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="p">_</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">,</span> <span class="p">_</span><span class="nv">Rest</span><span class="p">,</span> <span class="p">_</span><span class="nv">LastNum</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">[</span><span class="nv">LastStep</span><span class="p">|</span><span class="nv">Tail</span><span class="p">])</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">LasPosInSeed</span><span class="p">,</span> <span class="nv">LastPosInSeedNum</span><span class="p">}</span> <span class="o">=</span> <span class="nv">LastStep</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">PrevAns</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Ans</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">LasPosInSeed</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">Rest</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">LasPosInSeed</span><span class="p">,</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Seed</span><span class="p">)</span><span class="o">-</span><span class="nv">LasPosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">LasPosInSeed</span><span class="p">,</span> <span class="nv">PrevAns</span><span class="p">,</span> <span class="nv">Rest</span><span class="p">,</span> <span class="nv">LastPosInSeedNum</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Tail</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">solve</span><span class="p">(_</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">EndPos</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">,</span> <span class="p">[],</span> <span class="p">_,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">_</span><span class="nv">Steps</span><span class="p">)</span> <span class="k">when</span> <span class="nv">EndPos</span> <span class="o">==</span> <span class="nv">SideLen</span> <span class="o">*</span> <span class="nv">SideLen</span> <span class="o">+</span> <span class="mi">1</span>  <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">%% pass the end post</span>
</span><span class='line'>    <span class="nv">Ans</span><span class="p">;</span>
</span><span class='line'><span class="nf">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Rest</span><span class="p">],</span> <span class="nv">LastNum</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Steps</span><span class="p">)</span> <span class="k">when</span> <span class="nv">H</span> <span class="o">=:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">}</span> <span class="o">=</span> <span class="n">pos_to_xy</span><span class="p">(</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">CurrentMatrix</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Ans</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">++</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="p">,</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Seed</span><span class="p">)</span><span class="o">-</span><span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="c">% io:format(&quot;Working on matrix ~p~n&quot;, [CurrentMatrix]),</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">pick_num</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">CurrentMatrix</span><span class="p">,</span> <span class="nv">LastNum</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">NewH</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">is_check_point</span><span class="p">(</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>      <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="nv">Pts</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="nv">ProposedMatrix</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Ans</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">++</span> <span class="p">[</span><span class="nv">NewH</span><span class="p">]</span> <span class="o">++</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Seed</span><span class="p">)</span><span class="o">-</span><span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">is_well_formed</span><span class="p">(</span><span class="nv">ProposedMatrix</span><span class="p">,</span> <span class="nv">Pts</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>          <span class="n">true</span> <span class="o">-&gt;</span> <span class="c">%% move on</span>
</span><span class='line'>              <span class="c">% io:format(&quot;Got it ~p. Next pos ~p~n&quot;, [NewH, PosInSeed+1]),</span>
</span><span class='line'>              <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Ans</span><span class="o">++</span><span class="p">[</span><span class="nv">NewH</span><span class="p">],</span> <span class="nv">Rest</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">[{</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">NewH</span><span class="p">}]</span><span class="o">++</span><span class="nv">Steps</span><span class="p">);</span>
</span><span class='line'>          <span class="n">false</span> <span class="o">-&gt;</span> <span class="c">%% backtraked</span>
</span><span class='line'>              <span class="c">% io:format(&quot;backtracked (1) at ~p. Tried ~p at (~p,~p)~n&quot;, [ PosInSeed, NewH, R, C ]),</span>
</span><span class='line'>              <span class="n">solve_backtrack</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">]</span><span class="o">++</span><span class="nv">Rest</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Steps</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span><span class="p">;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">no</span><span class="p">,</span> <span class="p">_}</span> <span class="o">-&gt;</span> <span class="c">% continue</span>
</span><span class='line'>          <span class="c">% io:format(&quot;backtracked (2) at ~p. Tried ~p at (~p,~p)~n&quot;, [ PosInSeed, NewH, R, C ]),</span>
</span><span class='line'>          <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Ans</span><span class="o">++</span><span class="p">[</span><span class="nv">NewH</span><span class="p">],</span> <span class="nv">Rest</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">[{</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">NewH</span><span class="p">}]</span><span class="o">++</span><span class="nv">Steps</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span><span class="p">;</span>
</span><span class='line'>      <span class="p">_</span> <span class="o">-&gt;</span> <span class="c">%% backtracked</span>
</span><span class='line'>      <span class="c">% io:format(&quot;backtracked (3) at ~p. No soln at (~p,~p)~n&quot;, [ PosInSeed, R, C ]),</span>
</span><span class='line'>            <span class="n">solve_backtrack</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">]</span><span class="o">++</span><span class="nv">Rest</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Steps</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">Begin</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Rest</span><span class="p">],</span> <span class="p">_</span><span class="nv">TriedNumAtThisPos</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Steps</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">%% seeded value, keep moving on</span>
</span><span class='line'>    <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Begin</span> <span class="o">++</span> <span class="p">[</span><span class="nv">H</span><span class="p">],</span> <span class="nv">Rest</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Steps</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">run</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Ans</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">seed_matrix</span><span class="p">()),</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Ans </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Ans</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">unit_test</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pos_to_xy</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">}),</span>
</span><span class='line'>     <span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pos_to_xy</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">}),</span>
</span><span class='line'>     <span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pos_to_xy</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}),</span>
</span><span class='line'>     <span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pick_num2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="mi">2</span><span class="p">}),</span>
</span><span class='line'>     <span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pick_num2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="n">err</span><span class="p">,</span> <span class="mi">0</span><span class="p">}),</span>
</span><span class='line'>     <span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pick_num2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="n">err</span><span class="p">,</span> <span class="mi">0</span><span class="p">})</span>
</span><span class='line'>    <span class="p">].</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress deploy rejected]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/22/octopress-deploy-rejected/"/>
    <updated>2014-03-22T22:07:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/22/octopress-deploy-rejected</id>
    <content type="html"><![CDATA[<p>Got this error when running &lsquo;rake deploy&rsquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Pushing generated _deploy website
</span><span class='line'>Counting objects: 9767, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (5297/5297), done.
</span><span class='line'>Writing objects: 100% (7245/7245), 3.98 MiB | 121.00 KiB/s, done.
</span><span class='line'>Total 7245 (delta 3406), reused 2619 (delta 423)
</span><span class='line'>remote: error: GH001: Large files detected.
</span><span class='line'>remote: error: Trace: 2cb44393c3f81f907b200d71379dc45c
</span><span class='line'>remote: error: See http://git.io/iEPt8g for more information.
</span><span class='line'>remote: error: File downloads/code/erlang/out3.log is 122.48 MB; this exceeds GitHub's file size limit of 100 MB
</span><span class='line'>To git@github.com:kongakong/kongakong.github.com
</span><span class='line'> ! [remote rejected] master -> master (pre-receive hook declined)
</span><span class='line'>error: failed to push some refs to 'git@github.com:kongakong/kongakong.github.com'</span></code></pre></td></tr></table></div></figure>


<p>It is because I have left a log file in the downloads/code folder. Although I did not check in the file, it is copied into the _deploy folder and get committed for deployment.</p>

<p>Here is a solution:</p>

<p>1) Make sure the unwanted file is removed</p>

<p>2) Add <code>*.log</code> to <strong>.gitignore</strong> to permanently ignore this file type.</p>

<p>3) Download <a href="http://rtyley.github.io/bfg-repo-cleaner/"><code>bfg</code></a> to remove the redundant, big files in the <strong>_deploy</strong> folder</p>

<p>Here is the partial output from <code>bfg</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>These are your protected commits, and so their contents will NOT be altered:
</span><span class='line'>
</span><span class='line'> * commit d8b90a41 (protected by 'HEAD')
</span><span class='line'>
</span><span class='line'>Cleaning
</span><span class='line'>--------
</span><span class='line'>
</span><span class='line'>Found 910 commits
</span><span class='line'>Cleaning commits:       100% (910/910)
</span><span class='line'>Cleaning commits completed in 3,051 ms.
</span><span class='line'>
</span><span class='line'>Updating 1 Ref
</span><span class='line'>--------------
</span><span class='line'>
</span><span class='line'>    Ref                 Before     After   
</span><span class='line'>    ---------------------------------------
</span><span class='line'>    refs/heads/master | d8b90a41 | 1c0ad187
</span><span class='line'>
</span><span class='line'>Updating references:    100% (1/1)
</span><span class='line'>...Ref update completed in 16 ms.
</span><span class='line'>
</span><span class='line'>Commit Tree-Dirt History
</span><span class='line'>------------------------
</span><span class='line'>
</span><span class='line'>    Earliest                                              Latest
</span><span class='line'>    |                                                          |
</span><span class='line'>    ...........................................................D
</span><span class='line'>
</span><span class='line'>    D = dirty commits (file tree fixed)
</span><span class='line'>    m = modified commits (commit message or parents changed)
</span><span class='line'>    . = clean commits (no changes to file tree)
</span><span class='line'>
</span><span class='line'>                            Before     After   
</span><span class='line'>    -------------------------------------------
</span><span class='line'>    First modified commit | 6725709a | f2971f05
</span><span class='line'>    Last dirty commit     | cbc09c38 | 774bb768
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>In total, 14 object ids were changed - a record of these will be written to:
</span><span class='line'>
</span><span class='line'>    /Users/antkong/octopress/_deploy.bfg-report/2014-03-22T21-03/object-id-map.old-new.txt
</span><span class='line'>
</span><span class='line'>BFG run is complete!</span></code></pre></td></tr></table></div></figure>


<p>4) Now you can run the <code>rake deploy</code> again</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4x4 suduko solver in erlang]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/16/2x2-suduko-solver/"/>
    <updated>2014-03-16T17:05:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/16/2x2-suduko-solver</id>
    <content type="html"><![CDATA[<p>Very crappy code written in a couple of hours.</p>

<p>It implements backtracking in a procedural way.</p>

<figure class='code'><figcaption><span>sudoku2x2  linenos:true (sudoku4x4.erl)</span> <a href='http://www.ahwkong.com/downloads/code/erlang/sudoku4x4.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">sudoku4x4</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span><span class="n">include_lib</span><span class="p">(</span><span class="s">&quot;eunit/include/eunit.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">seed_matrix2</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">run</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="nb">element</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">solve</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">take_row_and_column</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="n">pick_num</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="n">pos_to_xy</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">%% matrix representation</span>
</span><span class='line'><span class="nf">seed_matrix2</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>     <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>     <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>     <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="nf">matrix2_ans</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>     <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>     <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>     <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">element</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">,</span> <span class="p">_)</span> <span class="k">when</span> <span class="nv">X</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">Y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">nil</span><span class="p">;</span>
</span><span class='line'><span class="nb">element</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">,</span> <span class="nv">Matrix</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">% make sure it is zero-indexed</span>
</span><span class='line'>    <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="nv">X</span><span class="o">*</span><span class="mi">9</span> <span class="o">+</span> <span class="nv">Y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Matrix</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">pos_to_xy</span><span class="p">(</span><span class="nv">Pos</span><span class="p">,</span> <span class="nv">Len</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Pos</span> <span class="ow">rem</span> <span class="nv">Len</span> <span class="o">=:=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{(</span><span class="nv">Pos</span> <span class="ow">div</span> <span class="nv">Len</span><span class="p">),</span> <span class="nv">Len</span><span class="p">};</span>
</span><span class='line'><span class="nf">pos_to_xy</span><span class="p">(</span><span class="nv">Pos</span><span class="p">,</span> <span class="nv">Len</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{(</span><span class="nv">Pos</span> <span class="ow">div</span> <span class="nv">Len</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Pos</span> <span class="ow">rem</span> <span class="nv">Len</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">take_row_and_column</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">SideLen</span> <span class="o">=</span>  <span class="nb">round</span><span class="p">(</span><span class="nn">math</span><span class="p">:</span><span class="nf">sqrt</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">AnsMatrix</span><span class="p">))),</span>
</span><span class='line'>    <span class="n">take_row_and_column</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">take_row_and_column</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">% io:format(&quot;take_row_and_column: ~p~n&quot;, [AnsMatrix]),</span>
</span><span class='line'>    <span class="nv">RowVector</span> <span class="o">=</span> <span class="p">[</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">((</span><span class="nv">R</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nv">SideLen</span><span class="o">+</span><span class="nv">X</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">)</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">)],</span>
</span><span class='line'>    <span class="nv">ColVector</span> <span class="o">=</span> <span class="p">[</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">((</span><span class="nv">X</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nv">SideLen</span><span class="o">+</span><span class="nv">C</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">)</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">)],</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">RowVector</span><span class="p">,</span> <span class="nv">ColVector</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% pick a number to test for coordinate x,y</span>
</span><span class='line'><span class="nf">pick_num</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">,</span> <span class="nv">StartFromThisNum</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">SideLen</span> <span class="o">=</span>  <span class="nb">round</span><span class="p">(</span><span class="nn">math</span><span class="p">:</span><span class="nf">sqrt</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">AnsMatrix</span><span class="p">))),</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">RV</span><span class="p">,</span> <span class="nv">CV</span><span class="p">}</span> <span class="o">=</span> <span class="n">take_row_and_column</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">AnsMatrix</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">),</span>
</span><span class='line'>    <span class="n">pick_num2</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">RV</span><span class="p">,</span> <span class="nv">CV</span><span class="p">,</span> <span class="nv">StartFromThisNum</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">).</span>
</span><span class='line'><span class="nf">pick_num2</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">RV</span><span class="p">,</span> <span class="nv">CV</span><span class="p">,</span> <span class="nv">Num</span><span class="p">,</span> <span class="nv">Bound</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Num</span> <span class="o">=&lt;</span> <span class="nv">Bound</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">F</span> <span class="o">=</span> <span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">X</span> <span class="o">==</span> <span class="nv">Num</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">InRow</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">any</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">RV</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">InCol</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">any</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">CV</span><span class="p">),</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">{</span> <span class="nv">InRow</span><span class="p">,</span> <span class="nv">InCol</span> <span class="p">}</span> <span class="k">of</span>
</span><span class='line'>  <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="n">false</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Num</span><span class="p">};</span>
</span><span class='line'>  <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">pick_num2</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">RV</span><span class="p">,</span> <span class="nv">CV</span><span class="p">,</span> <span class="nv">Num</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Bound</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">pick_num2</span><span class="p">(_</span><span class="nv">R</span><span class="p">,</span> <span class="p">_</span><span class="nv">C</span><span class="p">,</span> <span class="p">_</span><span class="nv">RV</span><span class="p">,</span> <span class="p">_</span><span class="nv">CV</span><span class="p">,</span> <span class="p">_</span><span class="nv">Num</span><span class="p">,</span> <span class="p">_</span><span class="nv">Bound</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">err</span><span class="p">,</span> <span class="mi">0</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">%% round() is needed to convert it to integer</span>
</span><span class='line'>    <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">Seed</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">round</span><span class="p">(</span><span class="nn">math</span><span class="p">:</span><span class="nf">sqrt</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">Seed</span><span class="p">))),</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">solve_backtrack</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="p">,</span> <span class="p">_</span><span class="nv">Begin</span><span class="p">,</span> <span class="nv">Rest</span><span class="p">,</span> <span class="nv">LastNum</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">[])</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">Seed</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">[]);</span> <span class="c">% initial step</span>
</span><span class='line'><span class="nf">solve_backtrack</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="p">_</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">,</span> <span class="p">_</span><span class="nv">Rest</span><span class="p">,</span> <span class="p">_</span><span class="nv">LastNum</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">[</span><span class="nv">LastStep</span><span class="p">|</span><span class="nv">Tail</span><span class="p">])</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">LasPosInSeed</span><span class="p">,</span> <span class="nv">LastPosInSeedNum</span><span class="p">}</span> <span class="o">=</span> <span class="nv">LastStep</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">PrevAns</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Ans</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">LasPosInSeed</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">Rest</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">LasPosInSeed</span><span class="p">,</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Seed</span><span class="p">)</span><span class="o">-</span><span class="nv">LasPosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">LasPosInSeed</span><span class="p">,</span> <span class="nv">PrevAns</span><span class="p">,</span> <span class="nv">Rest</span><span class="p">,</span> <span class="nv">LastPosInSeedNum</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Tail</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">14</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">14</span><span class="p">},</span> <span class="p">{</span><span class="mi">11</span><span class="p">,</span> <span class="mi">16</span><span class="p">}]};</span>
</span><span class='line'><span class="nf">is_check_point</span><span class="p">(_,_)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">no</span><span class="p">,</span> <span class="p">[]}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_well_formed</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="nv">Pts</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">Pts</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">F</span> <span class="o">=</span> <span class="k">fun</span><span class="p">({</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="n">is_well_formed</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nn">lists</span><span class="p">:</span><span class="nf">all</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Pts</span><span class="p">).</span>
</span><span class='line'><span class="nf">is_well_formed</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>  <span class="mi">10</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>  <span class="mi">10</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>  <span class="mi">10</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>    
</span><span class='line'><span class="nf">is_well_formed</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">+</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>  <span class="mi">10</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_well_formed</span><span class="p">(_,</span> <span class="p">_,</span> <span class="p">_)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">false</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Remain</span><span class="p">],</span> <span class="nv">LastNum</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Steps</span><span class="p">)</span> <span class="k">when</span> <span class="nv">H</span> <span class="o">=:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">}</span> <span class="o">=</span> <span class="n">pos_to_xy</span><span class="p">(</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">CurrentMatrix</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Ans</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">++</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="p">,</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Seed</span><span class="p">)</span><span class="o">-</span><span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">pick_num</span><span class="p">(</span><span class="nv">R</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">CurrentMatrix</span><span class="p">,</span> <span class="nv">LastNum</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">NewH</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">is_check_point</span><span class="p">(</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>      <span class="p">{</span><span class="n">yes</span><span class="p">,</span> <span class="nv">Pts</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="nv">ProposedMatrix</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Ans</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">++</span> <span class="p">[</span><span class="nv">NewH</span><span class="p">]</span> <span class="o">++</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Seed</span><span class="p">)</span><span class="o">-</span><span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">is_well_formed</span><span class="p">(</span><span class="nv">ProposedMatrix</span><span class="p">,</span> <span class="nv">Pts</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>          <span class="n">true</span> <span class="o">-&gt;</span> <span class="c">%% move on</span>
</span><span class='line'>              <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Ans</span><span class="o">++</span><span class="p">[</span><span class="nv">NewH</span><span class="p">],</span> <span class="nv">Remain</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">[{</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">NewH</span><span class="p">}]</span><span class="o">++</span><span class="nv">Steps</span><span class="p">);</span>
</span><span class='line'>          <span class="n">false</span> <span class="o">-&gt;</span> <span class="c">%% backtraked</span>
</span><span class='line'>              <span class="n">solve_backtrack</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">]</span><span class="o">++</span><span class="nv">Remain</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Steps</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span><span class="p">;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">no</span><span class="p">,</span> <span class="p">_}</span> <span class="o">-&gt;</span> <span class="c">% continue</span>
</span><span class='line'>          <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Ans</span><span class="o">++</span><span class="p">[</span><span class="nv">NewH</span><span class="p">],</span> <span class="nv">Remain</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">[{</span><span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">NewH</span><span class="p">}]</span><span class="o">++</span><span class="nv">Steps</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span><span class="p">;</span>
</span><span class='line'>      <span class="p">_</span> <span class="o">-&gt;</span> <span class="c">%% backtracked</span>
</span><span class='line'>            <span class="n">solve_backtrack</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">]</span><span class="o">++</span><span class="nv">Remain</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Steps</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="p">,</span> <span class="nv">Begin</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">Remain</span><span class="p">],</span> <span class="p">_</span><span class="nv">TriedNumAtThisPos</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Steps</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">%% seeded value, move on</span>
</span><span class='line'>    <span class="n">solve</span><span class="p">(</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">PosInSeed</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Begin</span> <span class="o">++</span> <span class="p">[</span><span class="nv">H</span><span class="p">],</span> <span class="nv">Remain</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="nv">Steps</span><span class="p">);</span>
</span><span class='line'><span class="nf">solve</span><span class="p">(_</span><span class="nv">Seed</span><span class="p">,</span> <span class="nv">EndPos</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_,</span> <span class="nv">SideLen</span><span class="p">,</span> <span class="p">_</span><span class="nv">Steps</span><span class="p">)</span> <span class="k">when</span> <span class="nv">EndPos</span> <span class="o">==</span> <span class="nv">SideLen</span><span class="o">*</span><span class="nv">SideLen</span><span class="o">+</span><span class="mi">1</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Ans</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">run</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Ans</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">seed_matrix2</span><span class="p">()),</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Ans </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Ans</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">unit_test</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pos_to_xy</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">}),</span>
</span><span class='line'>     <span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pos_to_xy</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">}),</span>
</span><span class='line'>     <span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pos_to_xy</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}),</span>
</span><span class='line'>     <span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pick_num2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="mi">2</span><span class="p">}),</span>
</span><span class='line'>     <span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pick_num2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="n">err</span><span class="p">,</span> <span class="mi">0</span><span class="p">}),</span>
</span><span class='line'>     <span class="o">?</span><span class="n">assert</span><span class="p">(</span><span class="n">pick_num2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=:=</span> <span class="p">{</span><span class="n">err</span><span class="p">,</span> <span class="mi">0</span><span class="p">})</span>
</span><span class='line'>    <span class="p">].</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sometimes it is not obvious at the beginning]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/15/sometimes-it-is-not-obvious-at-the-beginning/"/>
    <updated>2014-03-15T15:49:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/15/sometimes-it-is-not-obvious-at-the-beginning</id>
    <content type="html"><![CDATA[<p>I want to create a function for use as a predicate in the function <code>lists:any</code>. I try it first in erlang shell,</p>

<pre><code>137&gt; F = fun(X) -&gt; X == 1 end.
#Fun&lt;erl_eval.6.80484245&gt;
</code></pre>

<p>It works as expected:</p>

<pre><code>138&gt; lists:any(F, [2, 3]).
false
139&gt; lists:any(F, [2, 1, 3]).
true
</code></pre>

<p>Then I want to change the condition to something else, and I got an error message:</p>

<pre><code>140&gt; F = fun(X) -&gt; X /= 1 end.
** exception error: no match of right hand side value #Fun&lt;erl_eval.6.80484245&gt;
</code></pre>

<p>My first thought: It is interesting&hellip; Did I mix up the &lsquo;not equal&rsquo; operator in erlang? Maybe it is not &lsquo;/=&rsquo;?</p>

<p>It turns out it is because the code at 140 is effectively an attempt to rebound the <code>F</code> variable. The error message is actually about this rather than the operator. I do not usually test code in the erlang shell, so it took me a while to figure it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[when top bar is enabled...]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/10/when-top-bar-is-enabled-dot-dot-dot/"/>
    <updated>2014-03-10T22:00:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/10/when-top-bar-is-enabled-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>When top bar of a navigation controller is enabled, I got this error messages:</p>

<pre><code>the item height must be less that the height of the UICollectionView minus the section insets top and bottom values.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[quicklook]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/10/quicklook/"/>
    <updated>2014-03-10T21:52:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/10/quicklook</id>
    <content type="html"><![CDATA[

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ qlmanage -l
</span><span class='line'>List of all generator IDs: (
</span><span class='line'>    "com.apple.quicklookgenerator.iChat",
</span><span class='line'>    "com.apple.qlgenerator.package",
</span><span class='line'>    "com.apple.qlgenerator.pdf",
</span><span class='line'>    "com.apple.qlgenerator.contact",
</span><span class='line'>    "com.apple.qlgenerator.mail",
</span><span class='line'>    "com.apple.qlgenerator.audio",
</span><span class='line'>    "com.apple.garageband.quicklookgenerator",
</span><span class='line'>    "com.apple.qlgenerator.iCal",
</span><span class='line'>    "com.apple.Notes.qlgenerator",
</span><span class='line'>    "com.apple.qlgenerator.movie",
</span><span class='line'>    "com.apple.qlgenerator.image",
</span><span class='line'>    "com.apple.qlgenerator.web",
</span><span class='line'>    "com.apple.qlgenerator.LogicXQLGenerator",
</span><span class='line'>    "com.apple.qlgenerator.eps",
</span><span class='line'>    "com.apple.qlgenerator.certificates",
</span><span class='line'>    "com.apple.qlgenerator.bookmark",
</span><span class='line'>    "com.apple.qlgenerator.text",
</span><span class='line'>    "com.apple.qlgenerator.clipping",
</span><span class='line'>    "org.m0k.transmission.QuickLookPlugin",
</span><span class='line'>    "com.apple.qlgenerator.font",
</span><span class='line'>    "com.apple.qlgenerator.office",
</span><span class='line'>    "com.apple.iBooksAuthor.iBooksAuthorQuickLookGenerator",
</span><span class='line'>    "org.openemu.savestategenerator",
</span><span class='line'>    "com.apple.qlgenerator.SceneKit",
</span><span class='line'>    "com.apple.qlgenerator.iconset",
</span><span class='line'>    "com.apple.qlgenerator.standard-bundles",
</span><span class='line'>    "com.apple.qlgenerator.locPDF",
</span><span class='line'>    "com.apple.iWork.iWorkQuickLookGenerator",
</span><span class='line'>    "com.pixelmatorteam.quicklook"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[keyboard in iOS]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/07/keyboard-in-ios/"/>
    <updated>2014-03-07T22:03:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/07/keyboard-in-ios</id>
    <content type="html"><![CDATA[<p>Turns out it is not a smaller subject&hellip;</p>

<p>First reading: <a href="http://stackoverflow.com/questions/1126726/how-to-make-a-uitextfield-move-up-when-keyboard-is-present">http://stackoverflow.com/questions/1126726/how-to-make-a-uitextfield-move-up-when-keyboard-is-present</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Current time in objective-c and python]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/06/now-in-objective-c-and-python/"/>
    <updated>2014-03-06T18:49:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/06/now-in-objective-c-and-python</id>
    <content type="html"><![CDATA[<p>To get the current time in python</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">321003</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and in objective-c</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSDate</span><span class="o">*</span> <span class="n">date</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">date</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpaceX and redundancy]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/06/spacex-and-redundancy/"/>
    <updated>2014-03-06T07:51:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/06/spacex-and-redundancy</id>
    <content type="html"><![CDATA[<p><strong>Q:</strong> So, these flight computers on Dragon – there are three on board, and that&rsquo;s for redundancy?</p>

<p><strong>A:</strong> There are actually six computers. They operate in pairs, so there are three computer units, each of which have two computers checking on each other. The reason we have three is when operating in proximity of ISS, we have to always have two computer strings voting on something on critical actions. We have three so we can tolerate a failure and still have two voting on each other. And that has nothing to do with radiation, that has to do with ensuring that we&rsquo;re safe when we&rsquo;re flying our vehicle in the proximity of the space station.</p>

<p>I went into the lab earlier today, and we have 18 different processing units with computers in them. We have three main computers, but 18 units that have a computer of some kind, and all of them are triple computers – everything is three processors. So we have like 54 processors on the spacecraft. It&rsquo;s a highly distributed design and very fault-tolerant and very robust.</p>

<p><a href="http://www.aviationweek.com/Blogs.aspx?plckBlogId=Blog:04ce340e-4b63-4d23-9695-d49ab661f385&amp;plckPostId=Blog:04ce340e-4b63-4d23-9695-d49ab661f385Post:a8b87703-93f9-4cdf-885f-9429605e14df">Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to make a label recognise a tape]]></title>
    <link href="http://www.ahwkong.com/post/2014/03/06/how-to-make-a-label-recognise-a-tape/"/>
    <updated>2014-03-06T07:44:00+11:00</updated>
    <id>http://www.ahwkong.com/post/2014/03/06/how-to-make-a-label-recognise-a-tape</id>
    <content type="html"><![CDATA[<p>Step 1) Need to implement a selector to handle the gesture recognizer&rsquo;s callback</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">handleSingleTap:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span>  <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;handleSingleTap called&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step 2) Create and assign a gesture recognizer to a UILabel</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'>    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">singleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleSingleTap:</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lblHour</span> <span class="nl">addGestureRecognizer:</span><span class="n">singleTap</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step 3) <strong>Important</strong> Must make sure <code>setUserInteractionEnabled</code> of the UILabel is set</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lblHour</span> <span class="nl">setUserInteractionEnabled:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
