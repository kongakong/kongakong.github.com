<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Timeline]]></title>
  <link href="http://kongakong.github.io/atom.xml" rel="self"/>
  <link href="http://kongakong.github.io/"/>
  <updated>2013-11-27T20:54:19+11:00</updated>
  <id>http://kongakong.github.io/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rvm install problem]]></title>
    <link href="http://kongakong.github.io/post/2013/11/27/rvm-install/"/>
    <updated>2013-11-27T20:24:00+11:00</updated>
    <id>http://kongakong.github.io/post/2013/11/27/rvm-install</id>
    <content type="html"><![CDATA[<p>At first the &lsquo;rvm install ruby-1.9.3-p484&rsquo; did not work on OSX. The extra &lsquo;&mdash;with-gcc=clang&rsquo; parameter fixed the issue</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Riak Content Type]]></title>
    <link href="http://kongakong.github.io/post/2013/09/12/riak-content-type/"/>
    <updated>2013-09-12T22:28:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/09/12/riak-content-type</id>
    <content type="html"><![CDATA[<p>The content-type is important for Riak KV: Various clients will use it to identify the difference between a response where the whole body is the key, or a response that contains siblings</p>

<p>It will also allow you to version your objects better. Here are a few suggestions (of course replace the text between the &lt; >):
&ndash; application/octet-stream &ndash; this is usually used for binary data, and is the easiest thing to set the content-type to.
&ndash; application/vnd.<company name>.<useful type name here> &ndash; a vendor-specific type, which you can create yourself
&ndash; application/vnd.<company name>.<useful type name here>.v<version number> &ndash; another vendor-specific type, which supports versioning.</p>

<p>Source: by Sam Elliott in the mailing list</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[riak allow-multi]]></title>
    <link href="http://kongakong.github.io/post/2013/08/15/riak-allow-multi/"/>
    <updated>2013-08-15T01:04:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/15/riak-allow-multi</id>
    <content type="html"><![CDATA[<p>I could not create a write conflict situation.</p>

<p>It turns out it is because I did not set the <strong>allow_multi</strong> property</p>

<p>Here is the command line:</p>

<pre><code>curl -i -XPUT http://riak001:8098/riak/cart -H "Content-Type:application/json" -d '{"props":{"allow_mult":1} }'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress's Liquid Exception]]></title>
    <link href="http://kongakong.github.io/post/2013/08/13/octopresss-liquid-exception/"/>
    <updated>2013-08-13T18:47:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/13/octopresss-liquid-exception</id>
    <content type="html"><![CDATA[<p>When I tried to publish a blog post which contains some erlang code, I got this error message</p>

<pre><code>Liquid Exception: undefined method `[]' for nil:NilClass in 2013-08-04-mypost.markdown
</code></pre>

<p>It is because in erlang &lsquo;%&rsquo; is the comment character. I used &lsquo;%%&rsquo; to start a comment and it confuses Jekyll. Switching back to a single &lsquo;%&rsquo; fixes the problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn something about /tmp on OSX today]]></title>
    <link href="http://kongakong.github.io/post/2013/08/12/learn-something-about-slash-tmp-on-osx-today/"/>
    <updated>2013-08-12T11:02:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/12/learn-something-about-slash-tmp-on-osx-today</id>
    <content type="html"><![CDATA[<p>1) /tmp is actually <a href="http://apple.stackexchange.com/a/1096/3428">/private/tmp</a></p>

<p>2) files in /tmp are removed if they are <a href="http://superuser.com/a/187105/33332">not accessed in three days</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[var in R]]></title>
    <link href="http://kongakong.github.io/post/2013/08/11/var-in-r/"/>
    <updated>2013-08-11T04:47:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/11/var-in-r</id>
    <content type="html"><![CDATA[<p><code>var()</code> in R return sample variance (divide by N-1), not population (divide by N)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make riak listen to IP other than localhost]]></title>
    <link href="http://kongakong.github.io/post/2013/08/09/how-to-make-riak-listen-to-addresses-other-than-localhost/"/>
    <updated>2013-08-09T18:53:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/09/how-to-make-riak-listen-to-addresses-other-than-localhost</id>
    <content type="html"><![CDATA[<p>By default a riak node will only listen to 127.0.0.1.</p>

<p>Replace 127.0.0.1 with the host IP in app.config will solve this issue</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Swap Calculation]]></title>
    <link href="http://kongakong.github.io/post/2013/08/04/simple-swap-calculation/"/>
    <updated>2013-08-04T17:34:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/04/simple-swap-calculation</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Today is 1st of January. The residual maturity of a swap is 9 months. The notional
 principal is $1,000. You receive 3% fixed semiannual payments and pay semiannual
 cash flows based on the 6-month Libor rate on March 31st and September 30th.
 Next payment is based on Libor at 5%. The current term structure is
 R(0, 0.25) = 4% and R(0, 0.75) = 5%.</p>

<p>Find the value of the fixed leg, floating leg and the swap.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">swap</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">example1</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">example1</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Fixed</span> <span class="o">=</span> <span class="n">example1_fixedleg</span><span class="p">(),</span>
</span><span class='line'>    <span class="nv">Floating</span> <span class="o">=</span> <span class="n">example1_floatingleg</span><span class="p">(),</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">Fixed</span><span class="p">,</span> <span class="nv">Floating</span><span class="p">,</span> <span class="nv">Fixed</span><span class="o">-</span><span class="nv">Floating</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">example1_fixedleg</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="mi">30</span> <span class="o">/</span> <span class="nn">math</span><span class="p">:</span><span class="nf">pow</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">0</span><span class="p">.</span><span class="mi">04</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1030</span><span class="o">/</span><span class="nn">math</span><span class="p">:</span><span class="nf">pow</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">0</span><span class="p">.</span><span class="mi">05</span><span class="p">,</span> <span class="mi">3</span><span class="o">/</span><span class="mi">4</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">example1_floatingleg</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">% 25 - next floating cash-flow payment </span>
</span><span class='line'>    <span class="c">% 1000 - the notional as if it is a zero-coupon bond</span>
</span><span class='line'>    <span class="mi">25</span> <span class="o">/</span> <span class="nn">math</span><span class="p">:</span><span class="nf">pow</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">0</span><span class="p">.</span><span class="mi">05</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1000</span><span class="o">/</span><span class="nn">math</span><span class="p">:</span><span class="nf">pow</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">0</span><span class="p">.</span><span class="mi">05</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">).</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Answer</strong>: {1022.6981406074298,1012.5734611086509,10.124679498778846}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git tip 1]]></title>
    <link href="http://kongakong.github.io/post/2013/08/03/git-tip-1/"/>
    <updated>2013-08-03T21:21:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/03/git-tip-1</id>
    <content type="html"><![CDATA[<p>By default git uses &lsquo;less&rsquo; as a pager. You can disable it by</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git --no-pager diff</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why we should love repost]]></title>
    <link href="http://kongakong.github.io/post/2013/08/02/why-we-should-love-repost/"/>
    <updated>2013-08-02T23:05:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/02/why-we-should-love-repost</id>
    <content type="html"><![CDATA[<p>Maybe &lsquo;love&rsquo; is a strong word. In reddit it is common to see vengeance against reposts. Sometimes it is probably justified: the OP may change title in a misleading way to fish for karma. I will not save my downvote in this case.</p>

<p>However sometimes the reposts, especially of historial events, were made by new users who had no recollection of the stories at all because they were too young at the time.</p>

<p>It did not need to go too far back at time too. A teenager today is merely 8 or 9 years ten years ago, right? They would barely pay attention to current affair of their time. Events we took for granted that everyone should know are simply not in the memory of the younger generation.</p>

<p>I begin to be aware of this phenomena when some younger redditors said how their minds are blown when they see the footages of, says, Tiananmen Square Massacre for the first time. For many of us in our 30 or older, we saw the Tiananmen Square Massacre unfolded in front of our eye. However for many youngsters, Tiananmen Square Massacre <strong>is</strong> history.</p>

<p>Therefore we should be more tolerant of reposts. They help to build up the collective memory of humanity. Let us all learn some lesson form our past mistakes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Luck and Skill]]></title>
    <link href="http://kongakong.github.io/post/2013/08/01/luck-and-skill/"/>
    <updated>2013-08-01T08:23:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/08/01/luck-and-skill</id>
    <content type="html"><![CDATA[<blockquote><p>For almost two centuries, Spain has hosted an enormously popular Christmas lottery. Based on
payout, it is the biggest lottery in the world and nearly all Spaniards play. In the mid 1970s, a man
sought a ticket with the last two digits ending in 48. He found a ticket, bought it, and then won the
lottery. When asked why he was so intent on finding that number, he replied, &ldquo;I dreamed of the
number seven for seven straight nights. And 7 times 7 is 48.&rdquo;</p></blockquote>

<p>From <a href="http://vserver1.cscs.lsa.umich.edu/~spage/ONLINECOURSE/R15SkillandLuck.pdf">&ldquo;Untangling Skill and Luck&rdquo; by Michael J. Mauboussin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Type of Database Models]]></title>
    <link href="http://kongakong.github.io/post/2013/07/29/different-type-of-database/"/>
    <updated>2013-07-29T08:08:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/29/different-type-of-database</id>
    <content type="html"><![CDATA[<p>I find this summary in <a href="http://littleriakbook.com/">Eric Redmond&rsquo;s &lsquo;A Little Riak&rsquo;</a> book  very concise and useful.</p>

<ol>
<li><p><strong>Relational</strong> Traditional databases usually use SQL to model and query data. They are useful for data which can be stored in a highly structured schema, yet require lexible querying. Scaling a relational database (RDBMS) traditionally occurs by more powerful hardware (vertical growth).</p>

<p>Examples: PostgreSQL, MySQL, Oracle</p></li>
<li><p><strong>Graph</strong> These exist for dataighly interconnected data. They excel in modeling complex relationships between nodes, and many implementations can handle multiple billions of nodes and relationships (or edges and vertices). I tend to include triplestores and object DBs as specialized variants.</p>

<p> Examples: Neo4j, Graphbase, IniniteGraph</p></li>
<li><p><strong>Document</strong> Document datastores model hierarchical values called documents, represented in formats such as JSON or XML, and do not enforce a document schema. They generally support distributing across multiple servers (horizontal growth).</p>

<p> Examples: CouchDB, MongoDB, Couchbase</p></li>
<li><p><strong>Columnar</strong> Popularized by Google’s BigTable, this form of database exists to scale across mul- tiple servers, and groups similar data into column families. Column values can be individually versioned and managed, though families are deined in advance, not unlike RDBMS schemas.</p>

<p> Examples: HBase, Cassandra, BigTable 4</p></li>
<li><p><strong>Key/Value</strong> Key/Value, or KV stores, are conceptually like hashtables, where values are stored and accessed by an immutable key. They range from single-server varieties like Memcached used for high-speed caching, to multi-datacenter distributed systems like Riak Enterprise.</p>

<p> Examples: Riak, Redis, Voldemort</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrency and Parallelism]]></title>
    <link href="http://kongakong.github.io/post/2013/07/26/concurrency-and-parallelism/"/>
    <updated>2013-07-26T21:41:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/26/concurrency-and-parallelism</id>
    <content type="html"><![CDATA[<blockquote><p>One of the misconceptions about concurrency is people often confuse concurrency and parallelism. Concurrency is a programming model that lets you express things that are independent, as independent executions and parallelism is about running two things at the same time. They are not the same idea and a lot of people confuse them, they think they are the same thing, but concurrency and parallelism are best thought of as a different idea. You can write beautiful concurrent programs with no parallelism whatsoever and you can also write extremely parallel programs that are not remotely concurrent. Concurrency is a model, parallelism is a result &ndash; maybe that&rsquo;s the best way to say it.</p></blockquote>

<p>- Rob Pike</p>

<p>Source: <a href="http://www.infoq.com/interviews/pike-concurrency">Infoq</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MFA]]></title>
    <link href="http://kongakong.github.io/post/2013/07/17/mfa/"/>
    <updated>2013-07-17T08:31:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/17/mfa</id>
    <content type="html"><![CDATA[<p>You can simply refer a Module/Function/Argument tuple as <strong>MFA</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[global:send_message]]></title>
    <link href="http://kongakong.github.io/post/2013/07/17/global-send-message/"/>
    <updated>2013-07-17T08:31:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/17/global-send-message</id>
    <content type="html"><![CDATA[<p><code>!</code> (&lsquo;bang&rsquo;) should not be used to call a globally registered name. Instead, you should use <code>global:send</code></p>

<p>A bit disappointed when I first learn about this: didn&rsquo;t I come to erlang for the bang operator? Now you take it away from me, <code>global</code> module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pong and pang in erlang]]></title>
    <link href="http://kongakong.github.io/post/2013/07/16/erlang-and-pang/"/>
    <updated>2013-07-16T08:00:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/16/erlang-and-pang</id>
    <content type="html"><![CDATA[<p>I know it is quite clever to use &lsquo;pang&rsquo; to indciate the process does not exist. However both responses (&lsquo;pong&rsquo; and &lsquo;pang&rsquo;) just look too similar to each other if the terminal app uses a certain kind of font. Don&rsquo;t think i would enjoy it under stress in an operation/support situation.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&gt;</span> <span class="nn">net_adm</span><span class="p">:</span><span class="nf">ping</span><span class="p">(</span><span class="n">exist</span><span class="p">@</span><span class="n">server</span><span class="p">).</span>
</span><span class='line'><span class="n">pong</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nn">net_adm</span><span class="p">:</span><span class="nf">ping</span><span class="p">(</span><span class="n">notexist</span><span class="p">@</span><span class="n">server</span><span class="p">).</span>
</span><span class='line'><span class="n">pang</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A useful Sybase tool]]></title>
    <link href="http://kongakong.github.io/post/2013/07/15/a-useful-sybase-tool/"/>
    <updated>2013-07-15T23:08:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/15/a-useful-sybase-tool</id>
    <content type="html"><![CDATA[<p><code>defncopy</code> is possibly the best way to retrieve a script of any Sybase database objects if you do not have access to a decent database development tools such as <a href="http://www.aquafold.com/aquadatastudio.html">Aqua Data Studio</a></p>

<p>This utility comes with Sybase distribution. Here is its usage:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ defncopy
</span><span class='line'> 
</span><span class='line'>defncopy Syntax Error
</span><span class='line'>Usage: defncopy
</span><span class='line'>    [-v]
</span><span class='line'>    [-W]
</span><span class='line'>    [-X]
</span><span class='line'>    [-a &lt;display_charset&gt;]
</span><span class='line'>    [-I &lt;interfaces_file&gt;]
</span><span class='line'>    [-J [&lt;client_charset&gt;]]
</span><span class='line'>    [-K &lt;keytab_file&gt;]
</span><span class='line'>    [-P &lt;password&gt;]
</span><span class='line'>    [-R &lt;remote_server_principal&gt;]
</span><span class='line'>    [-S [&lt;server_name&gt;]]
</span><span class='line'>    [-U &lt;user_name&gt;]
</span><span class='line'>    [-V &lt;security_options&gt;]
</span><span class='line'>    [-Z &lt;security_mechanism&gt;]
</span><span class='line'>    [-z &lt;language&gt;]
</span><span class='line'>    { in &lt;file_name&gt; &lt;database_name&gt; |
</span><span class='line'>      out &lt;file_name&gt; &lt;database_name&gt; [&lt;owner&gt;.]&lt;object_name&gt;
</span><span class='line'>          [[&lt;owner&gt;.]&lt;object_name&gt;...] }
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More blog maintenance]]></title>
    <link href="http://kongakong.github.io/post/2013/07/12/more-blog-maintenance/"/>
    <updated>2013-07-12T20:50:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/12/more-blog-maintenance</id>
    <content type="html"><![CDATA[<p>Found some good resource&hellip;</p>

<p><a href="http://miguelcamba.com/blog/2013/04/22/tweak-and-improve-your-new-octopress-blog/">http://miguelcamba.com/blog/2013/04/22/tweak-and-improve-your-new-octopress-blog/</a></p>

<p><a href="http://blog.jphpsf.com/2012/06/12/squeezing-octopress-for-faster-load-times">http://blog.jphpsf.com/2012/06/12/squeezing-octopress-for-faster-load-times</a></p>

<p><a href="http://decodize.com/html/moving-from-wordpress-to-octopress/">http://decodize.com/html/moving-from-wordpress-to-octopress/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switch and enum in Objective-c]]></title>
    <link href="http://kongakong.github.io/post/2013/07/08/switch-and-enum-in-objective-c/"/>
    <updated>2013-07-08T21:30:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/08/switch-and-enum-in-objective-c</id>
    <content type="html"><![CDATA[<blockquote><p>Do not implement a default case in switch statements that handle enumerated types. This helps if you add to the enumeration, because the compiler will warn that the switch does not handle all the values.</p></blockquote>

<p>from <a href="http://www.informit.com/articles/article.aspx?p=2080040&amp;seqNum=5">Matt Galloway</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby quirk?]]></title>
    <link href="http://kongakong.github.io/post/2013/07/06/ruby-quirk/"/>
    <updated>2013-07-06T08:06:00+10:00</updated>
    <id>http://kongakong.github.io/post/2013/07/06/ruby-quirk</id>
    <content type="html"><![CDATA[<p>Have absolutely zero knowledge of Ruby, although I am planning to learn more about this langauge since I started using Octopress.</p>

<p>Came across this code snippet in <a href="https://twitter.com/garybernhardt/status/352864696547803136">this tweet</a></p>

<p>The behavior does look a bit odd from a python prespective.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">mbp002</span><span class="p">:</span><span class="o">~</span> <span class="n">me</span><span class="err">$</span> <span class="n">irb</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p195</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span>
</span><span class='line'><span class="ss">SyntaxError</span><span class="p">:</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">1</span><span class="p">:</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">,</span> <span class="n">unexpected</span> <span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="n">expecting</span> <span class="k">end</span><span class="o">-</span><span class="n">of</span><span class="o">-</span><span class="n">input</span>
</span><span class='line'>    <span class="n">from</span> <span class="sr">/Users/me</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p195</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="ss">irb</span><span class="p">:</span><span class="mi">16</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;&#39;</span>
</span><span class='line'><span class="sb">2.0.0p195 :003 &gt; x=1,y=2</span>
</span><span class='line'><span class="sb"> =&gt; [1, 2] </span>
</span><span class='line'><span class="sb">2.0.0p195 :004 &gt; x</span>
</span><span class='line'><span class="sb"> =&gt; [1, 2] </span>
</span><span class='line'><span class="sb">2.0.0p195 :005 &gt; y</span>
</span><span class='line'><span class="sb"> =&gt; 2 </span>
</span></code></pre></td></tr></table></div></figure>


<p>Apparently it is treated like</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
