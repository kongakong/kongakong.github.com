<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-1420318032431335295.archive</id><updated>2013-06-26T22:44:35.797+10:00</updated><title type='text'>From Java to Erlang via Python</title><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/archive'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/archive'/><link rel='http://schemas.google.com/g/2005#post' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/archive'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/'/><author><name>Anthony Kong</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><entry><id>tag:blogger.com,1999:blog-1420318032431335295.layout</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#template'/><title type='text'>Template: From Java to Erlang via Python</title><content type='text'>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'&gt;
  &lt;head&gt;
&lt;meta content='wkuaVwECDlVaOOejJXaHZJtYrNuf0xY1KnCD14ttcxM=' name='verify-v1'/&gt;
    &lt;b:include data='blog' name='all-head-content'/&gt;
    &lt;title&gt;&lt;data:blog.pageTitle/&gt;&lt;/title&gt;
    &lt;b:skin&gt;&lt;![CDATA[/*
-----------------------------------------------
Blogger Template Style
Name:     Minima Stretch
Date:     26 Feb 2004
----------------------------------------------- */

/* Variable definitions
   ====================
   &lt;Variable name="bgcolor" description="Page Background Color"
             type="color" default="#fff" value="#ffffff"&gt;
   &lt;Variable name="textcolor" description="Text Color"
             type="color" default="#333" value="#333333"&gt;
   &lt;Variable name="linkcolor" description="Link Color"
             type="color" default="#58a" value="#5588aa"&gt;
   &lt;Variable name="pagetitlecolor" description="Blog Title Color"
             type="color" default="#666" value="#666666"&gt;
   &lt;Variable name="descriptioncolor" description="Blog Description Color"
             type="color" default="#999" value="#999999"&gt;
   &lt;Variable name="titlecolor" description="Post Title Color"
             type="color" default="#c60" value="#cc6600"&gt;
   &lt;Variable name="bordercolor" description="Border Color"
             type="color" default="#ccc" value="#cccccc"&gt;
   &lt;Variable name="sidebarcolor" description="Sidebar Title Color"
             type="color" default="#999" value="#999999"&gt;
   &lt;Variable name="sidebartextcolor" description="Sidebar Text Color"
             type="color" default="#666" value="#666666"&gt;
   &lt;Variable name="visitedlinkcolor" description="Visited Link Color"
             type="color" default="#999" value="#999999"&gt;
   &lt;Variable name="bodyfont" description="Text Font"
             type="font" default="normal normal 100% Georgia, Serif" value="normal normal 100% Georgia, Serif"&gt;
   &lt;Variable name="headerfont" description="Sidebar Title Font"
             type="font"
             default="normal normal 78% 'Trebuchet MS',Trebuchet,Arial,Verdana,Sans-serif" value="normal normal 78% 'Trebuchet MS',Trebuchet,Arial,Verdana,Sans-serif"&gt;
   &lt;Variable name="pagetitlefont" description="Blog Title Font"
             type="font"
             default="normal normal 200% Georgia, Serif" value="normal normal 200% Georgia, Serif"&gt;
   &lt;Variable name="descriptionfont" description="Blog Description Font"
             type="font"
             default="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif" value="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif"&gt;
   &lt;Variable name="postfooterfont" description="Post Footer Font"
             type="font"
             default="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif" value="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif"&gt;
   &lt;Variable name="startSide" description="Start side in blog language"
             type="automatic" default="left" value="left"&gt;
   &lt;Variable name="endSide" description="End side in blog language"
             type="automatic" default="right" value="right"&gt;
*/

/* Use this with templates/template-twocol.html */

body {
  background:$bgcolor;
  margin:0;
  color:$textcolor;
  font:x-small Georgia Serif;
  font-size/* */:/**/small;
  font-size: /**/small;
  text-align: center;
  }
a:link {
  color:$linkcolor;
  text-decoration:none;
  }
a:visited {
  color:$visitedlinkcolor;
  text-decoration:none;
  }
a:hover {
  color:$titlecolor;
  text-decoration:underline;
}
a img {
  border-width:0;
  }

/* Header
-----------------------------------------------
 */

#header-wrapper {
  margin:0 2% 10px;
  border:1px solid $bordercolor;
  }

#header { 
  margin: 5px;
  border: 1px solid $bordercolor;
  text-align: center;
  color:$pagetitlecolor;
}

#header-inner {
  background-position: center;
  margin-$startSide: auto;
  margin-$endSide: auto;
}

#header h1 {
  margin:5px 5px 0;
  padding:15px 20px .25em;
  line-height:1.2em;
  text-transform:uppercase;
  letter-spacing:.2em;
  font: $pagetitlefont;
}

#header a {
  color:$pagetitlecolor;
  text-decoration:none;
  }

#header a:hover {
  color:$pagetitlecolor;
  }

#header .description {
  margin:0 5px 5px;
  padding:0 20px 15px;
  text-transform:uppercase;
  letter-spacing:.2em;
  line-height: 1.4em;
  font: $descriptionfont;
  color: $descriptioncolor;
}

#header img {
  margin-$startSide: auto;
  margin-$endSide: auto;
}


/* Outer-Wrapper
----------------------------------------------- */
#outer-wrapper {
  margin:0;
  padding:10px;
  text-align:$startSide;
  font: $bodyfont;
  }

#main-wrapper {
  margin-$startSide: 2%;
  width: 67%;
  float: $startSide;
  display: inline;       /* fix for doubling margin in IE */
  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */
  }

#sidebar-wrapper {
  margin-$endSide: 2%;
  width: 25%;
  float: $endSide;
  display: inline;       /* fix for doubling margin in IE */
  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */
}


/* Headings
----------------------------------------------- */

h2 {
  margin:1.5em 0 .75em;
  font:$headerfont;
  line-height: 1.4em;
  text-transform:uppercase;
  letter-spacing:.2em;
  color:$sidebarcolor;
}


/* Posts
-----------------------------------------------
 */
h2.date-header {
  margin:1.5em 0 .5em;
  }

.post {
  margin:.5em 0 1.5em;
  border-bottom:1px dotted $bordercolor;
  padding-bottom:1.5em;
  }
.post h3 {
  margin:.25em 0 0;
  padding:0 0 4px;
  font-size:140%;
  font-weight:normal;
  line-height:1.4em;
  color:$titlecolor;
}

.post h3 a, .post h3 a:visited, .post h3 strong {
  display:block;
  text-decoration:none;
  color:$titlecolor;
  font-weight:normal;
}

.post h3 strong, .post h3 a:hover {
  color:$textcolor;
}

.post-body {
  margin:0 0 .75em;
  line-height:1.6em;
}

.post-body blockquote {
  line-height:1.3em;  
}

.post-footer {
  margin: .75em 0;
  color:$sidebarcolor;
  text-transform:uppercase;
  letter-spacing:.1em;
  font: $postfooterfont;
  line-height: 1.4em;
}

.comment-link {
  margin-$startSide:.6em;
  }
.post img, table.tr-caption-container {
  padding:4px;
  border:1px solid $bordercolor;
  }
.tr-caption-container img {
  border: none;
  padding: 0;
}
.post blockquote {
  margin:1em 20px;
  }
.post blockquote p {
  margin:.75em 0;
  }

/* Comments
----------------------------------------------- */
#comments h4 {
  margin:1em 0;
  font-weight: bold;
  line-height: 1.4em;
  text-transform:uppercase;
  letter-spacing:.2em;
  color: $sidebarcolor;
  }

#comments-block {
  margin:1em 0 1.5em;
  line-height:1.6em;
  }
#comments-block .comment-author {
  margin:.5em 0;
  }
#comments-block .comment-body {
  margin:.25em 0 0;
  }
#comments-block .comment-footer {
  margin:-.25em 0 2em;
  line-height: 1.4em;
  text-transform:uppercase;
  letter-spacing:.1em;
  }
#comments-block .comment-body p {
  margin:0 0 .75em;
  }
.deleted-comment {
  font-style:italic;
  color:gray;
  }

.feed-links {
  clear: both;
  line-height: 2.5em;
}

#blog-pager-newer-link {
  float: $startSide;
 }
 
#blog-pager-older-link {
  float: $endSide;
 }
 
#blog-pager {   
  text-align: center; 
 }

/* Sidebar Content
----------------------------------------------- */
.sidebar { 
  color: $sidebartextcolor;
  line-height: 1.5em;
 }

.sidebar ul {
  list-style:none;
  margin:0 0 0;
  padding:0 0 0;
}
.sidebar li {
  margin:0;
  padding-top:0;
  padding-$endSide:0;
  padding-bottom:.25em;
  padding-$startSide:15px;
  text-indent:-15px;
  line-height:1.5em;
  }

.sidebar .widget, .main .widget { 
  border-bottom:1px dotted $bordercolor;
  margin:0 0 1.5em;
  padding:0 0 1.5em;
 }

.main .Blog { 
  border-bottom-width: 0;
 }

/* Profile 
----------------------------------------------- */
.profile-img { 
  float: $startSide;
  margin-top: 0;
  margin-$endSide: 5px;
  margin-bottom: 5px;
  margin-$startSide: 0;
  padding: 4px;
  border: 1px solid $bordercolor;
}

.profile-data {
  margin:0;
  text-transform:uppercase;
  letter-spacing:.1em;
  font: $postfooterfont;
  color: $sidebarcolor;
  font-weight: bold;
  line-height: 1.6em;
}

.profile-datablock { 
  margin:.5em 0 .5em;
}

.profile-textblock { 
  margin: 0.5em 0;
  line-height: 1.6em;
}

.profile-link { 
  font: $postfooterfont;
  text-transform: uppercase;
  letter-spacing: .1em;
}

/* Footer
----------------------------------------------- */
#footer {
  width:660px;
  clear:both;
  margin:0 auto;
  padding-top:15px;
  line-height: 1.6em;
  text-transform:uppercase;
  letter-spacing:.1em;
  text-align: center;
}
]]&gt;&lt;/b:skin&gt;
  &lt;/head&gt;

  &lt;body&gt;
  &lt;b:section class='navbar' id='navbar' maxwidgets='1' showaddelement='no'&gt;
    &lt;b:widget id='Navbar1' locked='true' title='Navbar' type='Navbar'&gt;
      &lt;b:includable id='main'&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener(&amp;#39;load&amp;#39;,
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent(&amp;#39;onload&amp;#39;, function(){ object[attribute] = val; });
      }
    }
  &amp;lt;/script&amp;gt;
&amp;lt;div id=&amp;quot;navbar-iframe-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://apis.google.com/js/plusone.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        gapi.load(&amp;quot;iframes-styles-bubble&amp;quot;, function() {
          if (window.iframes &amp;amp;&amp;amp; iframes.open) {
            iframes.open(
                &amp;#39;//www.blogger.com/navbar.g?targetBlogID\0751420318032431335295\46blogName\75From+Java+to+Erlang+via+Python\46publishMode\75PUBLISH_MODE_BLOGSPOT\46navbarType\75BLUE\46layoutType\75LAYOUTS\46searchRoot\75http://erlang-python-java.blogspot.com/search\46blogLocale\75en_US\46v\0752\46homepageUrl\75http://erlang-python-java.blogspot.com/\46blogFollowUrl\75https://plus.google.com/107508522522146376690\46vt\75-1201217496181039438&amp;#39;,
                {
                  container: &amp;quot;navbar-iframe-container&amp;quot;,
                  id: &amp;quot;navbar-iframe&amp;quot;
                },
                {
                });
          }
        });
      &amp;lt;/script&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function() {
var script = document.createElement(&amp;#39;script&amp;#39;);
script.type = &amp;#39;text/javascript&amp;#39;;
script.src = &amp;#39;//pagead2.googlesyndication.com/pagead/js/google_top_exp.js&amp;#39;;
var head = document.getElementsByTagName(&amp;#39;head&amp;#39;)[0];
if (head) {
head.appendChild(script);
}})();
&amp;lt;/script&amp;gt;
&lt;/b:includable&gt;
    &lt;/b:widget&gt;
  &lt;/b:section&gt;


  &lt;div id='outer-wrapper'&gt;&lt;div id='wrap2'&gt;

    &lt;!-- skip links for text browsers --&gt;
    &lt;span id='skiplinks' style='display:none;'&gt;
      &lt;a href='#main'&gt;skip to main &lt;/a&gt; |
      &lt;a href='#sidebar'&gt;skip to sidebar&lt;/a&gt;
    &lt;/span&gt;

    &lt;div id='header-wrapper'&gt;
      &lt;b:section class='header' id='header' maxwidgets='1' showaddelement='no'&gt;
        &lt;b:widget id='Header1' locked='true' title='From Java to Erlang via Python (Header)' type='Header'&gt;
          &lt;b:includable id='main'&gt;

  &lt;b:if cond='data:useImage'&gt;
    &lt;b:if cond='data:imagePlacement == &amp;quot;BEHIND&amp;quot;'&gt;
      &lt;!--
      Show image as background to text. You can't really calculate the width
      reliably in JS because margins are not taken into account by any of
      clientWidth, offsetWidth or scrollWidth, so we don't force a minimum
      width if the user is using shrink to fit.
      This results in a margin-width's worth of pixels being cropped. If the
      user is not using shrink to fit then we expand the header.
      --&gt;
      &lt;b:if cond='data:mobile'&gt;
          &lt;div id='header-inner'&gt;
            &lt;div class='titlewrapper' style='background: transparent'&gt;
              &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
                &lt;b:include name='title'/&gt;
              &lt;/h1&gt;
            &lt;/div&gt;
            &lt;b:include name='description'/&gt;
          &lt;/div&gt;
        &lt;b:else/&gt;
          &lt;div expr:style='&amp;quot;background-image: url(\&amp;quot;&amp;quot; + data:sourceUrl + &amp;quot;\&amp;quot;); &amp;quot;                        + &amp;quot;background-position: &amp;quot;                        + data:backgroundPositionStyleStr + &amp;quot;; &amp;quot;                        + data:widthStyleStr                        + &amp;quot;min-height: &amp;quot; + data:height                        + &amp;quot;_height: &amp;quot; + data:height                        + &amp;quot;background-repeat: no-repeat; &amp;quot;' id='header-inner'&gt;
            &lt;div class='titlewrapper' style='background: transparent'&gt;
              &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
                &lt;b:include name='title'/&gt;
              &lt;/h1&gt;
            &lt;/div&gt;
            &lt;b:include name='description'/&gt;
          &lt;/div&gt;
        &lt;/b:if&gt;
    &lt;b:else/&gt;
      &lt;!--Show the image only--&gt;
      &lt;div id='header-inner'&gt;
        &lt;a expr:href='data:blog.homepageUrl' style='display: block'&gt;
          &lt;img expr:alt='data:title' expr:height='data:height' expr:id='data:widget.instanceId + &amp;quot;_headerimg&amp;quot;' expr:src='data:sourceUrl' expr:width='data:width' style='display: block'/&gt;
        &lt;/a&gt;
        &lt;!--Show the description--&gt;
        &lt;b:if cond='data:imagePlacement == &amp;quot;BEFORE_DESCRIPTION&amp;quot;'&gt;
          &lt;b:include name='description'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;
  &lt;b:else/&gt;
    &lt;!--No header image --&gt;
    &lt;div id='header-inner'&gt;
      &lt;div class='titlewrapper'&gt;
        &lt;h1 class='title'&gt;
          &lt;b:include name='title'/&gt;
        &lt;/h1&gt;
      &lt;/div&gt;
      &lt;b:include name='description'/&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
          &lt;b:includable id='description'&gt;
  &lt;div class='descriptionwrapper'&gt;
    &lt;p class='description'&gt;&lt;span&gt;&lt;data:description/&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
          &lt;b:includable id='title'&gt;
  &lt;b:if cond='data:blog.url == data:blog.homepageUrl'&gt;
    &lt;data:title/&gt;
  &lt;b:else/&gt;
    &lt;a expr:href='data:blog.homepageUrl'&gt;&lt;data:title/&gt;&lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
        &lt;/b:widget&gt;
      &lt;/b:section&gt;
    &lt;/div&gt;
 
    &lt;div id='content-wrapper'&gt;

      &lt;div id='crosscol-wrapper' style='text-align:center'&gt;
        &lt;b:section class='crosscol' id='crosscol' showaddelement='no'/&gt;
      &lt;/div&gt;

      &lt;div id='main-wrapper'&gt;
        &lt;b:section class='main' id='main' showaddelement='no'&gt;
          &lt;b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog'&gt;
            &lt;b:includable id='main' var='top'&gt;
  &lt;b:if cond='data:mobile == &amp;quot;false&amp;quot;'&gt;

    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;data:defaultAdStart/&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &lt;b:if cond='data:post.isFirstPost == &amp;quot;false&amp;quot;'&gt;
            &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-outer&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.dateHeader'&gt;
          &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-posts&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;div class='post-outer'&gt;
        &lt;b:include data='post' name='post'/&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
        &lt;/div&gt;
        &lt;b:if cond='data:post.includeAd'&gt;
          &lt;b:if cond='data:post.isFirstPost'&gt;
            &lt;data:defaultAdEnd/&gt;
          &lt;b:else/&gt;
            &lt;data:adEnd/&gt;
          &lt;/b:if&gt;
          &lt;div class='inline-ad'&gt;
            &lt;data:adCode/&gt;
          &lt;/div&gt;
          &lt;data:adStart/&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
      &lt;b:if cond='data:numPosts != 0'&gt;
        &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
      &lt;/b:if&gt;
      &lt;data:adEnd/&gt;
    &lt;/div&gt;

    &lt;!-- navigation --&gt;
    &lt;b:include name='nextprev'/&gt;

    &lt;!-- feed links --&gt;
    &lt;b:include name='feedLinks'/&gt;

    &lt;b:if cond='data:top.showStars'&gt;
      &lt;script src='//www.google.com/jsapi' type='text/javascript'/&gt;
      &lt;script type='text/javascript'&gt;
        google.load(&amp;quot;annotations&amp;quot;, &amp;quot;1&amp;quot;, {&amp;quot;locale&amp;quot;: &amp;quot;&lt;data:top.languageCode/&gt;&amp;quot;});
        function initialize() {
          google.annotations.setApplicationId(&lt;data:top.blogspotReviews/&gt;);
          google.annotations.createAll();
          google.annotations.fetch();
        }
        google.setOnLoadCallback(initialize);
      &lt;/script&gt;
    &lt;/b:if&gt;

  &lt;b:else/&gt;
    &lt;b:include name='mobile-main'/&gt;
  &lt;/b:if&gt;

  &lt;b:if cond='data:top.showDummy'&gt;
    &lt;data:top.dummyBootstrap/&gt;
  &lt;/b:if&gt;

&lt;/b:includable&gt;
            &lt;b:includable id='backlinkDeleteIcon' var='backlink'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:backlink.adminClass'&gt;
    &lt;a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'&gt;
      &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
    &lt;/a&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='backlinks' var='post'&gt;
  &lt;a name='links'/&gt;&lt;h4&gt;&lt;data:post.backlinksLabel/&gt;&lt;/h4&gt;
  &lt;b:if cond='data:post.numBacklinks != 0'&gt;
    &lt;dl class='comments-block' id='comments-block'&gt;
      &lt;b:loop values='data:post.backlinks' var='backlink'&gt;
        &lt;div class='collapsed-backlink backlink-control'&gt;
          &lt;dt class='comment-title'&gt;
            &lt;span class='backlink-toggle-zippy'&gt;&amp;#160;&lt;/span&gt;
            &lt;a expr:href='data:backlink.url' rel='nofollow'&gt;&lt;data:backlink.title/&gt;&lt;/a&gt;
            &lt;b:include data='backlink' name='backlinkDeleteIcon'/&gt;
          &lt;/dt&gt;
          &lt;dd class='comment-body collapseable'&gt;
            &lt;data:backlink.snippet/&gt;
          &lt;/dd&gt;
          &lt;dd class='comment-footer collapseable'&gt;
            &lt;span class='comment-author'&gt;&lt;data:post.authorLabel/&gt; &lt;data:backlink.author/&gt;&lt;/span&gt;
            &lt;span class='comment-timestamp'&gt;&lt;data:post.timestampLabel/&gt; &lt;data:backlink.timestamp/&gt;&lt;/span&gt;
          &lt;/dd&gt;
        &lt;/div&gt;
      &lt;/b:loop&gt;
    &lt;/dl&gt;
  &lt;/b:if&gt;
  &lt;p class='comment-footer'&gt;
    &lt;a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + &amp;quot;_backlinks-create-link&amp;quot;' target='_blank'&gt;&lt;data:post.createLinkLabel/&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;h4 id='comment-post-message'&gt;
        &lt;a expr:id='data:widget.instanceId + &amp;quot;_comment-editor-toggle-link&amp;quot;' href='javascript:void(0)'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;h4 id='comment-post-message'&gt;&lt;data:postCommentMsg/&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;, &amp;#39;&lt;data:post.communityId/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='commentDeleteIcon' var='comment'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:comment.adminClass'&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div class='goog-toggle-button'&gt;
        &lt;div class='goog-inline-block comment-action-icon'/&gt;
      &lt;/div&gt;
    &lt;b:else/&gt;
      &lt;a class='comment-delete' expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'&gt;
        &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
      &lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comment_count_picker' var='post'&gt;
  &lt;b:if cond='data:post.commentSource == 1'&gt;
    &lt;span class='cmt_count_iframe_holder' expr:data-count='data:post.numComments' expr:data-onclick='data:post.addCommentOnclick' expr:data-post-url='data:post.url' expr:data-url='data:post.canonicalUrl'&gt;
    &lt;/span&gt;
  &lt;b:else/&gt;
    &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;
      &lt;data:post.commentLabelFull/&gt;:
    &lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comment_picker' var='post'&gt;
  &lt;b:if cond='data:post.commentSource == 1'&gt;
    &lt;b:include data='post' name='iframe_comments'/&gt;
  &lt;b:else/&gt;
    &lt;b:if cond='data:post.showThreadedComments'&gt;
      &lt;b:include data='post' name='threaded_comments'/&gt;
    &lt;b:else/&gt;
      &lt;b:include data='post' name='comments'/&gt;
    &lt;/b:if&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;b:if cond='data:post.allowComments'&gt;
      &lt;h4&gt;&lt;data:post.commentLabelFull/&gt;:&lt;/h4&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;b:if cond='data:post.hasOlderLinks'&gt;
            &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;&lt;data:post.oldestLinkText/&gt;&lt;/a&gt;
              &amp;#160;
            &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;&lt;data:post.olderLinkText/&gt;&lt;/a&gt;
              &amp;#160;
          &lt;/b:if&gt;

          &lt;data:post.commentRangeText/&gt;

          &lt;b:if cond='data:post.hasNewerLinks'&gt;
            &amp;#160;
            &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;&lt;data:post.newerLinkText/&gt;&lt;/a&gt;
            &amp;#160;
            &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;&lt;data:post.newestLinkText/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;div expr:id='data:widget.instanceId + &amp;quot;_comments-block-wrapper&amp;quot;'&gt;
        &lt;dl expr:class='data:post.avatarIndentClass' id='comments-block'&gt;
          &lt;b:loop values='data:post.comments' var='comment'&gt;
            &lt;dt expr:class='&amp;quot;comment-author &amp;quot; + data:comment.authorClass' expr:id='data:comment.anchorName'&gt;
              &lt;b:if cond='data:comment.favicon'&gt;
                &lt;img expr:src='data:comment.favicon' height='16px' style='margin-bottom:-2px;' width='16px'/&gt;
              &lt;/b:if&gt;
              &lt;a expr:name='data:comment.anchorName'/&gt;
              &lt;b:if cond='data:blog.enabledCommentProfileImages'&gt;
                &lt;data:comment.authorAvatarImage/&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:comment.authorUrl'&gt;
                &lt;a expr:href='data:comment.authorUrl' rel='nofollow'&gt;&lt;data:comment.author/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;data:comment.author/&gt;
              &lt;/b:if&gt;
              &lt;data:commentPostedByMsg/&gt;
            &lt;/dt&gt;
            &lt;dd class='comment-body' expr:id='data:widget.instanceId + data:comment.cmtBodyIdPostfix'&gt;
              &lt;b:if cond='data:comment.isDeleted'&gt;
                &lt;span class='deleted-comment'&gt;&lt;data:comment.body/&gt;&lt;/span&gt;
              &lt;b:else/&gt;
                &lt;p&gt;
                  &lt;data:comment.body/&gt;
                &lt;/p&gt;
              &lt;/b:if&gt;
            &lt;/dd&gt;
            &lt;dd class='comment-footer'&gt;
              &lt;span class='comment-timestamp'&gt;
                &lt;a expr:href='data:comment.url' title='comment permalink'&gt;
                  &lt;data:comment.timestamp/&gt;
                &lt;/a&gt;
                &lt;b:include data='comment' name='commentDeleteIcon'/&gt;
              &lt;/span&gt;
            &lt;/dd&gt;
          &lt;/b:loop&gt;
        &lt;/dl&gt;
      &lt;/div&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;
            &lt;data:post.oldestLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;
            &lt;data:post.olderLinkText/&gt;
          &lt;/a&gt;
          &amp;#160;
          &lt;data:post.commentRangeText/&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;
            &lt;data:post.newerLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;
            &lt;data:post.newestLinkText/&gt;
          &lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;p class='comment-footer'&gt;
        &lt;b:if cond='data:post.embedCommentForm'&gt;
          &lt;b:if cond='data:post.allowNewComments'&gt;
            &lt;b:include data='post' name='comment-form'/&gt;
          &lt;b:else/&gt;
            &lt;data:post.noNewCommentsText/&gt;
          &lt;/b:if&gt;
        &lt;b:else/&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;

      &lt;/p&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:if cond='data:post.showBacklinks'&gt;
         &lt;b:include data='post' name='backlinks'/&gt;
       &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='feedLinks'&gt;
  &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt; &lt;!-- Blog feed links --&gt;
    &lt;b:if cond='data:feedLinks'&gt;
      &lt;div class='blog-feeds'&gt;
        &lt;b:include data='feedLinks' name='feedLinksBody'/&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:else/&gt; &lt;!--Post feed links --&gt;
    &lt;div class='post-feeds'&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.allowComments'&gt;
          &lt;b:if cond='data:post.feedLinks'&gt;
            &lt;b:include data='post.feedLinks' name='feedLinksBody'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='feedLinksBody' var='links'&gt;
  &lt;div class='feed-links'&gt;
  &lt;data:feedLinksMsg/&gt;
  &lt;b:loop values='data:links' var='f'&gt;
     &lt;a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'&gt;&lt;data:f.name/&gt; (&lt;data:f.feedType/&gt;)&lt;/a&gt;
  &lt;/b:loop&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='iframe_comments' var='post'&gt;

  &lt;b:if cond='data:post.allowIframeComments'&gt;
    &lt;script expr:src='data:post.iframeCommentSrc' type='text/javascript'/&gt;
    &lt;div class='cmt_iframe_holder' expr:data-href='data:post.canonicalUrl' expr:data-viewtype='data:post.viewType'/&gt;

    &lt;b:if cond='data:post.embedCommentForm == &amp;quot;false&amp;quot;'&gt;
      &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-index-post' var='post'&gt;
  &lt;div class='mobile-date-outer date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;div class='date-header'&gt;
        &lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-post-outer'&gt;
      &lt;a expr:href='data:post.url'&gt;
        &lt;h3 class='mobile-index-title entry-title' itemprop='name'&gt;
          &lt;data:post.title/&gt;
        &lt;/h3&gt;

        &lt;div class='mobile-index-arrow'&gt;&amp;amp;rsaquo;&lt;/div&gt;

        &lt;div class='mobile-index-contents'&gt;
          &lt;b:if cond='data:post.thumbnailUrl'&gt;
            &lt;div class='mobile-index-thumbnail'&gt;
              &lt;div class='Image'&gt;
                &lt;img expr:src='data:post.thumbnailUrl'/&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/b:if&gt;

          &lt;div class='post-body'&gt;
            &lt;b:if cond='data:post.snippet'&gt;&lt;data:post.snippet/&gt;&lt;/b:if&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div style='clear: both;'/&gt;
      &lt;/a&gt;

      &lt;div class='mobile-index-comment'&gt;
        &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;b:if cond='data:post.numComments != 0'&gt;
              &lt;b:include data='post' name='comment_count_picker'/&gt;
            &lt;/b:if&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-main' var='top'&gt;
    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;b:if cond='data:blog.pageType == &amp;quot;index&amp;quot;'&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-index-post'/&gt;
        &lt;/b:loop&gt;
      &lt;b:else/&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-post'/&gt;
        &lt;/b:loop&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;

   &lt;b:include name='mobile-nextprev'/&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&amp;amp;lsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&amp;amp;rsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-link-button' id='blog-pager-home-link'&gt;
    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class='mobile-desktop-link'&gt;
      &lt;a class='home-link' expr:href='data:desktopLinkUrl'&gt;&lt;data:desktopLinkMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-post' var='post'&gt;
  &lt;div class='date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='date-posts'&gt;
      &lt;div class='post-outer'&gt;

        &lt;div class='post hentry uncustomized-post-template' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'&gt;
          &lt;b:if cond='data:post.thumbnailUrl'&gt;
            &lt;meta expr:content='data:post.thumbnailUrl' itemprop='image_url'/&gt;
          &lt;/b:if&gt;
          &lt;meta expr:content='data:blog.blogId' itemprop='blogId'/&gt;
          &lt;meta expr:content='data:post.id' itemprop='postId'/&gt;

          &lt;a expr:name='data:post.id'/&gt;
          &lt;b:if cond='data:post.title'&gt;
            &lt;h3 class='post-title entry-title' itemprop='name'&gt;
              &lt;b:if cond='data:post.link'&gt;
                &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;b:if cond='data:post.url'&gt;
                  &lt;b:if cond='data:blog.url != data:post.url'&gt;
                    &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
                  &lt;b:else/&gt;
                    &lt;data:post.title/&gt;
                  &lt;/b:if&gt;
                &lt;b:else/&gt;
                  &lt;data:post.title/&gt;
                &lt;/b:if&gt;
              &lt;/b:if&gt;
            &lt;/h3&gt;
          &lt;/b:if&gt;

          &lt;div class='post-header'&gt;
            &lt;div class='post-header-line-1'/&gt;
          &lt;/div&gt;

          &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id' itemprop='articleBody'&gt;
            &lt;data:post.body/&gt;
            &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
          &lt;/div&gt;

          &lt;div class='post-footer'&gt;
            &lt;div class='post-footer-line post-footer-line-1'&gt;
              &lt;span class='post-author vcard'&gt;
                &lt;b:if cond='data:top.showAuthor'&gt;
                  &lt;b:if cond='data:post.authorProfileUrl'&gt;
                    &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                      &lt;meta expr:content='data:post.authorProfileUrl' itemprop='url'/&gt;
                      &lt;a expr:href='data:post.authorProfileUrl' rel='author' title='author profile'&gt;
                        &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                      &lt;/a&gt;
                    &lt;/span&gt;
                  &lt;b:else/&gt;
                    &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                      &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                    &lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-timestamp'&gt;
                &lt;b:if cond='data:top.showTimestamp'&gt;
                  &lt;data:top.timestampLabel/&gt;
                  &lt;b:if cond='data:post.url'&gt;
                    &lt;meta expr:content='data:post.canonicalUrl' itemprop='url'/&gt;
                    &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601' itemprop='datePublished'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-comment-link'&gt;
                &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
                  &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
                    &lt;b:if cond='data:post.allowComments'&gt;
                      &lt;b:include data='post' name='comment_count_picker'/&gt;
                    &lt;/b:if&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;
            &lt;/div&gt;

            &lt;div class='post-footer-line post-footer-line-2'&gt;
              &lt;b:if cond='data:top.showMobileShare'&gt;
                &lt;div class='mobile-link-button goog-inline-block' id='mobile-share-button'&gt;
                  &lt;a href='javascript:void(0);'&gt;&lt;data:shareMsg/&gt;&lt;/a&gt;
                &lt;/div&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:top.showDummy'&gt;
                &lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;
              &lt;/b:if&gt;
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;

        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;span id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&lt;data:newerPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;span id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&lt;data:olderPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;

    &lt;b:if cond='data:mobileLinkUrl'&gt;
      &lt;div class='blog-mobile-link'&gt;
        &lt;a expr:href='data:mobileLinkUrl'&gt;&lt;data:mobileLinkMsg/&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='post' var='post'&gt;
  &lt;div class='post hentry'&gt;
    &lt;a expr:name='data:post.id'/&gt;
    &lt;b:if cond='data:post.title'&gt;
      &lt;h3 class='post-title entry-title'&gt;
     &lt;b:if cond='data:post.link'&gt;
       &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
     &lt;b:else/&gt;
        &lt;b:if cond='data:post.url'&gt;
          &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
        &lt;b:else/&gt;
          &lt;data:post.title/&gt;
        &lt;/b:if&gt;
     &lt;/b:if&gt;
      &lt;/h3&gt;
    &lt;/b:if&gt;

    &lt;div class='post-header-line-1'/&gt;

    &lt;div class='post-body entry-content'&gt;
      &lt;p&gt;&lt;data:post.body/&gt;&lt;/p&gt;
      &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
    &lt;/div&gt;
    
    &lt;div class='post-footer'&gt;
    &lt;div class='post-footer-line post-footer-line-1'&gt;&lt;span class='post-author vcard'&gt;
        &lt;b:if cond='data:top.showAuthor'&gt;
          &lt;data:top.authorLabel/&gt;
          &lt;span class='fn'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;span class='post-timestamp'&gt;
        &lt;b:if cond='data:top.showTimestamp'&gt;
          &lt;data:top.timestampLabel/&gt;
        &lt;b:if cond='data:post.url'&gt;
          &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
        &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;span class='post-comment-link'&gt;
        &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;

          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;b:if cond='data:post.numComments == 1'&gt;1 &lt;data:top.commentLabel/&gt;&lt;b:else/&gt;&lt;data:post.numComments/&gt; &lt;data:top.commentLabelPlural/&gt;&lt;/b:if&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;span class='post-icons'&gt;
        &lt;!-- email post links --&gt;
        &lt;b:if cond='data:post.emailPostUrl'&gt;
          &lt;span class='item-action'&gt;
          &lt;a expr:href='data:post.emailPostUrl' expr:title='data:top.emailPostMsg'&gt;
              &lt;img alt='' class='icon-action' src='http://www.blogger.com/img/icon18_email.gif'/&gt;
          &lt;/a&gt;
          &lt;/span&gt;
        &lt;/b:if&gt;

        &lt;!-- quickedit pencil --&gt;
        &lt;b:include data='post' name='postQuickEdit'/&gt;
      &lt;/span&gt; &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-2'&gt;&lt;span class='post-labels'&gt;
        &lt;b:if cond='data:post.labels'&gt;
          &lt;data:postLabelsLabel/&gt;
          &lt;b:loop values='data:post.labels' var='label'&gt;
            &lt;a expr:href='data:label.url' rel='tag'&gt;&lt;data:label.name/&gt;&lt;/a&gt;&lt;b:if cond='data:label.isLast != &amp;quot;true&amp;quot;'&gt;,&lt;/b:if&gt;
          &lt;/b:loop&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-3'/&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='postQuickEdit' var='post'&gt;
  &lt;b:if cond='data:post.editUrl'&gt;
    &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:post.adminClass'&gt;
      &lt;a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'&gt;
        &lt;img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/&gt;
      &lt;/a&gt;
    &lt;/span&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='shareButtons' var='post'&gt;
  &lt;b:if cond='data:top.showEmailButton'&gt;&lt;a class='goog-inline-block share-button sb-email' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=email&amp;quot;' expr:title='data:top.emailThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.emailThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showBlogThisButton'&gt;&lt;a class='goog-inline-block share-button sb-blog' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=blog&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=270,width=475\&amp;quot;); return false;&amp;quot;' expr:title='data:top.blogThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.blogThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showTwitterButton'&gt;&lt;a class='goog-inline-block share-button sb-twitter' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=twitter&amp;quot;' expr:title='data:top.shareToTwitterMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToTwitterMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showFacebookButton'&gt;&lt;a class='goog-inline-block share-button sb-facebook' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=facebook&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=430,width=640\&amp;quot;); return false;&amp;quot;' expr:title='data:top.shareToFacebookMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToFacebookMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showOrkutButton'&gt;&lt;a class='goog-inline-block share-button sb-orkut' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=orkut&amp;quot;' expr:title='data:top.shareToOrkutMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToOrkutMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showDummy'&gt;&lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;&lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='status-message'&gt;
  &lt;b:if cond='data:navMessage'&gt;
  &lt;div class='status-msg-wrap'&gt;
    &lt;div class='status-msg-body'&gt;
      &lt;data:navMessage/&gt;
    &lt;/div&gt;
    &lt;div class='status-msg-border'&gt;
      &lt;div class='status-msg-bg'&gt;
        &lt;div class='status-msg-hidden'&gt;&lt;data:navMessage/&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div style='clear: both;'/&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='threaded-comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;, &amp;#39;&lt;data:post.communityId/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='threaded_comment_js' var='post'&gt;
  &lt;script async='async' expr:src='data:post.commentSrc' type='text/javascript'/&gt;

  &lt;script type='text/javascript'&gt;
    (function() {
      var items = &lt;data:post.commentJso/&gt;;
      var msgs = &lt;data:post.commentMsgs/&gt;;
      var config = &lt;data:post.commentConfig/&gt;;

// &lt;![CDATA[
      var cursor = null;
      if (items &amp;&amp; items.length &gt; 0) {
        cursor = parseInt(items[items.length - 1].timestamp) + 1;
      }

      var bodyFromEntry = function(entry) {
        if (entry.gd$extendedProperty) {
          for (var k in entry.gd$extendedProperty) {
            if (entry.gd$extendedProperty[k].name == 'blogger.contentRemoved') {
              return '&lt;span class="deleted-comment"&gt;' + entry.content.$t + '&lt;/span&gt;';
            }
          }
        }
        return entry.content.$t;
      }

      var parse = function(data) {
        cursor = null;
        var comments = [];
        if (data &amp;&amp; data.feed &amp;&amp; data.feed.entry) {
          for (var i = 0, entry; entry = data.feed.entry[i]; i++) {
            var comment = {};
            // comment ID, parsed out of the original id format
            var id = /blog-(\d+).post-(\d+)/.exec(entry.id.$t);
            comment.id = id ? id[2] : null;
            comment.body = bodyFromEntry(entry);
            comment.timestamp = Date.parse(entry.published.$t) + '';
            if (entry.author &amp;&amp; entry.author.constructor === Array) {
              var auth = entry.author[0];
              if (auth) {
                comment.author = {
                  name: (auth.name ? auth.name.$t : undefined),
                  profileUrl: (auth.uri ? auth.uri.$t : undefined),
                  avatarUrl: (auth.gd$image ? auth.gd$image.src : undefined)
                };
              }
            }
            if (entry.link) {
              if (entry.link[2]) {
                comment.link = comment.permalink = entry.link[2].href;
              }
              if (entry.link[3]) {
                var pid = /.*comments\/default\/(\d+)\?.*/.exec(entry.link[3].href);
                if (pid &amp;&amp; pid[1]) {
                  comment.parentId = pid[1];
                }
              }
            }
            comment.deleteclass = 'item-control blog-admin';
            if (entry.gd$extendedProperty) {
              for (var k in entry.gd$extendedProperty) {
                if (entry.gd$extendedProperty[k].name == 'blogger.itemClass') {
                  comment.deleteclass += ' ' + entry.gd$extendedProperty[k].value;
                } else if (entry.gd$extendedProperty[k].name == 'blogger.displayTime') {
                  comment.displayTime = entry.gd$extendedProperty[k].value;
                }
              }
            }
            comments.push(comment);
          }
        }
        return comments;
      };

      var paginator = function(callback) {
        if (hasMore()) {
          var url = config.feed + '?alt=json&amp;v=2&amp;orderby=published&amp;reverse=false&amp;max-results=50';
          if (cursor) {
            url += '&amp;published-min=' + new Date(cursor).toISOString();
          }
          window.bloggercomments = function(data) {
            var parsed = parse(data);
            cursor = parsed.length &lt; 50 ? null
                : parseInt(parsed[parsed.length - 1].timestamp) + 1
            callback(parsed);
            window.bloggercomments = null;
          }
          url += '&amp;callback=bloggercomments';
          var script = document.createElement('script');
          script.type = 'text/javascript';
          script.src = url;
          document.getElementsByTagName('head')[0].appendChild(script);
        }
      };
      var hasMore = function() {
        return !!cursor;
      };
      var getMeta = function(key, comment) {
        if ('iswriter' == key) {
          var matches = !!comment.author
              &amp;&amp; comment.author.name == config.authorName
              &amp;&amp; comment.author.profileUrl == config.authorUrl;
          return matches ? 'true' : '';
        } else if ('deletelink' == key) {
          return config.baseUri + '/delete-comment.g?blogID='
               + config.blogId + '&amp;postID=' + comment.id;
        } else if ('deleteclass' == key) {
          return comment.deleteclass;
        }
        return '';
      };

      var replybox = null;
      var replyUrlParts = null;
      var replyParent = undefined;

      var onReply = function(commentId, domId) {
        if (replybox == null) {
          // lazily cache replybox, and adjust to suit this style:
          replybox = document.getElementById('comment-editor');
          if (replybox != null) {
            replybox.height = '250px';
            replybox.style.display = 'block';
            replyUrlParts = replybox.src.split('#');
          }
        }
        if (replybox &amp;&amp; (commentId !== replyParent)) {
          document.getElementById(domId).insertBefore(replybox, null);
          replybox.src = replyUrlParts[0]
              + (commentId ? '&amp;parentID=' + commentId : '')
              + '#' + replyUrlParts[1];
          replyParent = commentId;
        }
      };

      var hash = (window.location.hash || '#').substring(1);
      var startThread, targetComment;
      if (/^comment-form_/.test(hash)) {
        startThread = hash.substring('comment-form_'.length);
      } else if (/^c[0-9]+$/.test(hash)) {
        targetComment = hash.substring(1);
      }

      // Configure commenting API:
      var configJso = {
        'maxDepth': config.maxThreadDepth
      };
      var provider = {
        'id': config.postId,
        'data': items,
        'loadNext': paginator,
        'hasMore': hasMore,
        'getMeta': getMeta,
        'onReply': onReply,
        'rendered': true,
        'initComment': targetComment,
        'initReplyThread': startThread,
        'config': configJso,
        'messages': msgs
      };

      var render = function() {
        if (window.goog &amp;&amp; window.goog.comments) {
          var holder = document.getElementById('comment-holder');
          window.goog.comments.render(holder, provider);
        }
      };

      // render now, or queue to render when library loads:
      if (window.goog &amp;&amp; window.goog.comments) {
        render();
      } else {
        window.goog = window.goog || {};
        window.goog.comments = window.goog.comments || {};
        window.goog.comments.loadQueue = window.goog.comments.loadQueue || [];
        window.goog.comments.loadQueue.push(render);
      }
    })();
// ]]&gt;
  &lt;/script&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='threaded_comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;h4&gt;&lt;data:post.commentLabelFull/&gt;:&lt;/h4&gt;

    &lt;div class='comments-content'&gt;
      &lt;b:if cond='data:post.embedCommentForm'&gt;
        &lt;b:include data='post' name='threaded_comment_js'/&gt;
      &lt;/b:if&gt;
      &lt;div id='comment-holder'&gt;
         &lt;data:post.commentHtml/&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;p class='comment-footer'&gt;
      &lt;b:if cond='data:post.allowNewComments'&gt;
        &lt;b:include data='post' name='threaded-comment-form'/&gt;
      &lt;b:else/&gt;
        &lt;data:post.noNewCommentsText/&gt;
      &lt;/b:if&gt;
    &lt;/p&gt;

    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:if cond='data:post.showBacklinks'&gt;
         &lt;b:include data='post' name='backlinks'/&gt;
       &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
        &lt;/b:section&gt;
      &lt;/div&gt;

      &lt;div id='sidebar-wrapper'&gt;
        &lt;b:section class='sidebar' id='sidebar' preferred='yes'&gt;
          &lt;b:widget id='HTML1' locked='false' title='Interesting Blog Entries' type='HTML'&gt;
            &lt;b:includable id='main'&gt;
  &lt;!-- only display title if it's non-empty --&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;data:content/&gt;
  &lt;/div&gt;

  &lt;b:include name='quickedit'/&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='Profile1' locked='false' title='About Me' type='Profile'&gt;
            &lt;b:includable id='main'&gt;
    &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
      &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='widget-content'&gt;
    &lt;b:if cond='data:team == &amp;quot;true&amp;quot;'&gt; &lt;!-- team blog profile --&gt;
      &lt;ul&gt;
        &lt;b:loop values='data:authors' var='i'&gt;
          &lt;li&gt;&lt;a class='profile-name-link g-profile' expr:href='data:i.userUrl' expr:style='&amp;quot;background-image: url(&amp;quot; + data:i.profileLogo + &amp;quot;);&amp;quot;'&gt;&lt;data:i.display-name/&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/b:loop&gt;
      &lt;/ul&gt;

    &lt;b:else/&gt; &lt;!-- normal blog profile --&gt;

      &lt;b:if cond='data:photo.url != &amp;quot;&amp;quot;'&gt;
        &lt;a expr:href='data:userUrl'&gt;&lt;img class='profile-img' expr:alt='data:photo.alt' expr:height='data:photo.height' expr:src='data:photo.url' expr:width='data:photo.width'/&gt;&lt;/a&gt;
      &lt;/b:if&gt;

      &lt;dl class='profile-datablock'&gt;
        &lt;dt class='profile-data'&gt;
          &lt;a class='profile-name-link g-profile' expr:href='data:userUrl' expr:style='&amp;quot;background-image: url(&amp;quot; + data:profileLogo + &amp;quot;);&amp;quot;' rel='author'&gt;
            &lt;data:displayname/&gt;
          &lt;/a&gt;
          &lt;b:if cond='data:hasgoogleprofile'&gt;
            &lt;br/&gt;
            &lt;div class='g-follow' data-annotation='bubble' data-height='20' expr:data-href='data:userUrl'/&gt;
          &lt;/b:if&gt;
        &lt;/dt&gt;

        &lt;b:if cond='data:showlocation == &amp;quot;true&amp;quot;'&gt;
          &lt;dd class='profile-data'&gt;&lt;data:location/&gt;&lt;/dd&gt;
        &lt;/b:if&gt;

        &lt;b:if cond='data:aboutme != &amp;quot;&amp;quot;'&gt;&lt;dd class='profile-textblock'&gt;&lt;data:aboutme/&gt;&lt;/dd&gt;&lt;/b:if&gt;
      &lt;/dl&gt;
      &lt;a class='profile-link' expr:href='data:userUrl' rel='author'&gt;&lt;data:viewProfileMsg/&gt;&lt;/a&gt;
    &lt;/b:if&gt;

     &lt;b:include name='quickedit'/&gt;
    &lt;/div&gt;
  &lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='Label1' locked='false' title='Labels' type='Label'&gt;
            &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title'&gt;
    &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div expr:class='&amp;quot;widget-content &amp;quot; + data:display + &amp;quot;-label-widget-content&amp;quot;'&gt;
    &lt;b:if cond='data:display == &amp;quot;list&amp;quot;'&gt;
      &lt;ul&gt;
      &lt;b:loop values='data:labels' var='label'&gt;
        &lt;li&gt;
          &lt;b:if cond='data:blog.url == data:label.url'&gt;
            &lt;span expr:dir='data:blog.languageDirection'&gt;&lt;data:label.name/&gt;&lt;/span&gt;
          &lt;b:else/&gt;
            &lt;a expr:dir='data:blog.languageDirection' expr:href='data:label.url'&gt;&lt;data:label.name/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
          &lt;b:if cond='data:showFreqNumbers'&gt;
            &lt;span dir='ltr'&gt;(&lt;data:label.count/&gt;)&lt;/span&gt;
          &lt;/b:if&gt;
        &lt;/li&gt;
      &lt;/b:loop&gt;
      &lt;/ul&gt;
    &lt;b:else/&gt;
      &lt;b:loop values='data:labels' var='label'&gt;
        &lt;span expr:class='&amp;quot;label-size label-size-&amp;quot; + data:label.cssSize'&gt;
          &lt;b:if cond='data:blog.url == data:label.url'&gt;
            &lt;span expr:dir='data:blog.languageDirection'&gt;&lt;data:label.name/&gt;&lt;/span&gt;
          &lt;b:else/&gt;
            &lt;a expr:dir='data:blog.languageDirection' expr:href='data:label.url'&gt;&lt;data:label.name/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
          &lt;b:if cond='data:showFreqNumbers'&gt;
            &lt;span class='label-count' dir='ltr'&gt;(&lt;data:label.count/&gt;)&lt;/span&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;
      &lt;/b:loop&gt;
    &lt;/b:if&gt;
    &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='BlogArchive1' locked='false' title='Blog Archive' type='BlogArchive'&gt;
            &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title'&gt;
    &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
  &lt;div id='ArchiveList'&gt;
  &lt;div expr:id='data:widget.instanceId + &amp;quot;_ArchiveList&amp;quot;'&gt;
    &lt;b:if cond='data:style == &amp;quot;HIERARCHY&amp;quot;'&gt;
     &lt;b:include data='data' name='interval'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:style == &amp;quot;FLAT&amp;quot;'&gt;
      &lt;b:include data='data' name='flat'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:style == &amp;quot;MENU&amp;quot;'&gt;
      &lt;b:include data='data' name='menu'/&gt;
    &lt;/b:if&gt;
  &lt;/div&gt;
  &lt;/div&gt;
  &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='flat' var='data'&gt;
  &lt;ul class='flat'&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;li class='archivedate'&gt;
        &lt;a expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt; (&lt;data:i.post-count/&gt;)
      &lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='interval' var='intervalData'&gt;
  &lt;b:loop values='data:intervalData' var='i'&gt;
      &lt;ul class='hierarchy'&gt;
        &lt;li expr:class='&amp;quot;archivedate &amp;quot; + data:i.expclass'&gt;
          &lt;b:include data='i' name='toggle'/&gt;
          &lt;a class='post-count-link' expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt;
            &lt;span class='post-count' dir='ltr'&gt;(&lt;data:i.post-count/&gt;)&lt;/span&gt;
          &lt;b:if cond='data:i.data'&gt;
            &lt;b:include data='i.data' name='interval'/&gt;
          &lt;/b:if&gt;
          &lt;b:if cond='data:i.posts'&gt;
            &lt;b:include data='i.posts' name='posts'/&gt;
          &lt;/b:if&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
  &lt;/b:loop&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='menu' var='data'&gt;
  &lt;select expr:id='data:widget.instanceId + &amp;quot;_ArchiveMenu&amp;quot;'&gt;
    &lt;option value=''&gt;&lt;data:title/&gt;&lt;/option&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;option expr:value='data:i.url'&gt;&lt;data:i.name/&gt; (&lt;data:i.post-count/&gt;)&lt;/option&gt;
    &lt;/b:loop&gt;
  &lt;/select&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='posts' var='posts'&gt;
  &lt;ul class='posts'&gt;
    &lt;b:loop values='data:posts' var='i'&gt;
      &lt;li&gt;&lt;a expr:href='data:i.url'&gt;&lt;data:i.title/&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='toggle' var='interval'&gt;
  &lt;b:if cond='data:interval.toggleId'&gt;
  &lt;b:if cond='data:interval.expclass == &amp;quot;expanded&amp;quot;'&gt;
    &lt;a class='toggle' href='javascript:void(0)'&gt;
      &lt;span class='zippy toggle-open'&gt;&amp;#9660;&amp;#160;&lt;/span&gt;
    &lt;/a&gt;
  &lt;b:else/&gt;
    &lt;a class='toggle' href='javascript:void(0)'&gt;
      &lt;span class='zippy'&gt;
        &lt;b:if cond='data:blog.languageDirection == &amp;quot;rtl&amp;quot;'&gt;
          &amp;#9668;&amp;#160;
        &lt;b:else/&gt;
          &amp;#9658;&amp;#160;
        &lt;/b:if&gt;
      &lt;/span&gt;
    &lt;/a&gt;
  &lt;/b:if&gt;
 &lt;/b:if&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='LinkList1' locked='false' title='Erlang Blogs and Others' type='LinkList'&gt;
            &lt;b:includable id='main'&gt;

&lt;b:if cond='data:title'&gt;&lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;&lt;/b:if&gt;
 &lt;div class='widget-content'&gt;
   &lt;ul&gt;
     &lt;b:loop values='data:links' var='link'&gt;
       &lt;li&gt;&lt;a expr:href='data:link.target'&gt;&lt;data:link.name/&gt;&lt;/a&gt;&lt;/li&gt;
     &lt;/b:loop&gt;
   &lt;/ul&gt;
   &lt;b:include name='quickedit'/&gt;
 &lt;/div&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='HTML3' locked='false' title='Sitemeter' type='HTML'&gt;
            &lt;b:includable id='main'&gt;
  &lt;!-- only display title if it's non-empty --&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;data:content/&gt;
  &lt;/div&gt;

  &lt;b:include name='quickedit'/&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
        &lt;/b:section&gt;
      &lt;/div&gt;

      &lt;!-- spacer for skins that want sidebar and main to be the same height--&gt;
      &lt;div class='clear'&gt;&amp;#160;&lt;/div&gt;

    &lt;/div&gt; &lt;!-- end content-wrapper --&gt;

    &lt;div id='footer-wrapper'&gt;
      &lt;b:section class='footer' id='footer'/&gt;
    &lt;/div&gt;

  &lt;/div&gt;&lt;/div&gt; &lt;!-- end outer-wrapper --&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/template/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/template/default'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_PUBLISHING_MODE</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of publishing done for this blog.</title><content type='text'>PUBLISH_MODE_BLOGSPOT</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_PUBLISHING_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_PUBLISHING_MODE'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_ADMIN_PERMISSION</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of administrators' emails for the blog.</title><content type='text'>anthony.hw.kong@gmail.com</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ADMIN_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ADMIN_PERMISSION'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_ADULT_CONTENT</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog contains adult content</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ADULT_CONTENT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ADULT_CONTENT'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_ALTERNATE_JSRENDER_ALLOWED</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether alternate JS renderings are allowed</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_ANALYTICS_ACCOUNT_NUMBER</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog's Google Analytics account number</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_ARCHIVE_DATE_FORMAT</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the archive index date format</title><content type='text'>9</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ARCHIVE_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ARCHIVE_DATE_FORMAT'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_ARCHIVE_FREQUENCY</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>How frequently this blog should be archived</title><content type='text'>MONTHLY</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ARCHIVE_FREQUENCY'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_ARCHIVE_FREQUENCY'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_AUTHOR_PERMISSION</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of authors' emails who have permission to publish.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_AUTHOR_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_AUTHOR_PERMISSION'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_BACKLINKS_ALLOWED</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comment backlinks on the blog</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_BACKLINKS_ALLOWED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_BACKLINKS_ALLOWED'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_BY_POST_ARCHIVING</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to provide an archive page for each post</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_BY_POST_ARCHIVING'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_BY_POST_ARCHIVING'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENT_ACCESS</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Who can comment</title><content type='text'>REGISTERED</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_ACCESS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_ACCESS'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENT_CAPTCHA</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to require commenters to complete a Captcha</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_CAPTCHA'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_CAPTCHA'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENT_EMAIL</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>List of e-mail addresses to send notifications of new comments to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_EMAIL'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENT_FEED</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_FEED'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENT_FORM_LOCATION</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment form location</title><content type='text'>FULL_PAGE</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_FORM_LOCATION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_FORM_LOCATION'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENT_MESSAGE</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment message</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_MESSAGE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_MESSAGE'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENT_MODERATION</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to enable comment moderation</title><content type='text'>ENABLED</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_MODERATION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_MODERATION'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENT_MODERATION_DELAY</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Number of days after which new comments are subject to moderation</title><content type='text'>14</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_MODERATION_DELAY'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_MODERATION_DELAY'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENT_MODERATION_EMAIL</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Email address to send notifications of new comments needing moderation to</title><content type='text'>anthony.hw.kong@gmail.com</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_MODERATION_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_MODERATION_EMAIL'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENT_PROFILE_IMAGES</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show profile images in comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_PROFILE_IMAGES'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENT_PROFILE_IMAGES'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENTS_ALLOWED</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENTS_ALLOWED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENTS_ALLOWED'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comment time stamp format number</title><content type='text'>29</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_CONVERT_LINE_BREAKS</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to convert line breaks into &lt;br /&gt; tags in post editor</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_CONVERT_LINE_BREAKS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_CONVERT_LINE_BREAKS'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_CUSTOM_PAGE_NOT_FOUND</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The content served when the requested post or page is not found.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_CUSTOM_ROBOTS_TXT</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The custom robots.txt content of the blog served to search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_CUSTOM_ROBOTS_TXT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_CUSTOM_ROBOTS_TXT'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_CUSTOM_ROBOTS_TXT_ENABLED</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog serves custom robots.txt content to search engines.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_DATE_FORMAT</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the date header format</title><content type='text'>26</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_DATE_FORMAT'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_DEFAULT_BACKLINKS_MODE</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default backlinks mode for posts</title><content type='text'>DEFAULT_HAVE_BACKLINKS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_DEFAULT_COMMENTS_MODE</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default comment mode for posts</title><content type='text'>DEFAULT_HAVE_COMMENTS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_DEFAULT_COMMENTS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_DEFAULT_COMMENTS_MODE'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_DESCRIPTION</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>A description of the blog</title><content type='text'>Thought and Idea covering Erlang, Python, Java in particular and Software Development in General</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_DESCRIPTION'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_EMAIL_POST_LINKS</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a link for users to e-mail posts</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_EMAIL_POST_LINKS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_EMAIL_POST_LINKS'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_FEED_REDIRECT_URL</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>URL to redirect post feed requests to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_FEED_REDIRECT_URL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_FEED_REDIRECT_URL'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_FLOAT_ALIGNMENT</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether float alignment is enabled for the blog</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_FLOAT_ALIGNMENT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_FLOAT_ALIGNMENT'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_LOCALE</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Language for this blog</title><content type='text'>en_US</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_LOCALE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_LOCALE'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_MAX_NUM</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Maximum number of things to show on the main page"</title><content type='text'>4</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_MAX_NUM'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_MAX_NUM'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_MAX_UNIT</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Unit of things to show on the main page</title><content type='text'>POSTS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_MAX_UNIT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_MAX_UNIT'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_META_DESCRIPTION</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The meta description of the blog served to search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_META_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_META_DESCRIPTION'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_META_DESCRIPTION_ENABLED</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog is served with meta descriptions.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_META_DESCRIPTION_ENABLED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_META_DESCRIPTION_ENABLED'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_NAME</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The name of the blog</title><content type='text'>From Java to Erlang via Python</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_NAME'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_NAME'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_PER_POST_FEED</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for per-post comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_PER_POST_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_PER_POST_FEED'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_POST_FEED</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog posts</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_POST_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_POST_FEED'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_POST_FEED_FOOTER</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Footer to append to the end of each entry in the post feed</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_POST_FEED_FOOTER'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_POST_FEED_FOOTER'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_POST_TEMPLATE</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The template for blog posts</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_POST_TEMPLATE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_POST_TEMPLATE'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_PROMOTED</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog can be promoted on Blogger</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_PROMOTED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_PROMOTED'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_QUICK_EDITING</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether Quick Editing is enabled</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_QUICK_EDITING'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_QUICK_EDITING'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_READ_ACCESS_MODE</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The access type for the readers of the blog.</title><content type='text'>PUBLIC</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_READ_ACCESS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_READ_ACCESS_MODE'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_READER_PERMISSION</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of emails for users who have permission to read the blog.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_READER_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_READER_PERMISSION'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_SEARCHABLE</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog should be indexed by search engines</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_SEARCHABLE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_SEARCHABLE'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_SEND_EMAIL</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comma separated list of emails to send new blog posts to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_SEND_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_SEND_EMAIL'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_SHOW_TITLE</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show the title field</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_SHOW_TITLE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_SHOW_TITLE'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_SHOW_URL</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a related link box in the post composer</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_SHOW_URL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_SHOW_URL'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_SUBDOMAIN</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The BlogSpot subdomain under which to publish your blog</title><content type='text'>erlang-python-java</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_SUBDOMAIN'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_SUBDOMAIN'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_TIME_STAMP_FORMAT</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the time stamp format</title><content type='text'>27</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_TIME_STAMP_FORMAT'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_TIME_ZONE</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The time zone for this blog</title><content type='text'>Australia/Sydney</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_TIME_ZONE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_TIME_ZONE'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.settings.BLOG_USE_LIGHTBOX</id><published>2007-08-12T20:34:45.665+10:00</published><updated>2013-06-26T22:44:35.797+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show images in the Lightbox when clicked</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_USE_LIGHTBOX'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/settings/BLOG_USE_LIGHTBOX'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-792671647504116220</id><published>2008-05-29T09:58:00.002+10:00</published><updated>2008-05-29T09:59:09.185+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Erlang - Parallel Programming without Pain</title><content type='html'>Joe Armstong's &lt;a href="http://www.infoq.com/presentations/erlang-software-for-a-concurrent-world"&gt;Lecture &lt;/a&gt;on InfoQ. Must watch.</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/792671647504116220/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=792671647504116220' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/792671647504116220'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/792671647504116220'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/05/erlang-parallel-programming-without.html' title='Erlang - Parallel Programming without Pain'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-6667541505586480474</id><published>2008-05-22T01:09:00.006+10:00</published><updated>2008-05-22T12:42:38.685+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Mac'/><title type='text'>My First Mac and Virtual Box Experience</title><content type='html'>I am officially a Mac convert.&lt;br /&gt;&lt;br /&gt;Still learning how to survive on one mouse button and use these fn, control, option and command keys. But so far so good. My MBP experience is absolutely positive.&lt;br /&gt;&lt;br /&gt;Before the purchase, I was slightly worried about if I may pay too much for a fine GUI. After last few days of hand-on experience, I think, as many MBP users has attested, the premium is well worth it.&lt;br /&gt;&lt;br /&gt;I, in particular, appreciate the BSD root of Mac OSX.  Whenever I cannot use the Mac OSX GUI to get thing done, I can always fall back to command line alternatives.&lt;br /&gt;&lt;br /&gt;Vista is a staggering failure of MS Corp in every sense (I have used Vista for a year). As Paul Graham puts it, Microsoft has &lt;a href="http://www.paulgraham.com/microsoft.html"&gt;ceased to be relevant&lt;/a&gt;. They still have market share, but it is a market share going to erode fast, under the attacks of Sun, Linux and FOSS. The unwillingness to waste any more time on Vista is my prime motivation to switch.&lt;br /&gt;&lt;br /&gt;The very first application I have downloaded is the &lt;a href="http://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;. Basically within seconds I can start a new virtual instance of Ubuntu 8.04 beta. By default I can only &lt;span style="font-weight: bold;"&gt;ssh&lt;/span&gt; into the box via NAT. Will need to do some research to see how to get bridging done in Mac OSX.&lt;br /&gt;&lt;br /&gt;The second application I tried is, not surprisingly, &lt;a href="http://www.blacktree.com/"&gt;QuickSliver&lt;/a&gt;, an utility that warranted an hour of &lt;a href="http://www.youtube.com/watch?v=d4LkTstvUL4"&gt;Google Tech Talk&lt;/a&gt;.</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/6667541505586480474/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=6667541505586480474' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/6667541505586480474'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/6667541505586480474'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/05/my-first-mac-and-virtual-box-experience.html' title='My First Mac and Virtual Box Experience'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-8223543480784387429</id><published>2008-05-11T09:21:00.001+10:00</published><updated>2008-05-11T09:26:55.433+10:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Ant</title><content type='html'>http://youtube.com/watch?v=R07_JFfnFnY&lt;br /&gt;&lt;br /&gt;@ 35:00 - ant does not smell right.&lt;br /&gt;&lt;br /&gt;@ 37: - simple AI nernon</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/8223543480784387429'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/8223543480784387429'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-4108877290533417868</id><published>2008-05-10T04:04:00.008+10:00</published><updated>2008-05-22T12:42:54.935+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Development'/><title type='text'>The Importance of Being Nosy (Nosetests, Really)</title><content type='html'>&lt;span style="font-weight: bold;"&gt;Unit testing &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;One of a few important lessons I learn from Java development is the importance of unit test. It is of course not a silver bullet to the software reliability/quality problem, but the consequence not adopting it can only be more dire.&lt;br /&gt;&lt;br /&gt;I used only &lt;a href="http://www.junit.org/"&gt;JUnit &lt;/a&gt;to implement unit tests in Java (Since JUnit is "good enough", I never explore the alternative framework &lt;a href="http://testng.org/doc/index.html"&gt;TestNG&lt;/a&gt;.). Actually, problems in writing unit tests usually have very little to do with the frameworks themselves, but more with:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;A&lt;/span&gt;. The legacy code base you want to test against. For example, if the existing code base design is not modular enough, you have to go through some refactoring process to make unit testing possible. It is not the kind of luxury we can afford very often.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;B.&lt;/span&gt; Mock objects. &lt;a href="http://www.easymock.org/"&gt;EasyMock&lt;/a&gt; has made mocking a dependency easier, but maintaining the mock object codes still requires considerable effort.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Unit testing and Python&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;I think unit testing is even more important for Python programmers.&lt;br /&gt;&lt;br /&gt;Since everything happens in runtime for Python, errors in your scripts, no matter syntactical or logical, will not be caught until you actually execute the line of code where the bug lives*.&lt;br /&gt;&lt;br /&gt;On top of it, a majority of commercial/in-house software contains so many features. The sheer number of possible combination of the execution pathways means thorough manual testing is simply unattainable, if not unrealistic.&lt;br /&gt;&lt;br /&gt;If at the end of the day, a production issue in your python software arises and it turns out to be "incorrect indentation", the managers and users will look down on you pretty hard ("Did you really test it?"). Unit test + coverage tools can help us to avoid these kind of situation.&lt;br /&gt;&lt;br /&gt;Besides, unit tests can be used to safeguard corner cases and exceptional conditions. For financial applications, one of those commonly-seen mistakes is that a program fails to perform properly when a certain event (e.g. rollover) happens on a public holiday. With unit testing, we can subject the relevant codes to different combination of date and instruments, so we can make sure it will, for instance, calculate accrual correctly no matter what.&lt;br /&gt;&lt;br /&gt;Comparing Java, I find it easier to do unit testing in Python because, with Python's "Duck Typing" capability, we do not have to worry about maintaining mock objects at all. Whenever you need to mimic a dependency's behavior, just write a dummy class with just enough attributes/methods the testee expects. End of story.&lt;br /&gt;&lt;br /&gt;No more record and play APIs, as in EasyMock.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Nosetests makes it easy &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;So, you can understand why I am so glad to find &lt;a href="http://www.somethingaboutorange.com/mrl/projects/nose/"&gt;nose&lt;/a&gt;. Nosetests is, in a nutshell, a unit test discovery tool. It can traverse down a python source code directory and pick up classes that extends &lt;a href="http://docs.python.org/lib/testcase-objects.html"&gt;unittest.Testcase&lt;/a&gt;, &lt;a href="http://docs.python.org/lib/module-doctest.html"&gt;doc test&lt;/a&gt;, and any classes/methods that follow the &lt;a href="http://www.somethingaboutorange.com/mrl/projects/nose/#writing-tests"&gt;default naming convention&lt;/a&gt;. I can now mix any testing styles depending on the task at hand.&lt;br /&gt;&lt;br /&gt;I usually use the following parameters with nosetests:&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;&lt;br /&gt;--verbosity=3 --with-doctest -s --exe&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;"--exe" is necessary because in &lt;a href="http://www.cygwin.com/"&gt;cygwin&lt;/a&gt;, my primary development environment, py files are usually set to be "executable".&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Feedback&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Do you have any tips and idea on unit testing/software quality assurance to share? Feel free.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;* It is not entirely true. If you want to catch syntactic error before run-time, you can use the &lt;a href="http://docs.python.org/lib/module-compiler.html"&gt;compiler &lt;/a&gt;module to parse each py file individually. It is useful when you try to refactor by renaming modules/variables using tools like sed. This allows to make sure the regex does not do anything stupid with your code.</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/4108877290533417868/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=4108877290533417868' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/4108877290533417868'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/4108877290533417868'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/05/importance-of-being-nosy-nosetests.html' title='The Importance of Being Nosy (Nosetests, Really)'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-1587152077115150667</id><published>2008-04-16T00:39:00.012+10:00</published><updated>2008-05-01T00:43:02.724+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Python in the Corporate World</title><content type='html'>Python is used widely in academia, open source projects and start-up. However, when it comes to the corporate world,   it seems to me it is not making a lot of inroad. At least this is true in the finance industry, which I am more familiar with.&lt;br /&gt;&lt;br /&gt;A quick check on the python.org's &lt;a href="http://www.python.org/about/success/"&gt;success stories&lt;/a&gt;, only two companies are listed as Fortune 500, and none of them is in the finance.&lt;br /&gt;&lt;br /&gt;Occasionally there are ads looking for people with python skill in the financial sector, but the positions are usually of support or operation nature, not application development.&lt;br /&gt;&lt;br /&gt;From first glimpse, it is a classic chicken-and-egg problem: there is not enough skillful python programmers out there to fill the jobs, it is difficult to start new projects in python. However, if python programming job market is weak, there is little incentives for students or programmers to pick up this non-mainstream language.&lt;br /&gt;&lt;br /&gt;But there is something more than just supply-demand. I believe a common perception that, somehow, dynamic scripting languages are &lt;span style="font-style: italic;"&gt;not for large scale projects&lt;/span&gt; and is &lt;span style="font-style: italic;"&gt;difficult to maintain&lt;/span&gt; also make people shy away from using Python.&lt;br /&gt;&lt;br /&gt;The &lt;span style="font-style: italic;"&gt;not for large scale projects&lt;/span&gt; argument is a not too hard to counter. We just need to find some good examples of high visibility. For example, &lt;a href="http://groups.google.com/"&gt;Google Groups&lt;/a&gt; and &lt;a href="http://www.selenic.com/mercurial/wiki/"&gt;mercurial.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;However, there may not be a clean-cut answer to the question of maintainability. First of all, we have a generation of programmers who have used to statically typed languages and their accomplishing IDEs (such as Java and Eclipse). To this group of audience, the idea that one can build a full-fledged application using just API documentation, command line tools and vi/emacs is beyond imagination. It is easy to conclude that, without IDE support, it is difficult to refactor the code base, which is an essential step in keeping the application in good heath.&lt;br /&gt;&lt;br /&gt;Secondly past experience may still leave a bad taste. If you have done maintenance of legacy applications written in perl, some of them could make you feel like you have just visited a programmer's hell. Cryptic code and inconsistent style are everywhere. (But it'd still be way better than tcl. Luckily I have not come across any such programs yet). This bad memory certainly make people think twice before embracing dynamic scripting language in general, Python in particular.&lt;br /&gt;&lt;br /&gt;A disclaimer I must make: what I wrote above is based on my experience only, and your organization may be free of the above issues, especially if yours is relatively smaller in scale (so it is relatively easier to innovate) or relatively young (so there are less legacy applications). But today in most of the giant, multinational financial institutions that inspire to be a "financial supermarket" for all, the decision markers, especially the "professional manager" type, have a total different mind-set. First of all they will not be benefited much, personally, by giving green light to the use of non-mainstream technology/language that &lt;span style="font-style: italic;"&gt;promise &lt;/span&gt;better result and higher productivity. On the other hand, they have everything to lose if the brave decision does not deliver.  Java (or C# if it is a MS Window shop) is always a safe bet, even though it means one need an army of programmers to get thing done. In essence, it is an &lt;a href="http://en.wikipedia.org/wiki/Principal-agent_problem"&gt;agency problem&lt;/a&gt;.</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/1587152077115150667/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=1587152077115150667' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/1587152077115150667'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/1587152077115150667'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/04/python-in-corporate-world.html' title='Python in the Corporate World'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-8010693451801110862</id><published>2008-04-09T13:02:00.011+10:00</published><updated>2008-04-11T21:36:51.491+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Common Questions about Working as a Python Developer</title><content type='html'>I haven't posted much recently because I am starting a new job. It is the third time I switched language. Now, I am officially a Python Developer. Hurray!&lt;br /&gt;&lt;br /&gt;Since I have always kept myself busy by constantly picking up new computer languages, I know a dozen of odd and exotic languages. Therefore, after I landed on this job, I am surprised by some "interesting" questions about Python that people asked. And these people are no amateur. They are C or Java developers by profession.&lt;br /&gt;&lt;br /&gt;Here are the questions:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;1) What is Python?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;Well, it is a dynamic scripting language. A good overview &lt;a href="http://www.python.org/about/"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;To emphasize that it is a &lt;span style="font-style: italic;"&gt;real &lt;/span&gt;programming language, I'd also add that Python is used very &lt;span style="font-style: italic;"&gt;extensively &lt;/span&gt;within Google.&lt;br /&gt;&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;2) Isn't Python an very old language?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;Oh, this question makes me feel like I am the last Eyak speaker!&lt;br /&gt;&lt;br /&gt;Python appeared in 1991 when the creator &lt;a href="http://www.python.org/%7Eguido/"&gt;Guido van Rossum&lt;/a&gt; released it to the public. It is actually a very young language.&lt;br /&gt;&lt;br /&gt;Let's compare other still active languages and the time of first appearance:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Ruby&lt;/span&gt; - 1995&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Java&lt;/span&gt; - 1995&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Visual Basic&lt;/span&gt; (VB4 to VB.Net) - 1995&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Lua&lt;/span&gt; - 1993&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Perl &lt;/span&gt;- 1987&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Erlang&lt;/span&gt; - 1987&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;C++&lt;/span&gt; - 1983&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;C &lt;/span&gt;- 1972&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Cobol&lt;/span&gt; - 1959&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Fortran&lt;/span&gt; - 1957&lt;br /&gt;&lt;br /&gt;The debut of Python is a rather recent event in the history of computer language chronologically.&lt;br /&gt;&lt;br /&gt;But another meaning implied by 'Old' is related to the vitality or dynamism of the language. A low public profile seems to indicates there is not much going on in this language.&lt;br /&gt;&lt;br /&gt;It is entirely a matter of perception.&lt;br /&gt;&lt;br /&gt;To me, python never feels old. The language is continuously improving and evolving. The community is healthy and the members on the mailing list are friendly, helpful and intelligent. The language users are willing to embrace &lt;a href="http://www.python.org/dev/peps/pep-3000"&gt;changes&lt;/a&gt; to make Python better.&lt;br /&gt;&lt;br /&gt;It is in stark contrast with Java. The discussion of the &lt;span style="font-style: italic;"&gt;Closure&lt;/span&gt; has highlighted the inertia of the Java language.&lt;br /&gt;&lt;br /&gt;But don't get me wrong: in other arena of Java eco-system, there are still a lot of energy and innovation such as &lt;a href="http://openjdk.java.net/"&gt;OpenJDK&lt;/a&gt;. OpenJDK may even eventually force the hand of Microsoft to open-source their CLR. (Hopefully)&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;3) Is Python more powerful than Java?&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;blockquote&gt;Wow, it is a &lt;a href="http://en.wikipedia.org/wiki/Flamebait"&gt;dangerous questions&lt;/a&gt;! My &lt;a href="http://en.wikipedia.org/wiki/Political_correctness"&gt;PC&lt;/a&gt; answer is: they are designed for different tasks, and each of them have their distinct advantages in the problem domain that these languages are created to serve.&lt;br /&gt;&lt;br /&gt;Besides, everyone has their own notion of Powerfulness. We will end up comparing orange to apple.&lt;br /&gt;&lt;br /&gt;For me, power is only one of the consideration. Python's readability is another attractive feature. While Python cannot stop a programmer from writing cryptic code, at least it spares you the eyesore caused by bizarre programming styles that some 'gifted' programmers use.&lt;br /&gt;&lt;br /&gt;&lt;/blockquote&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;4) Isn't Python dead?&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;blockquote&gt;&lt;span&gt;The news of Python's death is largely exaggerated.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/blockquote&gt;&lt;span style="font-style: italic;"&gt;Postscript&lt;/span&gt;:&lt;br /&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;I think the latest announcement of &lt;a href="http://code.google.com/appengine"&gt;Google App Engine&lt;/a&gt; will make a wider audience aware of Python and how good it is.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Lately a lot of innovation in programming languages (groovy, python and erlang for example) have an European root. Is it a sign that US has under-invested in research in both public and private sections?&lt;/li&gt;&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/8010693451801110862/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=8010693451801110862' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/8010693451801110862'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/8010693451801110862'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/04/common-questions-about-working-as.html' title='Common Questions about Working as a Python Developer'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-7802974804856594000</id><published>2008-03-26T01:19:00.001+11:00</published><updated>2008-03-26T01:19:43.021+11:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Draft</title><content type='html'>&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/7802974804856594000'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/7802974804856594000'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-2731528966469238117</id><published>2008-03-09T09:24:00.001+11:00</published><updated>2008-03-09T09:24:50.167+11:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>R</title><content type='html'>&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/2731528966469238117'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/2731528966469238117'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-2793215571347951389</id><published>2008-03-07T21:48:00.001+11:00</published><updated>2008-03-07T21:48:33.814+11:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Draft</title><content type='html'>&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/2793215571347951389'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/2793215571347951389'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-5839983411439621941</id><published>2008-02-19T08:15:00.002+11:00</published><updated>2008-03-02T16:43:52.657+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='list'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><title type='text'>Erlang Mailing List - String as List 3</title><content type='html'>This is the last installment of the digest of the topic of "String as List".&lt;br /&gt;&lt;span class="HcCDpe"&gt;&lt;span email="hasan.veldstra@gmail.com" class="EP8xU" style="color: rgb(204, 0, 96);"&gt;&lt;br /&gt;Hasan Veldstra&lt;/span&gt;&lt;/span&gt; opined that lack of library support make string operation difficult. He was working on an Erlang Unicode string library based on ICU (&lt;a href="http://www.icu-project.org/" target="_blank"&gt;http://www.icu-project.org/&lt;/a&gt;) for the past week, and expected to release an alpha version soon.&lt;br /&gt;&lt;br /&gt;&lt;span class="HcCDpe"&gt;&lt;span email="exta7@walla.com" class="EP8xU" style="color: rgb(0, 148, 134);"&gt;Zvi&lt;/span&gt;  &lt;span class="lDACoc"&gt;&lt;/span&gt;&lt;/span&gt;suggested that in the case of 64 bit implementation of Erlang, a "String as list" representation is wasteful.&lt;br /&gt;&lt;br /&gt;&lt;span class="HcCDpe"&gt;&lt;span email="ok@cs.otago.ac.nz" class="EP8xU" style="color: rgb(121, 6, 25);"&gt;Richard A. O'Keefe &lt;/span&gt; seems to be annoyed by this suggestion (and other comment on Lisp machine), and advocated that if space is a concern, the programmer can use an alternative representation such as binary.&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="HcCDpe"&gt;&lt;span email="rvirding@gmail.com" class="EP8xU" style="color: rgb(200, 137, 0);"&gt;Robert Virding &lt;/span&gt;&lt;/span&gt;clarify the leex (function token/2 and token/3) is re-entrant. However, yecc is not and must be fed with a completed list of token.&lt;br /&gt;&lt;br /&gt;&lt;span class="HcCDpe"&gt;&lt;span email="dmitriid@gmail.com" class="EP8xU" style="color: rgb(121, 6, 25);"&gt;Dmitrii 'Mamut' Dimandt &lt;/span&gt; &lt;/span&gt;gave an example of why "string as list" is bad idea, because:&lt;br /&gt;&lt;blockquote style="font-style: italic;"&gt;&lt;br /&gt;"This is only true for ASCII text. Non-ASCII gets screwed up badly.&lt;br /&gt;&lt;br /&gt;lists:reverse("text")     %% gives you "text"&lt;br /&gt;lists:reverse("текст")  %% Russian for text becomes [130,209,129,209,186,208,181&lt;div bgcolor="#ffffff" text="#000000"&gt;&lt;wbr&gt;,208,130,209] which is clearly not I wanted"&lt;/div&gt;&lt;/blockquote&gt;&lt;div bgcolor="#ffffff" text="#000000"&gt;&lt;br /&gt;&lt;/div&gt;  &lt;span class="HcCDpe"&gt;&lt;span email="chsu79@gmail.com" class="EP8xU" style="color: rgb(91, 16, 148);"&gt;Christian S&lt;/span&gt;  &lt;span class="lDACoc"&gt;has a solution to this problem:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;blockquote style="font-style: italic;"&gt;"This is what you should have in your list:&lt;br /&gt;1&gt; Text = [16#442, 16#435, 16#43a, 16#441, 16#442].&lt;br /&gt;[1090,1077,1082,1089,1090]&lt;br /&gt;&lt;br /&gt;You can convert it to utf8 for output&lt;br /&gt;&lt;br /&gt;2&gt; xmerl_ucs:to_utf8(Text).&lt;br /&gt;[209,130,208,181,208,186,209&lt;div id="1fvf" class="ArwC7c ckChnd"&gt;&lt;wbr&gt;,129,209,130]&lt;br /&gt;&lt;br /&gt;And you can reverse it and convert that to utf8.&lt;br /&gt;&lt;br /&gt;3&gt; xmerl_ucs:to_utf8(lists&lt;wbr&gt;:reverse(Text)).&lt;br /&gt;[209,130,209,129,208,186,208&lt;wbr&gt;,181,209,130]"&lt;br /&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div id="1fvf" class="ArwC7c ckChnd"&gt;&lt;br /&gt;A positive message from &lt;span class="HcCDpe"&gt;&lt;span email="bjorn@erix.ericsson.se" class="EP8xU" style="color: rgb(51, 0, 153);"&gt;Bjorn Gustavsson&lt;/span&gt;&lt;/span&gt;. He confirmed that is possible to use lists of Unicode characters easily. In Wings 3D, he have implemented a limited support for Unicode.&lt;br /&gt;&lt;br /&gt;&lt;span class="HcCDpe"&gt;&lt;span email="erlang@gmail.com" class="EP8xU" style="color: rgb(0, 131, 145);"&gt;Joe Armstrong&lt;/span&gt;&lt;/span&gt; weighted in on 19 Feb. He suggested "One problem with strings unicode, regexps etc. is how you input the string.". He proposed several new syntax to capture regex or xml string.&lt;br /&gt;&lt;br /&gt;Basically from this point onward the thread has shifted gear into forward looking mood. The discussion now focused on the best way to represent a string in Erlang.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/5839983411439621941/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=5839983411439621941' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/5839983411439621941'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/5839983411439621941'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/02/erlang-mailing-list-string-as-list-3.html' title='Erlang Mailing List - String as List 3'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-3796997893852752275</id><published>2008-02-19T04:09:00.012+11:00</published><updated>2008-02-19T08:19:25.094+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='list'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><title type='text'>Erlang Mailing List - String as List 2</title><content type='html'>&lt;span class="HcCDpe"&gt;&lt;span email="exta7@walla.com" class="EP8xU" style="color: rgb(0, 148, 134);"&gt;Zvi&lt;/span&gt;&lt;span class="lDACoc"&gt; responded to &lt;/span&gt;&lt;/span&gt;&lt;span class="HcCDpe"&gt;&lt;span email="chsu79@gmail.com" class="EP8xU" style="color: rgb(91, 16, 148);"&gt;Christian S&lt;/span&gt;&lt;/span&gt;&lt;span class="HcCDpe"&gt;&lt;span class="lDACoc"&gt;'s "recommended large text mass handling modules". He said, if for efficiency we  represent  a string as binary, the code will become too verbose. For example,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;blockquote style="font-style: italic;"&gt;&lt;span class="HcCDpe"&gt;&lt;span class="lDACoc"&gt;&lt;/span&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt; &lt;&lt;"ABC"&gt;&gt;, instead of "ABC"&lt;/li&gt;&lt;li&gt; &lt;&lt;s1 s2="" bytes=""&gt;&lt; &lt;/s1&gt; S1 / bytes, S2 / bytes &lt;s1 s2="" bytes=""&gt;&gt;&gt; instead of S1++S2&lt;/s1&gt;&lt;/li&gt;&lt;li&gt; using file:delete(binary_to_list(Filename)) instead of file:delete(Filename)&lt;/li&gt;&lt;li&gt; xmerl and erlsom parse into lists and not binaries&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;div id="1fhc" class="ArwC7c ckChnd"&gt;&lt;span class="HcCDpe"&gt;&lt;span email="dustin.whitney@gmail.com" class="EP8xU" style="color: rgb(185, 0, 56);"&gt;Dustin Whitney&lt;/span&gt;&lt;/span&gt; concurred the verboseness, and recommend a new string type.&lt;span class="HcCDpe"&gt;&lt;span email="vychodil.hynek@gmail.com" class="EP8xU" style="color: rgb(132, 102, 0);"&gt;&lt;/span&gt;&lt;span class="lDACoc"&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="HcCDpe"&gt;&lt;span email="bjorn@erix.ericsson.se" class="EP8xU" style="color: rgb(51, 0, 153);"&gt;Bjorn Gustavsson&lt;/span&gt;&lt;/span&gt; responded to eariler &lt;span class="HcCDpe"&gt;&lt;span class="lDACoc"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="HcCDpe"&gt;&lt;span email="kevin@scaldeferri.com" class="EP8xU" style="color: rgb(204, 0, 96);"&gt;Kevin Scaldeferri&lt;/span&gt;&lt;/span&gt;'s opinion on list inefficiency. He suggested, in the case of appending:&lt;br /&gt;&lt;blockquote style="font-style: italic;"&gt;&lt;br /&gt;"You can append by building a deep list and only flatten it at the end.&lt;br /&gt;&lt;br /&gt;  NewString = [AListOfChars|AnotherListOfChars]&lt;br /&gt;&lt;div id="1fi4" class="ArwC7c ckChnd"&gt;&lt;br /&gt;or&lt;br /&gt;  NewString = [AListOfChars,ACharacter]&lt;br /&gt;&lt;br /&gt;Or you can simply do a recursion (not tail-recursion) and use&lt;br /&gt;the '++' operator. That will be efficient, because the recursion will&lt;br /&gt;ensure that the '++' operators are executed in a right-to-left order."&lt;/div&gt;&lt;/blockquote&gt;&lt;div id="1fi4" class="ArwC7c ckChnd"&gt;&lt;br /&gt;&lt;span class="HcCDpe"&gt;&lt;span email="chsu79@gmail.com" class="EP8xU" style="color: rgb(91, 16, 148);"&gt;Christian S  &lt;/span&gt;&lt;/span&gt;suggested an alternative to one of &lt;span class="HcCDpe"&gt;&lt;span email="exta7@walla.com" class="EP8xU" style="color: rgb(0, 148, 134);"&gt;Zvi&lt;/span&gt;&lt;span class="lDACoc"&gt;'s string-as-binary example ("&lt;/span&gt;&lt;/span&gt;  &lt;&lt;s1 s2="" bytes=""&gt;&lt;  &lt;/s1&gt; S1 / bytes, S2 / bytes &gt;&gt; &lt;s1 s2="" bytes=""&gt; instead of S1++S2")&lt;span class="HcCDpe"&gt;&lt;span class="lDACoc"&gt;:&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/s1&gt;&lt;blockquote style="font-style: italic;"&gt;"[S1,S2] and then do iolist_to_binary/1 if you need it flat."&lt;/blockquote&gt;&lt;br /&gt;Then focus of discussion shifted to a tool called Leex for a while.&lt;br /&gt;&lt;br /&gt;&lt;span class="HcCDpe"&gt;&lt;span email="ok@cs.otago.ac.nz" class="EP8xU" style="color: rgb(121, 6, 25);"&gt;Richard A. O'Keefe &lt;/span&gt;&lt;/span&gt;weighted in and expressed his opinion on a number of issues.&lt;br /&gt;&lt;br /&gt;First of all, the String as list should not be dismissed as "historical reason" only:&lt;br /&gt;&lt;blockquote&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;"it is simplicity (the preferred&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;sequence type in Erlang is lists, and strings are just sequences of&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;characters), power (because any time someone defines a function on&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;lists you get to use it on strings, and there are *lots* of useful&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;list functions), and processing efficiency (because working down&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;one character at a time doesn't require allocating *any* new storage,&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;not even for slices)."&lt;/span&gt;&lt;/blockquote&gt;He suggested the following rule of thumb for text handling&lt;br /&gt;&lt;blockquote style="font-style: italic;"&gt;&lt;br /&gt;"The guiding rule is&lt;br /&gt;- if you just want to hold onto a string for a while, use a binary&lt;br /&gt;- if you want to build or process a string, use a list (possibly in&lt;br /&gt;Erlang a deep list).&lt;br /&gt;- if you want to represent something that has structure, and you want&lt;br /&gt;your program to be aware of that structure, turn it into a&lt;br /&gt;structured&lt;br /&gt;data value and work with it in that form."&lt;/blockquote&gt;and some myth-busting on appending string performance issue:&lt;br /&gt;&lt;blockquote style="font-style: italic;"&gt;&lt;br /&gt;"Right, this is not efficient.  But it is spectacularly&lt;br /&gt;inefficient in programming languages with more conventional&lt;br /&gt;representations.&lt;br /&gt;It is O(n**2).  For example,&lt;br /&gt;  x = ""&lt;br /&gt;  for (i = 1; i &lt;= 100000; i++) x = x "a"  just took 30.5 seconds in awk on my machine, 62.2 seconds in Perl, and a massive 631 seconds in Java.  That was using gcj; I lost patience with the Sun SDK and killed it.  (AWK faster than Java?  Yes, it often is.) Building the same string in Erlang using        loop(100000, "") where        loop(0, S) -&gt; lists:reverse(S);&lt;br /&gt;  loop(N, S) -&gt; loop(N-1, "a"++S).&lt;br /&gt;takes 0.15 second on the same machine."&lt;/blockquote&gt;&lt;br /&gt;&lt;span class="HcCDpe"&gt;&lt;span email="masklinn@masklinn.net" class="EP8xU" style="color: rgb(121, 6, 25);"&gt;Masklinn&lt;/span&gt;  &lt;span class="lDACoc"&gt;pointed out later that Java benchmark is off because the example is not using StringBuffer.&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;End of Part 2&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;span class="HcCDpe"&gt;&lt;span email="chsu79@gmail.com" class="EP8xU" style="color: rgb(91, 16, 148);"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/3796997893852752275/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=3796997893852752275' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/3796997893852752275'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/3796997893852752275'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/02/erlang-mailing-list-string-as-list-2.html' title='Erlang Mailing List - String as List 2'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-263759057007670019</id><published>2008-02-19T03:30:00.006+11:00</published><updated>2008-02-19T08:15:33.127+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='list'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><title type='text'>Erlang Mailing List - String as List 1</title><content type='html'>A discussion named "String as List" has been running, at the time of writing, for 6 days and 56 posts already. A lot of interesting idea and insight into Erlang were poured into this discussion. I simply want to write down some interesting technical points in this blog as a digest, as a reference. *&lt;br /&gt;&lt;br /&gt;It all started with a question from &lt;span class="HcCDpe"&gt;&lt;span email="tsuraan@gmail.com" class="EP8xU" style="color: rgb(0, 104, 28);"&gt;tsuraan&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;blockquote style="font-style: italic;"&gt;"Why does erlang internally represent strings as lists?"&lt;/blockquote&gt;&lt;br /&gt;First response from &lt;span class="HcCDpe"&gt;&lt;span email="masklinn@masklinn.net" class="EP8xU" style="color: rgb(121, 6, 25);"&gt;Masklinn&lt;/span&gt;&lt;span class="lDACoc"&gt;, and actually many other contributors share the same idea:&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;blockquote style="font-style: italic;"&gt;&lt;span class="HcCDpe"&gt;&lt;span class="lDACoc"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;"A lot of functional languages represent strings as lists rather than&lt;br /&gt;arrays because lists are their basic collection datatype, and this allows the use of all the list-related functions on strings."&lt;/blockquote&gt;&lt;br /&gt;&lt;span class="HcCDpe"&gt;&lt;span email="chsu79@gmail.com" class="EP8xU" style="color: rgb(91, 16, 148);"&gt;Christian S &lt;/span&gt; put it in a shorter phrase: "historical reason". As he pointed out, "internal" is not right word in the question because string was not a special type or abstraction built on top of list. A string is a list.&lt;br /&gt;&lt;br /&gt;He then suggested the following module for handling large text:&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;blockquote&gt;&lt;span style="font-style: italic;"&gt;"- binaries (features representation that is 1:1 with the character&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;encoding itself, now also (R12B) with efficient scanning and&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;tail-construction)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;- iolists (features cheap concatenation of large texts)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;- list of words and a word-dictionary (features quicker scanning of words, efficient storage too)"&lt;/span&gt;&lt;span class="HcCDpe"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="HcCDpe"&gt;&lt;span class="lDACoc"&gt;Then &lt;/span&gt;&lt;/span&gt;&lt;span class="HcCDpe"&gt;&lt;span email="kevin@scaldeferri.com" class="EP8xU" style="color: rgb(204, 0, 96);"&gt;Kevin Scaldeferri &lt;/span&gt;&lt;/span&gt;&lt;span class="HcCDpe"&gt;&lt;span class="lDACoc"&gt;throws in a different point: list is not a good representation because&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;blockquote&gt;&lt;span style="font-style: italic;" class="HcCDpe"&gt;&lt;span class="lDACoc"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span style="font-style: italic;"&gt;First off, I append to strings a lot more than I prepend to them.  Yeah, I&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt; could work with reversed strings, but that's a hack to deal with using the &lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;wrong data type.  Plus, I probably prefix match more often than suffix matching&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;(although this is less lopsided than append vs. prepend) ..."&lt;/span&gt;&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;Now we have a diversion, &lt;span class="HcCDpe"&gt;&lt;span email="vlm@lionet.info" class="EP8xU" style="color: rgb(0, 131, 145);"&gt;Lev Walkin &lt;/span&gt;&lt;/span&gt;responded to earlier Robert's post about that list is an ideal string representation because it can easily accommodate UTF-16 and UTF-32.&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;&lt;span style="font-style: italic;"&gt;"Small correction: UTF-16 and UTF-32 are practically dead, you certainly&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;need to think in terms of UTF-8 nowadays."&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/blockquote&gt;&lt;span class="HcCDpe"&gt;Now we are going to have several threads going on under the same thread subject. Let's get to it in my next blog. But for now I will ignore UTF-8 vs UTF16/32 discussions in order to focus on Erlang features.&lt;br /&gt;&lt;br /&gt;End of Part 1&lt;br /&gt;&lt;span class="lDACoc"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-size:85%;"&gt;* It is about summarization, so quote will be edited liberally for clarity, rather than reproduced word for word.&lt;br /&gt;&lt;/span&gt;</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/263759057007670019/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=263759057007670019' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/263759057007670019'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/263759057007670019'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/02/erlang-mailing-list-string-as-list-1.html' title='Erlang Mailing List - String as List 1'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-9011218246315898500</id><published>2008-02-18T22:06:00.001+11:00</published><updated>2008-02-18T22:06:59.168+11:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Draftttt</title><content type='html'>&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/9011218246315898500'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/9011218246315898500'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-4297189587515149228</id><published>2008-02-12T05:10:00.003+11:00</published><updated>2008-02-18T22:18:12.032+11:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Paradox in Software I</title><content type='html'>There are many paradox in software.&lt;br /&gt;&lt;br /&gt;The first paradox I can think of is the misconception of "ease of use".&lt;br /&gt;&lt;br /&gt;Some technology, on first glance, very easy to use. Two mouse clicks and one "Ctrl-S", the outcome is saved into a file and job is done.&lt;br /&gt;&lt;br /&gt;However, it is &lt;span style="font-style: italic;"&gt;hard &lt;/span&gt;actually.&lt;br /&gt;&lt;br /&gt;I am not a Zen master. Please let me explain.&lt;br /&gt;&lt;br /&gt;As in any statement, the meaning depends on the context and situation.&lt;br /&gt;&lt;br /&gt;In a sense point-and-click  help you&lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/4297189587515149228'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/4297189587515149228'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-8866917822435065934</id><published>2008-02-06T06:02:00.011+11:00</published><updated>2008-02-19T05:51:21.246+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Development'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><title type='text'>Why I choose to learn Erlang?</title><content type='html'>Just think it may be worthwhile to commit it in writing for sharing.&lt;br /&gt;&lt;br /&gt;In summary, my decision is only partially based on the technical merit or language features.&lt;br /&gt;&lt;br /&gt;First take a look back at year 2001. Motivated by the desire to find a better, more reliable way to develop software, I learned and switched to Linux platform in this year. For anyone serious in learning unix family OS,  &lt;span style="font-style: italic;"&gt;bash&lt;/span&gt;, &lt;span style="font-style: italic;"&gt;awk&lt;/span&gt;, &lt;span style="font-style: italic;"&gt;sed &lt;/span&gt;and &lt;span style="font-style: italic;"&gt;perl &lt;/span&gt;scripting are literally the "basic dance steps".&lt;br /&gt;&lt;br /&gt;Then I moved on to Python (see my first blog if you have plenty of time to waste :-) ).&lt;br /&gt;&lt;br /&gt;Now fast forward a few years. From Python, I soon learn about these big names such as &lt;a href="http://www.python.org/%7Eguido/"&gt;Guido van Rossum&lt;/a&gt; and &lt;a href="http://norvig.com/"&gt;Peter Norvig&lt;/a&gt; etc, and for some reasons, stumbled upon  &lt;a href="http://www.paulgraham.com/"&gt;Paul Graham&lt;/a&gt; and his famous essays.&lt;br /&gt;&lt;br /&gt;One of his famous idea on computer language is: there are reasons why some languages are superior than other languages, and Lisp &lt;span style="font-style: italic;"&gt;is &lt;/span&gt;the most powerful among them. (Alright, I made the assertion for him, he probably never really put it exactly this way. Did he?)&lt;br /&gt;&lt;br /&gt;So, convinced by the argument that a language is key to a programmer's productivity, I decided to give Lisp a try. The syntax, or the lack of it, is indeed a challenge, but the concept of "code is data, data is code" is very powerful. &lt;a href="http://www.gigamonkeys.com/book/macros-standard-control-constructs.html"&gt;Macros&lt;/a&gt; and &lt;a href="http://www.gigamonkeys.com/book/object-reorientation-generic-functions.html"&gt;CLOS &lt;/a&gt;are effective techniques in Lisp programming.&lt;br /&gt;&lt;br /&gt;Fortunately there are a lot of resource.&lt;br /&gt;&lt;br /&gt;Actually I should put it this way: "too much resource".&lt;br /&gt;&lt;br /&gt;Indeed, if you look at variety in the implementations of mainstream Lisp, and its derivative, Scheme, you will find these choices: Common lisp (clisp), CMUCL (CMU lisp), Kawa (Scheme on JVM), PLT Scheme, Scheme 48 etc... The list goes on and on.&lt;br /&gt;&lt;br /&gt;It is the common phenomena of *nix world: the Fragmentation.&lt;br /&gt;&lt;br /&gt;As a result, for any partitioner in commercial software world, it becomes a hard problem: given limited free time for self-study, we are confronted with these choices:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;which language (Lisp or Scheme)?&lt;/li&gt;&lt;li&gt;which version (R5RS or R6RS or some subset, in the case of Scheme)?&lt;/li&gt;&lt;li&gt;which implementation of the language (the usual portability vs power/library issue)?&lt;/li&gt;&lt;/ul&gt;It makes my research long and tedious. If I bet on a wrong horse, I will lose a lot of valuable time, right? What if I am in a middle of a project and encounter a bug in the lisp/scheme interpreter I am using, will there be adequate community support? What if...&lt;br /&gt;&lt;br /&gt;Does the risks justify the potential gain from the use of Lisp/Scheme?&lt;br /&gt;&lt;br /&gt;Then I discovered Erlang.&lt;br /&gt;&lt;br /&gt;The following reasons make me think, form my particular situation and career need, Erlang is probably the safest  bet (or most cost-effective investment):&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;It has all the beauty and expressiveness of a functional language&lt;/li&gt;&lt;li&gt;You gain concurrency for free (built-in support in syntax and kernel)&lt;br /&gt;&lt;/li&gt;&lt;li&gt;You gain fault tolerance for free&lt;/li&gt;&lt;li&gt;You gain distributed processing for free&lt;/li&gt;&lt;li&gt;The language and library are robust and battle-tested in demanding Telecom industry.&lt;/li&gt;&lt;li&gt;It does not suffer from the implementation fragmentation of Lisp/Scheme.&lt;/li&gt;&lt;li&gt;The language evolution is well controlled (by Ericsson)&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;It is a pragmatic choice from a software builder's point of view.</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/8866917822435065934/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=8866917822435065934' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/8866917822435065934'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/8866917822435065934'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/02/why-i-choose-to-learn-erlang.html' title='Why I choose to learn Erlang?'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-4268682979256812423</id><published>2008-02-04T22:28:00.001+11:00</published><updated>2008-02-07T04:47:09.929+11:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A dream</title><content type='html'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/4268682979256812423'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/4268682979256812423'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-6517396113425090422</id><published>2008-02-03T15:22:00.000+11:00</published><updated>2008-02-12T05:26:36.724+11:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Paradox in Software I</title><content type='html'>There are many paradox in software and the industry.&lt;br /&gt;&lt;br /&gt;Paradox number one is "easiness": Some technology is on first glance very easy to use, but once they are put into daily work, it may turn out is be an absolute productivity black hole.&lt;br /&gt;&lt;br /&gt;As if I am a Zen master but I am not.&lt;br /&gt;&lt;br /&gt;MS Window is a good example. It is simple to install. It is simple to use. All you have to know is to point and click. So, if it is easy to use, it should make our everyday tasks easy.&lt;br /&gt;&lt;br /&gt;However, especially when it comes to the domain of Enterprise computing, this is simply  not true. &lt;br /&gt;&lt;br /&gt;More often than not, user in an commerical setting</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/6517396113425090422'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/6517396113425090422'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-3625411911597323714</id><published>2008-02-02T17:56:00.001+11:00</published><updated>2008-02-15T14:59:41.799+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Euler'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Little Erlang Exercise 6</title><content type='html'>Problem Definition: &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=6"&gt;Euler Problem 6&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;This problem is very straight-forward.&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;&lt;br /&gt;"""&lt;br /&gt;The sum of the squares of the first ten natural numbers is,&lt;br /&gt;1+ 2^2 + ... + 10^2 = 385&lt;br /&gt;&lt;br /&gt;The square of the sum of the first ten natural numbers is,&lt;br /&gt;(1 + 2 + ... + 10)^2 = 55 = 3025&lt;br /&gt;&lt;br /&gt;Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.&lt;br /&gt;&lt;br /&gt;Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.&lt;br /&gt;"""&lt;br /&gt;&lt;br /&gt;if __name__ == "__main__":&lt;br /&gt;  Max = 100&lt;br /&gt;  SumOfSquare = sum([pow(X, 2) for X in xrange(1, Max + 1)])&lt;br /&gt;  SquareOfSum = pow(sum([X for X in xrange(1, Max + 1)]), 2)&lt;br /&gt;  print "%d" % (SquareOfSum - SumOfSquare)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Here is the corresponding erlang version.&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;&lt;br /&gt;-module(p6).&lt;br /&gt;-export([find_diff/1]).&lt;br /&gt;&lt;br /&gt;find_diff(Max)-&gt;&lt;br /&gt;  SumOfSq = lists:foldl(fun (X, Y) -&gt; X + Y end, 0, [X*X || X &lt;- lists:seq(1, Max)]),&lt;br /&gt;  SqOfSum = math:pow(&lt;br /&gt;              lists:foldl(fun (X, Y) -&gt; X + Y end, 0, [X || X &lt;- lists:seq(1, Max)]),&lt;br /&gt;              2),&lt;br /&gt;  SqOfSum - SumOfSq.&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Basically, both python and erlang offer very powerful list comprehension syntax.</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/3625411911597323714/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=3625411911597323714' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/3625411911597323714'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/3625411911597323714'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/02/little-erlang-exercise-6.html' title='Little Erlang Exercise 6'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-2545374392026607944</id><published>2008-02-01T23:17:00.001+11:00</published><updated>2008-02-01T23:37:33.912+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Euler'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Little Erlang Exercise 5</title><content type='html'>Problem Definition: &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=5"&gt;Euler Problem 5&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;I am rather happy with this python version because I can basically get it done in about 15 min in total. Some useful primitives have been developed in module p3 (See my previous post, &lt;a href="http://www.blogger.com/2008/01/little-erlange-exercise-3_29.html"&gt;little erlang exercise 3&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;&lt;br /&gt;"""&lt;br /&gt;2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.&lt;br /&gt;&lt;br /&gt;What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?&lt;br /&gt;"""&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;from p3 import isprime, factorise&lt;br /&gt;&lt;br /&gt;def product(x, y):&lt;br /&gt; return x * y&lt;br /&gt;&lt;br /&gt;if __name__ == "__main__":&lt;br /&gt; factors = dict()&lt;br /&gt; for l in [factorise(i) for i in xrange(2, 21)]:&lt;br /&gt;     tmp = dict()&lt;br /&gt;     # count them&lt;br /&gt;     for n in l:&lt;br /&gt;         tmp[n] = 1 + tmp.get(n, 0)&lt;br /&gt;     # reguster the max frequency of factor&lt;br /&gt;     for k, v in tmp.items():&lt;br /&gt;         factors[k] = max(factors.get(k, 0), v)&lt;br /&gt;&lt;br /&gt; print reduce(product, [pow(k, v) for k,v in factors.items()])&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;However, the erlang version took me a considerable time to complete. The problem is mainly to switch from a procedural mindset to a functional mindset.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;&lt;br /&gt;&lt;br /&gt;-module(p5).&lt;br /&gt;-import(p3).&lt;br /&gt;-export([main/0, get_factor_freq_lst/1]).&lt;br /&gt;&lt;br /&gt;%% run this to print the result&lt;br /&gt;main() -&gt;&lt;br /&gt;  L = [ p3:factorise(X) || X &lt;- lists:seq(1, 20)],   &lt;br /&gt;  io:format("~f~n", [product(get_factor_freq(L))]).   &lt;br /&gt;&lt;br /&gt;get_factor_freq(L) -&gt;&lt;br /&gt;  Dict = dict:new(),&lt;br /&gt;  get_factor_freq(L, Dict).&lt;br /&gt;&lt;br /&gt;%% spec: H, T are list of list of number&lt;br /&gt;%% e.g. [ [N1, N1, N2...], [N1, N2...], ...]&lt;br /&gt;get_factor_freq([H|T], Dict) -&gt;&lt;br /&gt;  Dist = get_factor_freq_lst(H),&lt;br /&gt;  D1 = dict:from_list(Dist),&lt;br /&gt;  D2 = dict:merge(fun(K, X, Y) -&gt; update_if_bigger(K, X, Y) end, D1, Dict),&lt;br /&gt;  get_factor_freq(T, D2);&lt;br /&gt;get_factor_freq([], Dict) -&gt;&lt;br /&gt;  dict:to_list(Dict).  %% has to convert to list&lt;br /&gt;&lt;br /&gt;%% Aux function&lt;br /&gt;update_if_bigger(_, Initial, NewValue) when Initial &lt; NewValue -&gt;&lt;br /&gt;  NewValue;&lt;br /&gt;update_if_bigger(_, Initial, _) -&gt;&lt;br /&gt;  Initial.&lt;br /&gt;&lt;br /&gt;%% This function assumes the list is sorted&lt;br /&gt;%% This function is to delinate a list of number&lt;br /&gt;%% into a list of {Key, Frequency}&lt;br /&gt;get_factor_freq_lst([A|T]) when is_integer(A) -&gt;&lt;br /&gt;  get_factor_freq_lst([{A, 1}|T]);&lt;br /&gt;get_factor_freq_lst([{A, N}, A|T]) when is_integer(A) -&gt;&lt;br /&gt;  get_factor_freq_lst([{A, N + 1}|T]);&lt;br /&gt;get_factor_freq_lst([{A, N}, B|T]) when is_integer(A), is_integer(B), A /= B -&gt;&lt;br /&gt;  get_factor_freq_lst([{B, 1}|T] ++ [{A, N}] );&lt;br /&gt;get_factor_freq_lst(L) -&gt;&lt;br /&gt;  L.&lt;br /&gt;&lt;br /&gt;%% find the product of a list of tuple {Base, Power)&lt;br /&gt;product(L) -&gt;&lt;br /&gt;  product(L, 1).&lt;br /&gt;product([], Sum) -&gt;&lt;br /&gt;  Sum;&lt;br /&gt;product([{Base, Power}|T], Sum) -&gt;&lt;br /&gt;  product(T, Sum * math:pow(Base, Power)).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/2545374392026607944/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=2545374392026607944' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/2545374392026607944'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/2545374392026607944'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/02/little-erlang-exercise-5.html' title='Little Erlang Exercise 5'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-8422387224070078892</id><published>2008-01-31T21:37:00.000+11:00</published><updated>2008-01-31T21:57:30.595+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Euler'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Little Erlang Exercise 4</title><content type='html'>Problem Definition: &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=4"&gt;Euler Problem 4&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Through this exercise, I realised that I can reverse a string using a [::-1] operator. Really cryptic, but yet handy.&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;&lt;br /&gt;"""&lt;br /&gt;A palindromic number reads the same both ways. The largest palindrome&lt;br /&gt;made from the product of two 2-digit numbers is 9009 = 91 x 99.&lt;br /&gt;&lt;br /&gt;Find the largest palindrome made from the product of two 3-digit numbers.&lt;br /&gt;"""&lt;br /&gt;&lt;br /&gt;def isPalindromic(Num):&lt;br /&gt;  """&lt;br /&gt;    For string reversal, pls check this url:&lt;br /&gt;&lt;br /&gt;      http://www.python.org/doc/2.3.5/whatsnew/section-slices.html&lt;br /&gt;&lt;br /&gt;  """&lt;br /&gt;  N = str(Num)&lt;br /&gt;  l = len(N)&lt;br /&gt;  div, mod = divmod(l, 2)&lt;br /&gt;  if mod == 1: # odd&lt;br /&gt;    fh = N[0:l/2]&lt;br /&gt;    sh = N[1+l/2:]&lt;br /&gt;    # print "%s %s" % (fh, sh)&lt;br /&gt;  else:&lt;br /&gt;    fh = N[0:l/2]&lt;br /&gt;    sh = N[l/2:]&lt;br /&gt;  return fh == sh[::-1]&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;if __name__ == "__main__":&lt;br /&gt;  g = [ x * y for x in xrange(100, 999) for y in xrange(100, 999) ]&lt;br /&gt;  print max(filter(lambda x: isPalindromic(x), g))&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Here comes an erlang version. In this rare occasion, erlang runs faster than python. It is probably because, first of all, the list comprehension I used in erlang produces a smaller list. Secondly the test of palindromic is more straightforward in the erlang version. &lt;br /&gt;&lt;br /&gt;I will revisit the python version, later, when I get a bit more time.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;&lt;br /&gt;&lt;br /&gt;-module(p4).&lt;br /&gt;-export([findLargestProduct/0]).&lt;br /&gt;&lt;br /&gt;isPalindromic(N) when is_list(N) -&gt;&lt;br /&gt;  N == lists:reverse(N).&lt;br /&gt;&lt;br /&gt;findLargestProduct() -&gt;&lt;br /&gt;  List = [X * Y || X &lt;- lists:seq(100, 999),&lt;br /&gt;                   Y &lt;- lists:seq(100, 999),&lt;br /&gt;                   isPalindromic(integer_to_list(X * Y))],&lt;br /&gt;  lists:max(List).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/8422387224070078892/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=8422387224070078892' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/8422387224070078892'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/8422387224070078892'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/01/little-erlang-exercise-4.html' title='Little Erlang Exercise 4'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-5132302946249986477</id><published>2008-01-29T22:09:00.001+11:00</published><updated>2008-01-29T22:30:37.343+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Euler'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Little Erlang Exercise 3</title><content type='html'>Problem Definition: &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=3"&gt;Euler Problem 3&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Obviously, these scripts did not actually implement the solution. The problem statement required to pick the largest factor, but I just realized I had not done it.&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;&lt;br /&gt;"""&lt;br /&gt;&lt;br /&gt;The prime factors of 13195 are 5, 7, 13 and 29.&lt;br /&gt;&lt;br /&gt;What is the largest prime factor of the number 317584931803?&lt;br /&gt;&lt;br /&gt;"""&lt;br /&gt;&lt;br /&gt;import sys&lt;br /&gt;&lt;br /&gt;primes = []&lt;br /&gt;&lt;br /&gt;def isprime(N):&lt;br /&gt;  """&lt;br /&gt;    Original version use xrange, but caused&lt;br /&gt;&lt;br /&gt;    "OverflowException: long int too large to convert to int"&lt;br /&gt;&lt;br /&gt;    when taking in a large number&lt;br /&gt;   &lt;br /&gt;    So, I have to use while loop to replace "for i in xrange(2, N):"&lt;br /&gt;&lt;br /&gt;    And in order to speed up the process, the prime calculation result&lt;br /&gt;    is cached&lt;br /&gt;  """&lt;br /&gt;  global primes&lt;br /&gt;&lt;br /&gt;  # we have already tested it&lt;br /&gt;  if N in primes:&lt;br /&gt;    return True&lt;br /&gt;&lt;br /&gt;  # use the prime results first &lt;br /&gt;  for i in primes:&lt;br /&gt;    if (N % i) == 0:&lt;br /&gt;      return False&lt;br /&gt;&lt;br /&gt;  # now computation is required&lt;br /&gt;  maxprime = 2&lt;br /&gt;  if len(primes) &gt; 0:&lt;br /&gt;    maxprime = primes[-1]&lt;br /&gt;&lt;br /&gt;  i = maxprime + 1&lt;br /&gt;  while i &lt; N:&lt;br /&gt;    if (N % i) == 0:&lt;br /&gt;      return False&lt;br /&gt;    i = i + 1&lt;br /&gt;&lt;br /&gt;  primes.append(N)&lt;br /&gt;  return True&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;def factorise(N):&lt;br /&gt;  """&lt;br /&gt;    to factorise a integer&lt;br /&gt;    &lt;br /&gt;  """&lt;br /&gt;  # short cut&lt;br /&gt;  global primes&lt;br /&gt;  res = []&lt;br /&gt;&lt;br /&gt;  if N in primes:&lt;br /&gt;    res.append(N)&lt;br /&gt;    return res&lt;br /&gt;&lt;br /&gt;  # original algorithm&lt;br /&gt;  idx = 2&lt;br /&gt;  while idx &lt;= N:&lt;br /&gt;    if isprime(idx):&lt;br /&gt;      div, mod = divmod(N, idx)&lt;br /&gt;      if mod == 0:&lt;br /&gt;        res.append(idx) &lt;br /&gt;        res.extend(factorise(div))&lt;br /&gt;        break&lt;br /&gt;    idx = idx + 1&lt;br /&gt;  return res      &lt;br /&gt;&lt;br /&gt;if __name__ == "__main__":  &lt;br /&gt;  print factorise(int(sys.argv[1]))&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Here comes the erlang version. There is some performance issue with this version. hopefully I would have some free time soon to improve the algorithm.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;&lt;br /&gt;&lt;br /&gt;-module(p3).&lt;br /&gt;-export([isprime/1, factorise/1]).&lt;br /&gt;&lt;br /&gt;%%&lt;br /&gt;%% prime means it is not divisible by any numbers other than 1 and itself.&lt;br /&gt;%%&lt;br /&gt;isprime(1) -&gt;&lt;br /&gt; false;&lt;br /&gt;&lt;br /&gt;isprime(2) -&gt;&lt;br /&gt; true;&lt;br /&gt;&lt;br /&gt;isprime(N) when N &gt; 2 -&gt;&lt;br /&gt; Pid = self(),&lt;br /&gt; C = lists:seq(2, N - 1),&lt;br /&gt; process_flag(trap_exit, true),&lt;br /&gt; lists:map(fun(Div) -&gt;&lt;br /&gt;               spawn_link(fun() -&gt;&lt;br /&gt;                   test_if_divisible(Pid, N, Div)&lt;br /&gt;                   end)&lt;br /&gt;               end, C),&lt;br /&gt; isprime_poll(length(C)).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;%%&lt;br /&gt;%% Message loop: to listen and receive message from voters&lt;br /&gt;%%&lt;br /&gt;isprime_poll(0) -&gt;&lt;br /&gt; true;&lt;br /&gt;isprime_poll(NumVote) -&gt;&lt;br /&gt; receive&lt;br /&gt;   {nondivisible, _} -&gt;&lt;br /&gt;       isprime_poll(NumVote - 1);&lt;br /&gt;   {divisible, _} -&gt;&lt;br /&gt;       clean_mailbox(),&lt;br /&gt;       false&lt;br /&gt; end.&lt;br /&gt;&lt;br /&gt;%%&lt;br /&gt;%% To clear away any messages in mailbox&lt;br /&gt;%%&lt;br /&gt;clean_mailbox() -&gt;&lt;br /&gt; receive&lt;br /&gt;   _ -&gt;&lt;br /&gt;     clean_mailbox()&lt;br /&gt;   after 0 -&gt; ok&lt;br /&gt; end.&lt;br /&gt;&lt;br /&gt;%%&lt;br /&gt;%%&lt;br /&gt;%%&lt;br /&gt;test_if_divisible(Pid, N, Div) -&gt;&lt;br /&gt; case N rem Div of&lt;br /&gt;   0 -&gt; Pid ! {divisible, Div};&lt;br /&gt;   _ -&gt; Pid ! {nondivisible, Div}&lt;br /&gt; end.&lt;br /&gt;&lt;br /&gt;%%%&lt;br /&gt;%%% To factorise an integer - wrappers&lt;br /&gt;%%%&lt;br /&gt;factorise(N) when is_list(N) -&gt;&lt;br /&gt;   N1 = string:to_integer(N),&lt;br /&gt;   factorise(N1, 2, []);&lt;br /&gt;&lt;br /&gt;factorise(N) -&gt;&lt;br /&gt;   factorise(N, 2, []).&lt;br /&gt;&lt;br /&gt;%%%&lt;br /&gt;%%% To factorise an integer&lt;br /&gt;%%%&lt;br /&gt;factorise(N, Factor, Result) when Factor &lt; N+1  -&gt;&lt;br /&gt; case isprime(Factor) of&lt;br /&gt;   true -&gt;&lt;br /&gt;     if&lt;br /&gt;       (N rem Factor) == 0 -&gt;&lt;br /&gt;         %% io:format("Residual is 0 by Factor ~p~n", [Factor]),&lt;br /&gt;         factorise(N div Factor, 2, [Factor|Result]);&lt;br /&gt;       true -&gt;&lt;br /&gt;         factorise(N, Factor + 1, Result)&lt;br /&gt;     end;&lt;br /&gt;   false -&gt;&lt;br /&gt;       factorise(N, Factor + 1, Result)&lt;br /&gt; end;&lt;br /&gt;&lt;br /&gt;factorise(_, _, Result) -&gt;&lt;br /&gt; R = lists:reverse(Result),&lt;br /&gt; %% io:format("~p~n", [R]),&lt;br /&gt; R.&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/5132302946249986477/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=5132302946249986477' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/5132302946249986477'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/5132302946249986477'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/01/little-erlange-exercise-3_29.html' title='Little Erlang Exercise 3'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-4378235237955649537</id><published>2008-01-28T21:12:00.001+11:00</published><updated>2008-01-28T21:12:23.621+11:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Idea A</title><content type='html'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/4378235237955649537'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/4378235237955649537'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-1984766282269043435</id><published>2008-01-26T14:22:00.000+11:00</published><updated>2008-01-29T22:31:44.819+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Euler'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Little Erlang Exercise 2</title><content type='html'>Problem Definition: &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=2"&gt;Euler Problem 2&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;In order to solve this problem in python, I have used the yield keyword to implements a generator to provide a sequence of Fibonacci's numbers. I think I can do a better work in using list comprehension in the main routine to filter and add up the even numbers, but the current version is basically good enough.&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;"""&lt;br /&gt;&lt;br /&gt;Euler 2&lt;br /&gt;&lt;br /&gt;Each new term in the Fibonacci sequence is generated by adding the previous two terms.&lt;br /&gt;By starting with 1 and 2, the first 10 terms will be:&lt;br /&gt;&lt;br /&gt;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...&lt;br /&gt;&lt;br /&gt;Find the sum of all the even-valued terms in the sequence which&lt;br /&gt;do not exceed one million.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;"""&lt;br /&gt;def gen_fib_seq():&lt;br /&gt;a = 1&lt;br /&gt;b = 2&lt;br /&gt;yield a&lt;br /&gt;yield b&lt;br /&gt;try:&lt;br /&gt; while 1:&lt;br /&gt;   c = a + b&lt;br /&gt;   a, b = b, c&lt;br /&gt;   yield c&lt;br /&gt;except StopIteration:&lt;br /&gt; pass&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;if __name__ == "__main__":&lt;br /&gt;b = 0&lt;br /&gt;onemillion = 1000000&lt;br /&gt;for x in gen_fib_seq():&lt;br /&gt; if x % 2 == 0:&lt;br /&gt;   if b + x &amp;lt; onemillion:&lt;br /&gt;     b = b + x&lt;br /&gt;   else:&lt;br /&gt;     break&lt;br /&gt;print b&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The erlang turns out to be even simpler than I thought. First of all, because every object or operation can be abstracted as a process, I do not need special keyword 'yield' to create a special object - generator. Furthermore the guard clause of  function &lt;span style="font-weight: bold;"&gt;acc &lt;/span&gt;remove the need to put in any 'if' or 'break' to do, for example, the even number testing as in the python version.&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;code&gt;-module(p2).&lt;br /&gt;-export([main/0]).&lt;br /&gt;&lt;br /&gt;start() -&amp;gt; spawn(fun() -&amp;gt; fib(0, 1) end).&lt;br /&gt;&lt;br /&gt;fib(N, M) -&amp;gt;&lt;br /&gt;receive&lt;br /&gt; {Pid, next} -&amp;gt;&lt;br /&gt;   Pid ! {self(), N + M},&lt;br /&gt;   fib(M, N+ M)&lt;br /&gt;end.&lt;br /&gt;&lt;br /&gt;get_next_fib(Pid) -&amp;gt;&lt;br /&gt;Pid ! {self(), next},&lt;br /&gt;receive&lt;br /&gt; {_, N} -&amp;gt;&lt;br /&gt;   %% io:format("~p~n", [N])&lt;br /&gt;   N&lt;br /&gt;end.&lt;br /&gt;&lt;br /&gt;%% accumulator&lt;br /&gt;acc(N, Pid, Acc) when (N rem 2) =:= 1 -&amp;gt;&lt;br /&gt; N1 = get_next_fib(Pid),&lt;br /&gt; acc(N1, Pid, Acc);&lt;br /&gt;acc(N, Pid, Acc) when N + Acc &amp;lt; 1000000 -&amp;gt;&lt;br /&gt; N1 = get_next_fib(Pid),&lt;br /&gt; acc(N1, Pid, Acc + N);&lt;br /&gt;acc(_, _, Acc) -&amp;gt;&lt;br /&gt; Acc.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;%%%&lt;br /&gt;%%% Program main()&lt;br /&gt;%%%&lt;br /&gt;main() -&amp;gt;&lt;br /&gt; Pid = start(),&lt;br /&gt; Acc = acc(1, Pid, 0),&lt;br /&gt; Acc.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/1984766282269043435/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=1984766282269043435' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/1984766282269043435'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/1984766282269043435'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/01/little-erlange-exercise-2.html' title='Little Erlang Exercise 2'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-4096780570486567751</id><published>2008-01-11T13:05:00.000+11:00</published><updated>2008-01-28T21:58:39.720+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Little Erlange Exercise 1</title><content type='html'>Problem definition: &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=1"&gt;Euler Problem 1&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Python version&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;br /&gt;print reduce(lambda x, y : x + y,&lt;br /&gt; filter(lambda x: x % 3 == 0 or x % 5 == 0,&lt;br /&gt; range(1, 1001)))&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Erlang version&lt;br /&gt;&lt;br /&gt;&lt;pre style="border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%;"&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;-module(p1).&lt;br /&gt;-export([pr_sum/0]). %% print sum&lt;br /&gt;&lt;br /&gt;pr_sum() -&gt;&lt;br /&gt;      L = lists:seq(1, 1000),&lt;br /&gt;      L1 = [ X ||X &lt;- L, (X rem 3) == 0 orelse (X rem 5) == 0],&lt;br /&gt;      sum(L1). &lt;br /&gt;&lt;br /&gt;sum(L) -&gt; sum(L, 0).&lt;br /&gt;sum([], Acc) -&gt; Acc;&lt;br /&gt;sum([H|T], Acc) -&gt; sum(T, Acc + H).&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/4096780570486567751/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=4096780570486567751' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/4096780570486567751'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/4096780570486567751'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/01/little-erlange-exercise-1.html' title='Little Erlange Exercise 1'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-2642626887724082510</id><published>2008-01-11T11:55:00.000+11:00</published><updated>2008-01-11T13:05:11.124+11:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Little erlang exercise 1 (template)</title><content type='html'>&lt;table style="color: rgb(51, 255, 51);font-family:courier new;background-color: rgb(0, 0, 0);"&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;/table&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/2642626887724082510'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/2642626887724082510'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-1863063009982204384</id><published>2007-11-30T05:08:00.001+11:00</published><updated>2007-11-30T05:18:00.757+11:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><title type='text'>erlang daemon mode</title><content type='html'>-noshell&lt;br /&gt;-detached&lt;br /&gt;-heart&lt;br /&gt;&lt;a href="http://www.sics.se/%7Ejoe/tutorials/web_server/web_server.html#m2" target="_blank"&gt;http://www.sics.se/~joe&lt;wbr&gt;/tutorials/web_server/web&lt;wbr&gt;_server.html#m2&lt;/a&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/1863063009982204384'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/1863063009982204384'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-7492504578198141841</id><published>2007-09-14T17:45:00.001+10:00</published><updated>2008-01-26T16:35:44.797+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><title type='text'>Erlang syntax 2 - Pattern matching and assignment</title><content type='html'>I think it is probably a typical experience for any beginner of Erlang: The equal sign in Erlang actually works differently comparing most other imperative mainstream application.  I were a little bit surprised when I first realized the subtle difference.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;In erlang, the equal sign is actually an pattern matching  operator.  For example,&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family:courier new;"&gt;[H|T] = [0, 1, 2, 3, 4]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In the case, H is actually matched with the head of the list [0..4]. Although it effectively initialised the values of variable H and T, it is fundamentally a different concept.&lt;br /&gt;&lt;br /&gt;Another application of this language feature is that it serves as a mean to enforce assertion. For example,&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: courier new;"&gt;ok = module:func().&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;If func return an atom &lt;span style="font-weight: bold;"&gt;failure&lt;/span&gt; instead of &lt;span style="font-weight: bold;"&gt;ok&lt;/span&gt;, an exception will be automatically generated.&lt;br /&gt;&lt;br /&gt;Isn't it neat?</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/7492504578198141841/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=7492504578198141841' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/7492504578198141841'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/7492504578198141841'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2007/09/erlang-syntax-2-pattern-matching-and.html' title='Erlang syntax 2 - Pattern matching and assignment'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-1589380066274908176</id><published>2007-09-14T17:44:00.000+10:00</published><updated>2008-01-11T11:55:30.918+11:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><title type='text'>Erlang Syntax 1</title><content type='html'>&lt;table style="color: rgb(51, 255, 51);font-family:courier new;background-color: rgb(0, 0, 0);"&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;&lt;br /&gt;1&gt; (list_to_atom("erlang")):(list_to_atom("now"))().&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;&lt;br /&gt;{1189,752160,276431}&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;This is equivalent to&lt;br /&gt;&lt;br /&gt;&lt;table style="color: rgb(51, 255, 51);font-family:courier new;background-color: rgb(0, 0, 0);"&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;&lt;br /&gt;1&gt; erlang:now().&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;Very interesting syntax.</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/1589380066274908176/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=1589380066274908176' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/1589380066274908176'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/1589380066274908176'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2007/09/erlang-syntax-1.html' title='Erlang Syntax 1'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-7037644796722456275</id><published>2007-08-12T23:27:00.001+10:00</published><updated>2007-08-12T23:31:36.635+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Erlang'/><title type='text'>Prologue</title><content type='html'>The last time I got excited about a programming language was around 5 years ago when I started to learn a scripting language called &lt;a href="http://python.org/"&gt;Python&lt;/a&gt;. At that point of time, I were looking for a language that is easier to use than &lt;a href="http://www.blogger.com/www.perl.org"&gt;Perl&lt;/a&gt;. Don't get me wrong: Perl is still great for throw-away scripting. Its regular-expression is indispensable tool. But to do OO development in perl is simply too painful for me.&lt;br /&gt;&lt;br /&gt;To me, Python is 'Perl done right'. It has the power of Perl, yet more readable and programmable. The use of space to indicate scope is simply a brilliant idea, despite feels a bit odd to begin with. By taking away some individual 'freedom' in this regard, it gives the whole community the advantage of uniformity of coding style. This actually makes Python an ideal language for enterprise environment, because,  unlike other scripting languages, Python programmers tends to write code in consistent Pythonic style. No more unmaintainable cryptic Perl or Tcl scripts.&lt;br /&gt;&lt;br /&gt;Python also introduces the idea of &lt;span style="font-weight: bold;"&gt;Lambda Function  &lt;/span&gt;and &lt;span style="font-weight: bold;"&gt;Closure&lt;/span&gt; to me. Without me knowing, I have picked up some functional programming concept!&lt;br /&gt;&lt;br /&gt;Functional programming is no alien to me. I have done Miranda in my first year of computer science, but I were not impressed at that time. I simply did not get it then. (Besides, it seemed to me that none got paid for doing FP professionally, so there is even less incentive to master the concepts)&lt;br /&gt;&lt;br /&gt;Now, I have come a full cycle. This year I "discovered" the language &lt;a href="http://erlang.org/"&gt;Erlang&lt;/a&gt;. After reading the concepts behind the language design and implementation, I am totally in awe. The impact is as if some mystical figure suddenly showed up and told me the answer of a riddle of which I have searching for an answer for years in wilderness.&lt;br /&gt;&lt;br /&gt;So, hopefully in this blog I can share with the public my (hopefully weekly) progress in mastering this new language, erlang, and along the way, my feeling/idea about Erlang, Python and Java. (Hence the title of this blog)</content><link rel='replies' type='application/atom+xml' href='http://erlang-python-java.blogspot.com/feeds/7037644796722456275/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1420318032431335295&amp;postID=7037644796722456275' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/7037644796722456275'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/posts/default/7037644796722456275'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2007/08/prologue.html' title='Prologue'/><author><name>Anthony Kong</name><uri>https://plus.google.com/107508522522146376690</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-TtKh-SutbnA/AAAAAAAAAAI/AAAAAAAAAxs/Har8yXcfEkQ/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-4938064958000018731</id><published>2008-05-02T07:55:00.000+10:00</published><updated>2008-05-02T08:10:50.252+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I would hardly use the "success stories" as the au...</title><content type='html'>I would hardly use the "success stories" as the authoritative list of companies that use Python.&lt;BR/&gt;&lt;BR/&gt;I'm the CTO of a large hedge fund and our development platform is primarily Python. And while we are by no means a large firm (in terms of head count), I have been seeing more and more resumes in the finance world of people using Python at large financial firms.&lt;BR/&gt;&lt;BR/&gt;As Python is not a "mainstream" language, I think it comes in the back door at organizations so you won't always see it in job postings or other public references. That doesn't mean it's not used.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/1587152077115150667/comments/default/4938064958000018731'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/1587152077115150667/comments/default/4938064958000018731'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/04/python-in-corporate-world.html?showComment=1209678900000#c4938064958000018731' title=''/><author><name>David Avraamides</name><uri>http://www.blogger.com/profile/07642457177220572135</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='24' height='32' src='http://davidavraamides.net/media/images/Author.jpg'/></author><thr:in-reply-to href='http://erlang-python-java.blogspot.com/2008/04/python-in-corporate-world.html' ref='tag:blogger.com,1999:blog-1420318032431335295.post-1587152077115150667' source='http://www.blogger.com/feeds/1420318032431335295/posts/default/1587152077115150667' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-580269270'/><gd:extendedProperty name='blogger.displayTime' value='May 2, 2008 at 7:55 AM'/></entry><entry><id>tag:blogger.com,1999:blog-1420318032431335295.post-2126786622257191687</id><published>2008-09-22T11:21:00.000+10:00</published><updated>2008-09-22T20:42:15.923+10:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>hi, i got this using 1 process&lt;br&gt;&lt;br&gt;&lt;br&gt;fib(Max)...</title><content type='html'>hi, i got this using 1 process&lt;BR/&gt;&lt;BR/&gt;&lt;BR/&gt;fib(Max) -&amp;gt;&lt;BR/&gt;    fib(Max, 0, 0, 1).&lt;BR/&gt;&lt;BR/&gt;fib(Max, Acc, I, J) when I rem 2 == 1 -&amp;gt; fib(Max, Acc, J, I + J);&lt;BR/&gt;fib(Max, Acc, I, J) when Acc + I &amp;lt; Max -&amp;gt; fib(Max, Acc + I, J, I + J);&lt;BR/&gt;fib(_Max, Acc, _I, _J) -&amp;gt; Acc.&lt;BR/&gt;&lt;BR/&gt;main(_) -&amp;gt; io:format(&amp;quot;~p~n&amp;quot;, [fib(1000000)]).</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/1984766282269043435/comments/default/2126786622257191687'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1420318032431335295/1984766282269043435/comments/default/2126786622257191687'/><link rel='alternate' type='text/html' href='http://erlang-python-java.blogspot.com/2008/01/little-erlange-exercise-2.html?showComment=1222046460000#c2126786622257191687' title=''/><author><name>alexgirao</name><uri>http://www.blogger.com/profile/16942850091631181807</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://erlang-python-java.blogspot.com/2008/01/little-erlange-exercise-2.html' ref='tag:blogger.com,1999:blog-1420318032431335295.post-1984766282269043435' source='http://www.blogger.com/feeds/1420318032431335295/posts/default/1984766282269043435' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1278541046'/><gd:extendedProperty name='blogger.displayTime' value='September 22, 2008 at 11:21 AM'/></entry></feed>