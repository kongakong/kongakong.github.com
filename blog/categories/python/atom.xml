<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Timeline]]></title>
  <link href="http://kongakong.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://kongakong.github.io/"/>
  <updated>2013-06-22T20:23:53+10:00</updated>
  <id>http://kongakong.github.io/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Whenever you think you need urllib2, you actually need requests]]></title>
    <link href="http://kongakong.github.io/blog/2013/05/14/p-50367270258/"/>
    <updated>2013-05-14T07:21:00+10:00</updated>
    <id>http://kongakong.github.io/blog/2013/05/14/p-50367270258</id>
    <content type="html"><![CDATA[<p>Since I have started using python since version 2.4, I have a lot of old die-hard habit. For one, I write exception handler like this</p>

<p>instead  of</p>

<p>The later is of course a better and more flexible style.</p>

<p>So, today, when I want to write up a simple test to post data to a web server, I imported lib urllib2 right away.</p>

<p>It usually works great… unTIL you need something more than basic.</p>

<p>Apparently I need to set some cookie and set to the server. Let’s import cookiejar and cookie…</p>

<p>Why it throws an exception <em>AttributeError: ‘SimpleCookie’ object has no attribute +’rfc2965’</em>?</p>

<p>OK, let’s import DefaultCookiePolicy. Then I got hit by a <em>missing domain attribute</em> exception. “Do I need to use a lower level Cookie class to set the domain?”, I wonder. Try switching to Cookie and it throw this exception</p>

<p>At this point I said to myself: No, I am not going to figure out the 17 arguments. My test code is at this point in this dismal state:.</p>

<p>Instead of continuing banging my head against a wall, I recall reading about ‘requests’ module. Let give it a go.</p>

<p>Like magic, it is all I need. 2 lines.</p>

<p>It just works. Well done, requests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XPath, Python and Erlang]]></title>
    <link href="http://kongakong.github.io/blog/2013/05/08/p-49924605254/"/>
    <updated>2013-05-08T20:00:00+10:00</updated>
    <id>http://kongakong.github.io/blog/2013/05/08/p-49924605254</id>
    <content type="html"><![CDATA[<p>Just feel that python is easier for XML manipulation.</p>

<p>e.g.</p>

<p>Very concise.</p>

<p>whereas in erlang, since the function xmerl:string may return a list that’s composed of various record type (such as  xmlRecord or xmlText etc), it makes the handling more complex (one clause per record type). The printout from REPL is also a lot more verbose. e.g.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single quote is for something else in erlang]]></title>
    <link href="http://kongakong.github.io/blog/2013/05/06/p-49716537787/"/>
    <updated>2013-05-06T06:56:00+10:00</updated>
    <id>http://kongakong.github.io/blog/2013/05/06/p-49716537787</id>
    <content type="html"><![CDATA[<p>In python, single quote and double quote are pretty much interchangable. Not so in erlang.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Python Epiphanies” by Stuart Williams]]></title>
    <link href="http://kongakong.github.io/blog/2012/09/26/p-32322486387/"/>
    <updated>2012-09-26T21:04:00+10:00</updated>
    <id>http://kongakong.github.io/blog/2012/09/26/p-32322486387</id>
    <content type="html"><![CDATA[<p>“Python Epiphanies” by Stuart Williams</p>

<p><div class="embed-video-container"><iframe width="400" height="300" src="http://www.youtube.com/embed/Pi9NpxAvYSs "></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side effect programming is bad]]></title>
    <link href="http://kongakong.github.io/blog/2012/09/20/p-31877647026/"/>
    <updated>2012-09-20T06:52:00+10:00</updated>
    <id>http://kongakong.github.io/blog/2012/09/20/p-31877647026</id>
    <content type="html"><![CDATA[<p>This bit of code is trying to calculate a list of mid prices based on bid and ask prices</p>

<p>It works fine unTIL one day there is a None in mids.</p>

<p>The bid and ask of the corresponding item are both zero. We expect to see zero in the result.</p>

<p>So what happened?</p>

<p>The original lambda, f, rely on the side effect of short-circuit behaviour of  and/or operator to return the mid price (if there is data) or None (if both are <code>None</code>)</p>

<p>But it will not work if both X and Y are zero, because zero is evaluated to false. While zero is the answer we want, the execution falls to the ‘or’ part of the expression.</p>

<p>A better to write the lambda:</p>
]]></content>
  </entry>
  
</feed>
