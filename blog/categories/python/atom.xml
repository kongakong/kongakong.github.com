<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Timeline]]></title>
  <link href="http://kongakong.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://kongakong.github.io/"/>
  <updated>2013-06-23T09:17:45+10:00</updated>
  <id>http://kongakong.github.io/</id>
  <author>
    <name><![CDATA[Anthony Kong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Whenever you think you need urllib2, you actually need requests]]></title>
    <link href="http://kongakong.github.io/blog/2013/05/14/p-50367270258/"/>
    <updated>2013-05-14T07:21:00+10:00</updated>
    <id>http://kongakong.github.io/blog/2013/05/14/p-50367270258</id>
    <content type="html"><![CDATA[<p>Since I have started using python since version 2.4, I have a lot of old die-hard habit. For one, I write exception handler like this</p>

<p><code>except Exception, e:</code></p>

<p>instead  of</p>

<p><code>except Exception as e:</code></p>

<p>The later is of course a better and more flexible style.</p>

<p>So, today, when I want to write up a simple test to post data to a web server, I imported lib urllib2 right away.</p>

<p>It usually works great… unTIL you need something more than basic.</p>

<p>Apparently I need to set some cookie and set to the server. Let’s import cookiejar and cookie…</p>

<p>Why it throws an exception <em>AttributeError: ‘SimpleCookie’ object has no attribute +’rfc2965’</em>?</p>

<p>OK, let’s import DefaultCookiePolicy. Then I got hit by a <em>missing domain attribute</em> exception. “Do I need to use a lower level Cookie class to set the domain?”, I wonder. Try switching to Cookie and it throw this exception</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;...</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">Cookie</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="ne">TypeError</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">()</span> <span class="n">takes</span> <span class="n">at</span> <span class="n">least</span> <span class="mi">17</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">1</span> <span class="n">given</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this point I said to myself: No, I am not going to figure out the 17 arguments. My test code is at this point in this dismal state:.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">cookielib</span> <span class="kn">import</span> <span class="n">Cookie</span><span class="p">,</span> <span class="n">CookieJar</span><span class="p">,</span> <span class="n">DefaultCookiePolicy</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Cookie</span> <span class="kn">import</span> <span class="n">SimpleCookie</span>
</span><span class='line'>
</span><span class='line'><span class="n">policy</span> <span class="o">=</span> <span class="n">DefaultCookiePolicy</span><span class="p">(</span><span class="n">rfc2965</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">SimpleCookie</span><span class="p">()</span>
</span><span class='line'><span class="n">c</span><span class="p">[</span><span class="s">&#39;secretkey&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">auth_token</span>
</span><span class='line'><span class="n">cj</span> <span class="o">=</span> <span class="n">CookieJar</span><span class="p">(</span><span class="n">policy</span><span class="p">)</span>
</span><span class='line'><span class="n">cj</span><span class="o">.</span><span class="n">set_cookie</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">req</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">/postdata&quot;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_url</span><span class="p">)</span>
</span><span class='line'><span class="n">proxyHandler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">(</span> <span class="p">{}</span> <span class="p">)</span>
</span><span class='line'><span class="n">defaultErrorHandler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPDefaultErrorHandler</span><span class="p">()</span>
</span><span class='line'><span class="n">cookieHandler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPCookieProcessor</span><span class="p">(</span><span class="n">cj</span><span class="p">)</span>
</span><span class='line'><span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span> <span class="n">proxyHandler</span><span class="p">,</span> <span class="n">defaultErrorHandler</span><span class="p">,</span> <span class="n">cookieHandler</span> <span class="p">)</span>
</span><span class='line'><span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Instead of continuing banging my head against a wall, I recall reading about ‘requests’ module. Let give it a go.</p>

<p>Like magic, it is all I need. 2 lines.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">cookie</span><span class="o">=</span><span class="n">cookie</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It just works. Well done, requests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XPath, Python and Erlang]]></title>
    <link href="http://kongakong.github.io/blog/2013/05/08/p-49924605254/"/>
    <updated>2013-05-08T20:00:00+10:00</updated>
    <id>http://kongakong.github.io/blog/2013/05/08/p-49924605254</id>
    <content type="html"><![CDATA[<p>Just feel that python is easier for XML manipulation.</p>

<p>e.g.
<code>
from lxml import etree
f = open("digg-science-rss1.xml")
tree  = etree.parse(f)
tree.xpath(expr)
</code></p>

<p>Very concise.</p>

<p>whereas in erlang, since the function xmerl:string may return a list that’s composed of various record type (such as  xmlRecord or xmlText etc), it makes the handling more complex (one clause per record type). The printout from REPL is also a lot more verbose. e.g.</p>

<p>```
&hellip;</p>

<pre><code>  #xmlText{
      parents = [{item,16},{channel,2},{rss,1}],
      pos = 3,language = [],value = "\n   ",type = text},
  #xmlElement{
      name = link,expanded_name = link,nsinfo = [],
      namespace = 
          #xmlNamespace{
              default = [],
              nodes =
</code></pre>

<p>&hellip;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single quote is for something else in erlang]]></title>
    <link href="http://kongakong.github.io/blog/2013/05/06/p-49716537787/"/>
    <updated>2013-05-06T06:56:00+10:00</updated>
    <id>http://kongakong.github.io/blog/2013/05/06/p-49716537787</id>
    <content type="html"><![CDATA[<p>In python, single quote and double quote are pretty much interchangable. Not so in erlang.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Python Epiphanies” by Stuart Williams]]></title>
    <link href="http://kongakong.github.io/blog/2012/09/26/p-32322486387/"/>
    <updated>2012-09-26T21:04:00+10:00</updated>
    <id>http://kongakong.github.io/blog/2012/09/26/p-32322486387</id>
    <content type="html"><![CDATA[<p><em>Python Epiphanies</em> by Stuart Williams</p>

<p><div class="embed-video-container"><iframe width="400" height="300" src="http://www.youtube.com/embed/Pi9NpxAvYSs "></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side effect programming is bad]]></title>
    <link href="http://kongakong.github.io/blog/2012/09/20/p-31877647026/"/>
    <updated>2012-09-20T06:52:00+10:00</updated>
    <id>http://kongakong.github.io/blog/2012/09/20/p-31877647026</id>
    <content type="html"><![CDATA[<p>This bit of code is trying to calculate a list of mid prices based on bid and ask prices</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def mids(self, bids, asks):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>f = lambda X, Y: (X is not None) and (Y  is not None) and (X+Y)/2 or None
</span><span class='line'>return [f(bid, ask) for bid, ask in zip(bids, asks)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It works fine unTIL one day there is a None in mids.</p>

<p>The bid and ask of the corresponding item are both zero. We expect to see zero in the result.</p>

<p>So what happened?</p>

<p>The original lambda, f, rely on the side effect of short-circuit behaviour of  and/or operator to return the mid price (if there is data) or None (if both are <code>None</code>)</p>

<p>But it will not work if both X and Y are zero, because zero is evaluated to false. While zero is the answer we want, the execution falls to the ‘or’ part of the expression.</p>

<p>A better to write the lambda:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>f = lambda X, Y:  (X+Y)/2.0 if (X is not None) and (Y  is not None)  else None</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
